// Generated by gtkmmproc -- DO NOT MODIFY!

#include <gdkmm/image.h>
#include <gdkmm/private/image_p.h>

#include <gdk/gdkenumtypes.h>
// -*- c++ -*-
/* $Id$ */

/*
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gdk
{

Image::Image(ImageType type, const Glib::RefPtr<Visual>& visual, int width, int height)
:
  Object( G_OBJECT( gdk_image_new((GdkImageType)type, visual->gobj(), width, height) ) )
{}

} /* namespace Gdk */


namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gdk::ImageType>::value_type()
{
  return gdk_image_type_get_type();
}


namespace Glib
{

Glib::RefPtr<Gdk::Image> wrap(GdkImage* object, bool take_copy)
{
  return Glib::RefPtr<Gdk::Image>( dynamic_cast<Gdk::Image*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gdk
{


/* The *_Class implementation: */

const Glib::Class& Image_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Image_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gdk_image_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void Image_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

}


Glib::ObjectBase* Image_Class::wrap_new(GObject* object)
{
  return new Image((GdkImage*)object);
}


/* The implementation: */

GdkImage* Image::gobj_copy()
{
  reference();
  return gobj();
}

Image::Image(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{}

Image::Image(GdkImage* castitem)
:
  Glib::Object((GObject*)(castitem))
{}

Image::~Image()
{}


Image::CppClassType Image::image_class_; // initialize static member

GType Image::get_type()
{
  return image_class_.init().get_type();
}

GType Image::get_base_type()
{
  return gdk_image_get_type();
}


Glib::RefPtr<Image> Image::create(ImageType type, const Glib::RefPtr<Visual>& visual, int width, int height)
{
  return Glib::RefPtr<Image>( new Image(type, visual, width, height) );
}
void Image::put_pixel(int x, int y, guint32 pixel)
{
  gdk_image_put_pixel(gobj(), x, y, pixel);
}

guint32 Image::get_pixel(int x, int y) const
{
  return gdk_image_get_pixel(const_cast<GdkImage*>(gobj()), x, y);
}

void Image::set_colormap(const Glib::RefPtr<Colormap>& colormap)
{
  gdk_image_set_colormap(gobj(), Glib::unwrap(colormap));
}

Glib::RefPtr<Colormap> Image::get_colormap()
{

  Glib::RefPtr<Colormap> retvalue = Glib::wrap(gdk_image_get_colormap(gobj()));

  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Colormap> Image::get_colormap() const
{

  Glib::RefPtr<const Colormap> retvalue = Glib::wrap(gdk_image_get_colormap(const_cast<GdkImage*>(gobj())));

  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

ImageType Image::get_image_type() const
{
  return ((ImageType)(gobj()->type));
}

Glib::RefPtr<Visual> Image::get_visual()
{
  Glib::RefPtr<Visual> ref_ptr(Glib::wrap(gobj()->visual));

  if(ref_ptr)
    ref_ptr->reference();

  return ref_ptr;
}

Glib::RefPtr<const Visual> Image::get_visual() const
{
  Glib::RefPtr<const Visual> ref_ptr(Glib::wrap(gobj()->visual));

  if(ref_ptr)
    ref_ptr->reference();

  return ref_ptr;
}

ByteOrder Image::get_byte_order() const
{
  return ((ByteOrder)(gobj()->byte_order));
}

int Image::get_width() const
{
  return gobj()->width;
}

int Image::get_height() const
{
  return gobj()->height;
}

guint16 Image::get_bpp() const
{
  return gobj()->bpp;
}

guint16 Image::get_bpl() const
{
  return gobj()->bpl;
}

guint16 Image::get_bits_per_pixel() const
{
  return gobj()->bits_per_pixel;
}

void* Image::get_mem()
{
  return gobj()->mem;
}

const void* Image::get_mem() const
{
  return (const void*)(gobj()->mem);
}

void* Image::get_windowing_data() const
{
  return gobj()->windowing_data;
}


} // namespace Gdk


