<root>

<function name="gtk_window_move">
<description>
Asks the &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; to move
@window to the given position.  Window managers are free to ignore
this; most window managers ignore requests for initial window
positions (instead using a user-defined placement algorithm) and
honor requests after the window has already been shown.

Note: the position is the position of the gravity-determined
reference point for the window. The gravity determines two things:
first, the location of the reference point in root window
coordinates; and second, which point on the window is positioned at
the reference point.

By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
point is simply the @x, @y supplied to Gtk::Window::move(). The
top-left corner of the window decorations (aka window frame or
border) will be placed at @x, @y.  Therefore, to position a window
at the top left of the screen, you want to use the default gravity
(which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.

To position a window at the bottom right corner of the screen, you
would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
point is at @x + the window width and @y + the window height, and
the bottom-right corner of the window border will be placed at that
reference point. So, to place a window in the bottom right corner
you would first set gravity to south east, then write:
&amp;lt;literal&amp;gt;Gtk::Window::move (window, Gdk::screen_width () - window_width,
Gdk::screen_height () - window_height)&amp;lt;/literal&amp;gt;.

The extended window manager hints specification at
&amp;lt;ulink url=&quot;http://www.freedesktop.org/standards/wm-spec.html&quot;&amp;gt;
http://www.freedesktop.org/standards/wm-spec.html&amp;lt;/ulink&amp;gt; has a
nice table of gravities in the &quot;implementation notes&quot; section.

The Gtk::Window::get_position() documentation may also be relevant.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to move window to
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to move window to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>



<function name="gdk_display_manager_list_displays">
<description>
List all currently open displays.

@newin2p2
</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdkDisplay objects.
</return>
</function>



<function name="gdk_screen_get_toplevel_windows">
<description>
Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).
@newin2p2
</description>
<parameters>
<parameter name="screen">
<parameter_description> The #GdkScreen where the toplevels are located.
</parameter_description>
</parameter>
</parameters>
<return> list of toplevel windows.
</return>
</function>



<function name="gdk_screen_list_visuals">
<description>
Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.
@newin2p2
</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> a list of visuals.
</return>
</function>


<function name="gdk_window_get_toplevels">
<description>
Obtains a list of all toplevel windows known to GDK on the default
screen (see gdk_window_get_toplevels_for_screen()).
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).


</description>
<parameters>
</parameters>
<return> list of toplevel windows.
</return>
</function>

<function name="gdk_window_thaw_updates">
<description>
Thaws a window frozen with Gdk::Window::freeze_updates().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>


<function name="gdk_window_freeze_updates">
<description>
Temporarily freezes a window such that it won&apos;t receive expose
events.  The window will begin receiving expose events again when
Gdk::Window::thaw_updates() is called. If Gdk::Window::freeze_updates()
has been called more than once, Gdk::Window::thaw_updates() must be called
an equal number of times to begin processing exposes.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_pointer">
<description>
Gets the current location of the pointer and the current modifier
mask for a given display.

@newin2p2
</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> location to store the screen that the
cursor is on.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of pointer.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of pointer.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store current modifier mask.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_pointer_hooks">
<description>
This function allows for hooking into the operation
of getting the current location of the pointer. This
is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.

This function is not multihead safe. For multihead operation,
see gdk_display_set_pointer_hooks().


</description>
<parameters>
<parameter name="new_hooks">
<parameter_description> a table of pointers to functions for getting
quantities related to the current pointer position.
</parameter_description>
</parameter>
</parameters>
<return> the previous pointer hook table
</return>
</function>

<function name="gdk_window_set_icon">
<description>
Sets the icon of @window as a pixmap or window. If using GTK+, investigate
gtk_window_set_default_icon_list() first, and then gtk_window_set_icon_list()
and gtk_window_set_icon(). If those don&apos;t meet your needs, look at
gdk_window_set_icon_list(). Only if all those are too high-level do you
want to fall back to gdk_window_set_icon().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="icon_window">
<parameter_description> a #GdkWindow to use for the icon.
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap to use as the icon,
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a 1-bit pixmap (#GdkBitmap) to use as mask for @pixmap.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_sm_client_id">
<description>
Sets the &amp;lt;literal&amp;gt;SM_CLIENT_ID&amp;lt;/literal&amp;gt; property on the application&apos;s leader window so that
the window manager can save the application&apos;s state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual
(ICCCM) for information on the &amp;lt;literal&amp;gt;WM_CLIENT_LEADER&amp;lt;/literal&amp;gt; property.
(Both documents are part of the X Window System distribution.)

</description>
<parameters>
<parameter name="sm_client_id">
<parameter_description> the client id assigned by the session manager when the
connection was opened.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_set_pointer_hooks">
<description>
This function allows for hooking into the operation
of getting the current location of the pointer on a particular
display. This is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.

@newin2p2
</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="new_hooks">
<parameter_description> a table of pointers to functions for getting
quantities related to the current pointer position.
</parameter_description>
</parameter>
</parameters>
<return> the previous pointer hook table
</return>
</function>

<function name="gdk_screen_make_display_name">
<description>
Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.

@newin2p2
</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> The name.
</return>
</function>

<function name="gdk_drag_status">
<description>
Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the selected action which will be taken when a drop happens,
or 0 to indicate that a drop will not be accepted.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
    <mapping class="Context" />
</function>

<function name="gdk_draw_point">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_line">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_rectangle">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_arc">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_drawable">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_image">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_segments">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_glyphs">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_layout_line">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_layout_line_with_colors">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_layout">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_layout_with_colors">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_pixbuf">
    <mapping class="Drawable" />
</function>

<function name="gdk_draw_rgb_32_image_dithalign">
    <mapping class="Drawable" />
</function>

<function name="gdk_drag_get_protocol_for_display">
    <mapping class="Display" />
</function>

<function name="gdk_keymap_get_for_display">
    <mapping class="Display" />
</function>

<function name="gdk_pixmap_lookup_for_display">
    <mapping class="Display" />
</function>

<function name="gdk_display_pointer_ungrab">
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a timestap (e.g. GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
</function>

<function name="gdk_display_keyboard_ungrab">
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a timestap (e.g #GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
</function>

<function name="gdk_pointer_ungrab">
<parameters>
<parameter name="timestamp">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no 
timestamp is available.
</parameter_description>
</parameter>
</parameters>
</function>

<function name="gdk_keyboard_ungrab">
<parameters>
<parameter name="timestamp">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
timestamp is available.
</parameter_description>
</parameter>
</parameters>
</function>

<function name="gdk_drop_finish">
    <mapping class="Context" />
</function>

<function name="gdk_drop_reply">
    <mapping class="Context" />
</function>

<function name="gdk_drag_find_window_for_screen">
    <mapping class="Context" />
</function>

<function name="gdk_drag_get_selection">
    <mapping class="Context" />
</function>

<function name="gdk_pixbuf_new_subpixbuf">
<parameters>
<parameter name="dummy">
<parameter_description> dummy parameter, this is a static function but the name
idicates a class, so this one will be stripped not the actual first parameter
</parameter_description>
</parameter>
<parameter name="src_pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> X coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Y coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region in @src_pixbuf
</parameter_description>
</parameter>
</parameters>
</function>

<function name="gdk_window_set_cursor">
<description>
Sets the mouse pointer for a #GdkWindow. 
To make the cursor invisible, use gdk_cursor_new_from_pixmap() to create
a cursor with no pixels in it.
</description>

</function>

<function name="gdk_cairo_create">
<description>
Creates a Cairo context for drawing to @drawable.
</description>
<parameters>
</parameters>
<return> A newly created Cairo context.

Since: 2.10
</return>
</function>

<function name="gdk_drawable_get_image">
<description>
A #GdkImage stores client-side image data (pixels). In contrast,
#GdkPixmap and #GdkWindow are server-side
objects. gdk_drawable_get_image() obtains the pixels from a
server-side drawable as a client-side #GdkImage.  The format of a
#GdkImage depends on the #GdkVisual of the current display, which
makes manipulating #GdkImage extremely difficult; therefore, in
most cases you should use the Gdk::Pixbuf::create() method that takes a Gdk::Drawable, 
instead of this lower-level function. A #GdkPixbuf contains image data in a
canonicalized RGB format, rather than a display-dependent format.
Of course, there&apos;s a convenience vs. speed tradeoff here, so you&apos;ll
want to think about what makes sense for your application.

@x, @y, @width, and @height define the region of @drawable to
obtain as an image.

You would usually copy image data to the client side if you intend
to examine the values of individual pixels, for example to darken
an image or add a red tint. It would be prohibitively slow to
make a round-trip request to the windowing system for each pixel,
so instead you get all of them at once, modify them, then copy
them all back at once.

If the X server or other windowing system backend is on the local
machine, this function may use shared memory to avoid copying
the image data.

If the source drawable is a #GdkWindow and partially offscreen
or obscured, then the obscured portions of the returned image
will contain undefined data.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height or region to get
</parameter_description>
</parameter>
</parameters>
<return> a #GdkImage containing the contents of @drawable
</return>
</function>

<function name="gdk_window_get_update_area">
<description>
Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
get_update_area() returns an invalid Region.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the update area for @window
</return>
</function>

</root>
