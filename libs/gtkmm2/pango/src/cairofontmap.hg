/* $Id: cairofontmap.hg,v 1.1 2006/05/30 17:14:21 murrayc Exp $ */

/* fontmap.h
 *
 * Copyright 2001      The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/interface.h>
#include <pangomm/context.h>
#include <pango/pangocairo.h>

_DEFS(pangomm,pango)
_PINCLUDE(glibmm/private/interface_p.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _PangoCairoFontMapIface PangoCairoFontMapIface;
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Pango
{

class Context;

/** A Pango::CairoFontMap represents the set of fonts available for a particular rendering system.
 */
class CairoFontMap : public Glib::Interface
{
   _CLASS_INTERFACE(CairoFontMap, PangoCairoFontMap, PANGO_CAIRO_FONT_MAP, PangoCairoFontMapIface)

public:
  //_WRAP_METHOD(static Glib::RefPtr<PangoFontMap> get_default(), pango_cairo_font_map_get_default) //TODO: ref this?

#m4 _CONVERSION(`cairo_font_type_t',`Cairo::FontType',`static_cast<Cairo::FontType>($3)')
  _WRAP_METHOD(Cairo::FontType get_font_type() const, pango_cairo_font_map_get_font_type)

  _WRAP_METHOD(void set_resolution(double dpi), pango_cairo_font_map_set_resolution)
  _WRAP_METHOD(double get_resolution() const, pango_cairo_font_map_get_resolution)
  _WRAP_METHOD(Glib::RefPtr<Context> create_context(), pango_cairo_font_map_create_context)
};

} /* namespace Pango */

