// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _PANGOMM_LAYOUTRUN_H
#define _PANGOMM_LAYOUTRUN_H


#include <glibmm.h>

/* layoutrun.h
 *
 * Copyright (C) 1998-1999 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <pango/pango-layout.h>


namespace Pango
{

class Item;
class GlyphString;

/** A Pango::LayoutRun represents a single run within a PangoLayoutLine.
 */
class LayoutRun
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef LayoutRun CppObjectType;
  typedef PangoLayoutRun BaseObjectType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

private:


protected:
  LayoutRun();

public:
  explicit LayoutRun(const PangoLayoutRun* src);

  /** Gets the Pango::Item object that provides information about the segment of text in this run.
   * @return A Pango::Item object.
   */
   Item get_item() const;
 
  /** Gets the string of glyphs obtained by shaping the text for this item.
   * @return A Pango::GlyphString object.
   */
   GlyphString get_glyphs() const;
 
  /// Provides access to the underlying C GObject.  
  PangoLayoutRun*       gobj()       { return &gobject_; }
  /// Provides access to the underlying C GObject.
  const PangoLayoutRun* gobj() const { return &gobject_; }

protected:
  PangoLayoutRun gobject_;


};

} /* namespace Pango */


namespace Glib
{

/** @relates Pango::LayoutRun */
Pango::LayoutRun& wrap(PangoLayoutRun* object);

/** @relates Pango::LayoutRun */
const Pango::LayoutRun& wrap(const PangoLayoutRun* object);

} /* namepspace Glib */


#endif /* _PANGOMM_LAYOUTRUN_H */

