// Generated by gtkmmproc -- DO NOT MODIFY!


#include <pangomm/fontmap.h>
#include <pangomm/private/fontmap_p.h>

// -*- c++ -*-
/* $Id$ */

/* 
 *
 * Copyright 2001      The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <pangomm/context.h>
#include <pango/pango-fontmap.h>

namespace Pango
{

Glib::ArrayHandle< Glib::RefPtr<FontFamily> > FontMap::list_families() const
{
  //Get the array:
  PangoFontFamily** pFamilies = 0;
  int n_families = 0;
  pango_font_map_list_families(const_cast<PangoFontMap*>(gobj()), &pFamilies, &n_families);

  return Glib::ArrayHandle< Glib::RefPtr<FontFamily> >
      (pFamilies, n_families, Glib::OWNERSHIP_SHALLOW);
}

} /* namespace Pango */


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Pango::FontMap> wrap(PangoFontMap* object, bool take_copy)
{
  return Glib::RefPtr<Pango::FontMap>( dynamic_cast<Pango::FontMap*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Pango
{


/* The *_Class implementation: */

const Glib::Class& FontMap_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &FontMap_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(pango_font_map_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void FontMap_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* FontMap_Class::wrap_new(GObject* object)
{
  return new FontMap((PangoFontMap*)object);
}


/* The implementation: */

PangoFontMap* FontMap::gobj_copy()
{
  reference();
  return gobj();
}

FontMap::FontMap(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{}

FontMap::FontMap(PangoFontMap* castitem)
:
  Glib::Object((GObject*)(castitem))
{}

FontMap::~FontMap()
{}


FontMap::CppClassType FontMap::fontmap_class_; // initialize static member

GType FontMap::get_type()
{
  return fontmap_class_.init().get_type();
}

GType FontMap::get_base_type()
{
  return pango_font_map_get_type();
}


Glib::RefPtr<Font> FontMap::load_font(const Glib::RefPtr<Context>& context, const FontDescription& desc) const
{
  return Glib::wrap(pango_font_map_load_font(const_cast<PangoFontMap*>(gobj()), Glib::unwrap(context), (desc).gobj()));
}

Glib::RefPtr<Fontset> FontMap::load_fontset(const Glib::RefPtr<Context>& context, const FontDescription& desc, const Language& language) const
{
  return Glib::wrap(pango_font_map_load_fontset(const_cast<PangoFontMap*>(gobj()), Glib::unwrap(context), (desc).gobj(), const_cast<PangoLanguage*>((language).gobj())));
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Pango


