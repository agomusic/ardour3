// -*- c++ -*-
/* $Id: rc.ccg,v 1.3 2004/03/02 21:49:58 murrayc Exp $ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/utility.h>
#include <gtkmm/settings.h>
#include <gtkmm/widget.h>
#include <gtkmm/style.h>
#include <gtk/gtkrc.h>


namespace Gtk
{

void RcStyle::set_name(const Glib::ustring& name)
{
  const Glib::ScopedPtr<char> old_name (gobj()->name);
  gobj()->name = g_strdup(name.c_str());
}

void RcStyle::set_bg_pixmap_name(StateType state, const Glib::ustring& name)
{
  const Glib::ScopedPtr<char> old_name (gobj()->bg_pixmap_name[state]);
  gobj()->bg_pixmap_name[state] = g_strdup(name.c_str());
}

Glib::ustring RcStyle::get_bg_pixmap_name(StateType state) const
{
  if(const char *const name = gobj()->bg_pixmap_name[state])
    return Glib::ustring(name);
  else
    return Glib::ustring();
}

void RcStyle::set_font(const Pango::FontDescription& font_desc)
{
  g_return_if_fail(font_desc.gobj() != 0);

  const Pango::FontDescription old_font_desc (gobj()->font_desc, false);
  gobj()->font_desc = font_desc.gobj_copy();
}

Pango::FontDescription RcStyle::get_font() const
{
  return Pango::FontDescription(gobj()->font_desc, true);
}

void RcStyle::set_color_flags(StateType state, RcFlags flags)
{
  gobj()->color_flags[state] = static_cast<GtkRcFlags>(gobj()->color_flags[state] | flags);
}

void RcStyle::unset_color_flags(StateType state, RcFlags flags)
{
  gobj()->color_flags[state] = static_cast<GtkRcFlags>(gobj()->color_flags[state] & ~flags);
}

RcFlags RcStyle::get_color_flags(StateType state) const
{
  return static_cast<RcFlags>(unsigned(gobj()->color_flags[state]));
}

void RcStyle::set_xthickness(int xthickness)
{
  gobj()->xthickness = xthickness;
}

void RcStyle::set_ythickness(int ythickness)
{
  gobj()->ythickness = ythickness;
}


RC::RC(const Glib::ustring& filename)
{
  //gtk_rc_init();
  gtk_rc_parse(filename.c_str());
}

Glib::RefPtr<Style>
RC::get_style(const Widget &widget)
{
  return Glib::wrap(gtk_rc_get_style(const_cast<GtkWidget*>(widget.gobj())));
}

void
RC::parse_string(const Glib::ustring& rc_string)
{
  gtk_rc_parse_string(const_cast<char*>(rc_string.c_str()));
}


void
RC::add_default_file(const Glib::ustring& filename)
{
  gtk_rc_add_default_file(const_cast<char*>(filename.c_str()));
}

void
RC::set_default_files(const Glib::ArrayHandle<Glib::ustring>& filenames)
{
  gtk_rc_set_default_files(const_cast<char**>(filenames.data()));
}

Glib::ArrayHandle<Glib::ustring>
RC::get_default_files()
{
  return Glib::ArrayHandle<Glib::ustring>(
      const_cast<const char**>(gtk_rc_get_default_files()), Glib::OWNERSHIP_NONE);
}

bool RC::reparse_all()
{
  return gtk_rc_reparse_all();
}

bool RC::reparse_all(const Glib::RefPtr<Settings>& settings, bool force_load)
{
  return gtk_rc_reparse_all_for_settings(settings->gobj(), force_load);
}

void RC::reset_styles(const Glib::RefPtr<Settings>& settings)
{
  gtk_rc_reset_styles(settings->gobj());        
}

Glib::ustring
RC::find_pixmap_in_path(const Glib::RefPtr<Settings>& context, GScanner *scanner, const Glib::ustring& pixmap_file)
{
  return Glib::convert_return_gchar_ptr_to_ustring(
      gtk_rc_find_pixmap_in_path(context->gobj(), scanner, const_cast<char*>(pixmap_file.c_str())));
}

Glib::ustring
RC::find_pixmap_in_path(const Glib::RefPtr<Settings>& context, const Glib::ustring& pixmap_file)
{
  return Glib::convert_return_gchar_ptr_to_ustring(
      gtk_rc_find_pixmap_in_path(context->gobj(), 0 /* see C docs */, const_cast<char*>(pixmap_file.c_str())));
}

Glib::ustring
RC::find_module_in_path(const Glib::ustring& module_file)
{
  return Glib::convert_return_gchar_ptr_to_ustring(
      gtk_rc_find_module_in_path(const_cast<char*>(module_file.c_str())));
}

Glib::ustring
RC::get_theme_dir()
{
  return Glib::convert_return_gchar_ptr_to_ustring(gtk_rc_get_theme_dir());
}

Glib::ustring
RC::get_module_dir()
{
  return Glib::convert_return_gchar_ptr_to_ustring(gtk_rc_get_module_dir());
}

}

