;; From AtkObject

(define-signal children-changed
  (of-object "AtkObject")
  (return-type "void")
  (when "last")
  (parameters
    '("guint" "p0")
    '("gpointer" "p1")
  )
)

(define-signal focus-event
  (of-object "AtkObject")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal property-change
  (of-object "AtkObject")
  (return-type "void")
  (when "last")
  (parameters
    '("gpointer" "p0")
  )
)

(define-signal state-change
  (of-object "AtkObject")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal visible-data-changed
  (of-object "AtkObject")
  (return-type "void")
  (when "last")
)

(define-signal active-descendant-changed
  (of-object "AtkObject")
  (return-type "void")
  (when "last")
  (parameters
    '("gpointer" "p0")
  )
)

(define-property accessible-name
  (of-object "AtkObject")
  (prop-type "GParamString")
  (docs "Object instance's name formatted for assistive technology access")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-description
  (of-object "AtkObject")
  (prop-type "GParamString")
  (docs "Description of an object, formatted for assistive technology access")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-parent
  (of-object "AtkObject")
  (prop-type "GParamObject")
  (docs "Is used to notify that the parent has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-value
  (of-object "AtkObject")
  (prop-type "GParamDouble")
  (docs "Is used to notify that the value has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-role
  (of-object "AtkObject")
  (prop-type "GParamInt")
  (docs "The accessible role of this object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-component-layer
  (of-object "AtkObject")
  (prop-type "GParamInt")
  (docs "The accessible layer of this object")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property accessible-component-mdi-zorder
  (of-object "AtkObject")
  (prop-type "GParamInt")
  (docs "The accessible MDI value of this object")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property accessible-table-caption
  (of-object "AtkObject")
  (prop-type "GParamString")
  (docs "Is used to notify that the table caption has changed; this property should not be used. accessible-table-caption-object should be used instead")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-table-column-description
  (of-object "AtkObject")
  (prop-type "GParamString")
  (docs "Is used to notify that the table column description has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-table-column-header
  (of-object "AtkObject")
  (prop-type "GParamObject")
  (docs "Is used to notify that the table column header has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-table-row-description
  (of-object "AtkObject")
  (prop-type "GParamString")
  (docs "Is used to notify that the table row description has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-table-row-header
  (of-object "AtkObject")
  (prop-type "GParamObject")
  (docs "Is used to notify that the table row header has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-table-summary
  (of-object "AtkObject")
  (prop-type "GParamObject")
  (docs "Is used to notify that the table summary has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-table-caption-object
  (of-object "AtkObject")
  (prop-type "GParamObject")
  (docs "Is used to notify that the table caption has changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accessible-hypertext-nlinks
  (of-object "AtkObject")
  (prop-type "GParamInt")
  (docs "The number of links which the current AtkHypertext has")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From AtkComponent

(define-signal bounds-changed
  (of-object "AtkComponent")
  (return-type "void")
  (when "last")
  (parameters
    '("AtkRectangle*" "p0")
  )
)

;; From AtkAction

;; From AtkEditableText

;; From AtkHyperlink

(define-signal link-activated
  (of-object "AtkHyperlink")
  (return-type "void")
  (when "last")
)

(define-property selected-link
  (of-object "AtkHyperlink")
  (prop-type "GParamBoolean")
  (docs "Specifies whether the AtkHyperlink object is selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property number-of-anchors
  (of-object "AtkHyperlink")
  (prop-type "GParamInt")
  (docs "The number of anchors associated with the AtkHyperlink object")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property end-index
  (of-object "AtkHyperlink")
  (prop-type "GParamInt")
  (docs "The end index of the AtkHyperlink object")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property start-index
  (of-object "AtkHyperlink")
  (prop-type "GParamInt")
  (docs "The start index of the AtkHyperlink object")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From AtkHypertext

(define-signal link-selected
  (of-object "AtkHypertext")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

;; From AtkImage

;; From AtkSelection

(define-signal selection-changed
  (of-object "AtkSelection")
  (return-type "void")
  (when "last")
)

;; From AtkTable

(define-signal row-inserted
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal column-inserted
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal row-deleted
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal column-deleted
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal row-reordered
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
)

(define-signal column-reordered
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
)

(define-signal model-changed
  (of-object "AtkTable")
  (return-type "void")
  (when "last")
)

;; From AtkText

(define-signal text-changed
  (of-object "AtkText")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal text-caret-moved
  (of-object "AtkText")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal text-selection-changed
  (of-object "AtkText")
  (return-type "void")
  (when "last")
)

(define-signal text-attributes-changed
  (of-object "AtkText")
  (return-type "void")
  (when "last")
)

;; From AtkValue

;; From AtkRegistry

;; From AtkRelation

(define-property relation-type
  (of-object "AtkRelation")
  (prop-type "GParamEnum")
  (docs "The type of the relation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property target
  (of-object "AtkRelation")
  (prop-type "GParamValueArray")
  (docs "An array of the targets for the relation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From AtkRelationSet

;; From AtkStateSet

;; From GdkColormap

;; From GdkDragContext

;; From GdkDisplay

(define-signal closed
  (of-object "GdkDisplay")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

;; From GdkDisplayManager

(define-signal display-opened
  (of-object "GdkDisplayManager")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDisplay*" "p0")
  )
)

(define-property default-display
  (of-object "GdkDisplayManager")
  (prop-type "GParamObject")
  (docs "The default display for GDK")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GdkDrawable

;; From GdkGC

;; From GdkImage

;; From GdkPixbuf

(define-property colorspace
  (of-object "GdkPixbuf")
  (prop-type "GParamEnum")
  (docs "The colorspace in which the samples are interpreted")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property n-channels
  (of-object "GdkPixbuf")
  (prop-type "GParamInt")
  (docs "The number of samples per pixel")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property has-alpha
  (of-object "GdkPixbuf")
  (prop-type "GParamBoolean")
  (docs "Whether the pixbuf has an alpha channel")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property bits-per-sample
  (of-object "GdkPixbuf")
  (prop-type "GParamInt")
  (docs "The number of bits per sample")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property width
  (of-object "GdkPixbuf")
  (prop-type "GParamInt")
  (docs "The number of columns of the pixbuf")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property height
  (of-object "GdkPixbuf")
  (prop-type "GParamInt")
  (docs "The number of rows of the pixbuf")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property rowstride
  (of-object "GdkPixbuf")
  (prop-type "GParamInt")
  (docs "The number of bytes between the start of a row and the start of the next row")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property pixels
  (of-object "GdkPixbuf")
  (prop-type "GParamPointer")
  (docs "A pointer to the pixel data of the pixbuf")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GdkPixbufAnimation

;; From GdkPixbufLoader

(define-signal closed
  (of-object "GdkPixbufLoader")
  (return-type "void")
  (when "last")
)

(define-signal size-prepared
  (of-object "GdkPixbufLoader")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal area-prepared
  (of-object "GdkPixbufLoader")
  (return-type "void")
  (when "last")
)

(define-signal area-updated
  (of-object "GdkPixbufLoader")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
    '("gint" "p2")
    '("gint" "p3")
  )
)

;; From GdkPixmap

;; From GdkScreen

(define-signal size-changed
  (of-object "GdkScreen")
  (return-type "void")
  (when "last")
)

(define-signal composited-changed
  (of-object "GdkScreen")
  (return-type "void")
  (when "last")
)

(define-property font-options
  (of-object "GdkScreen")
  (prop-type "GParamPointer")
  (docs "The default font options for the screen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resolution
  (of-object "GdkScreen")
  (prop-type "GParamDouble")
  (docs "The resolution for fonts on the screen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GdkVisual

;; From GdkWindow

;; From GtkAboutDialog

(define-property user-data
  (of-object "GtkAboutDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkAboutDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkAboutDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkAboutDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkAboutDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkAboutDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkAboutDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkAboutDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property program-name
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The name of the program. If this is not set, it defaults to g_get_application_name()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property version
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The version of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property copyright
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Copyright information for the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property comments
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Comments about the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property website
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The URL for the link to the website of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property website-label
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The label for the link to the website of the program. If this is not set, it defaults to the URL")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property license
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The license of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property authors
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoxed")
  (docs "List of authors of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property documenters
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoxed")
  (docs "List of people documenting the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property translator-credits
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Credits to the translators. This string should be marked as translatable")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property artists
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoxed")
  (docs "List of people who have contributed artwork to the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property logo
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "A logo for the about box. If this is not set, it defaults to gtk_window_get_default_icon_list()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property logo-icon-name
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "A named icon to use as the logo for the about box.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-license
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether to wrap the license text.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAccelGroup

(define-signal accel-activate
  (of-object "GtkAccelGroup")
  (return-type "gboolean")
  (when "unknown")
  (parameters
    '("GObject*" "p0")
    '("guint" "p1")
    '("GdkModifierType" "p2")
  )
)

(define-signal accel-changed
  (of-object "GtkAccelGroup")
  (return-type "void")
  (when "first")
  (parameters
    '("guint" "p0")
    '("GdkModifierType" "p1")
    '("GClosure*" "p2")
  )
)

;; From GtkAccelLabel

(define-property user-data
  (of-object "GtkAccelLabel")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkAccelLabel")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkAccelLabel")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkAccelLabel")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkAccelLabel")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkAccelLabel")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkAccelLabel")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkAccelLabel")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkAccelLabel")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkAccelLabel")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkAccelLabel")
  (prop-type "GParamString")
  (docs "The text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup. See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justify
  (of-object "GtkAccelLabel")
  (prop-type "GParamEnum")
  (docs "The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkMisc::xalign for that")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pattern
  (of-object "GtkAccelLabel")
  (prop-type "GParamString")
  (docs "A string with _ characters in positions correspond to characters in the text to underline")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property wrap
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "If set, wrap lines if the text becomes too wide")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkAccelLabel")
  (prop-type "GParamEnum")
  (docs "If wrap is set, controls how linewrapping is done")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selectable
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the label text can be selected with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mnemonic-keyval
  (of-object "GtkAccelLabel")
  (prop-type "GParamUInt")
  (docs "The mnemonic accelerator key for this label")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property mnemonic-widget
  (of-object "GtkAccelLabel")
  (prop-type "GParamObject")
  (docs "The widget to be activated when the label's mnemonic key is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "The current position of the insertion cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property selection-bound
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "The position of the opposite end of the selection from the cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkAccelLabel")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the label does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-line-mode
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the label is in single line mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle
  (of-object "GtkAccelLabel")
  (prop-type "GParamDouble")
  (docs "Angle at which the label is rotated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-width-chars
  (of-object "GtkAccelLabel")
  (prop-type "GParamInt")
  (docs "The desired maximum width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accel-closure
  (of-object "GtkAccelLabel")
  (prop-type "GParamBoxed")
  (docs "The closure to be monitored for accelerator changes")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accel-widget
  (of-object "GtkAccelLabel")
  (prop-type "GParamObject")
  (docs "The widget to be monitored for accelerator changes")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAction

(define-signal activate
  (of-object "GtkAction")
  (return-type "void")
  (when "first")
)

(define-property name
  (of-object "GtkAction")
  (prop-type "GParamString")
  (docs "A unique name for the action.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property label
  (of-object "GtkAction")
  (prop-type "GParamString")
  (docs "The label used for menu items and buttons that activate this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property short-label
  (of-object "GtkAction")
  (prop-type "GParamString")
  (docs "A shorter label that may be used on toolbar buttons.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip
  (of-object "GtkAction")
  (prop-type "GParamString")
  (docs "A tooltip for this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkAction")
  (prop-type "GParamString")
  (docs "The stock icon displayed in widgets representing this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkAction")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-overflown
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hide-if-empty
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, empty menu proxies for this action are hidden.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is visible.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property action-group
  (of-object "GtkAction")
  (prop-type "GParamObject")
  (docs "The GtkActionGroup this GtkAction is associated with, or NULL (for internal use).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkActionGroup

(define-signal connect-proxy
  (of-object "GtkActionGroup")
  (return-type "void")
  (when "unknown")
  (parameters
    '("GtkAction*" "p0")
    '("GtkWidget*" "p1")
  )
)

(define-signal disconnect-proxy
  (of-object "GtkActionGroup")
  (return-type "void")
  (when "unknown")
  (parameters
    '("GtkAction*" "p0")
    '("GtkWidget*" "p1")
  )
)

(define-signal pre-activate
  (of-object "GtkActionGroup")
  (return-type "void")
  (when "unknown")
  (parameters
    '("GtkAction*" "p0")
  )
)

(define-signal post-activate
  (of-object "GtkActionGroup")
  (return-type "void")
  (when "unknown")
  (parameters
    '("GtkAction*" "p0")
  )
)

(define-property name
  (of-object "GtkActionGroup")
  (prop-type "GParamString")
  (docs "A name for the action group.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property sensitive
  (of-object "GtkActionGroup")
  (prop-type "GParamBoolean")
  (docs "Whether the action group is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkActionGroup")
  (prop-type "GParamBoolean")
  (docs "Whether the action group is visible.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAdjustment

(define-signal changed
  (of-object "GtkAdjustment")
  (return-type "void")
  (when "first")
)

(define-signal value-changed
  (of-object "GtkAdjustment")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkAdjustment")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The value of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property lower
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The minimum value of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property upper
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The maximum value of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property step-increment
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The step increment of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property page-increment
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The page increment of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property page-size
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The page size of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAlignment

(define-property user-data
  (of-object "GtkAlignment")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkAlignment")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkAlignment")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkAlignment")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkAlignment")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkAlignment")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkAlignment")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkAlignment")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkAlignment")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkAlignment")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkAlignment")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkAlignment")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkAlignment")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkAlignment")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkAlignment")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkAlignment")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xscale
  (of-object "GtkAlignment")
  (prop-type "GParamFloat")
  (docs "If available horizontal space is bigger than needed for the child, how much of it to use for the child. 0.0 means none, 1.0 means all")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yscale
  (of-object "GtkAlignment")
  (prop-type "GParamFloat")
  (docs "If available vertical space is bigger than needed for the child, how much of it to use for the child. 0.0 means none, 1.0 means all")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property top-padding
  (of-object "GtkAlignment")
  (prop-type "GParamUInt")
  (docs "The padding to insert at the top of the widget.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property bottom-padding
  (of-object "GtkAlignment")
  (prop-type "GParamUInt")
  (docs "The padding to insert at the bottom of the widget.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property left-padding
  (of-object "GtkAlignment")
  (prop-type "GParamUInt")
  (docs "The padding to insert at the left of the widget.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property right-padding
  (of-object "GtkAlignment")
  (prop-type "GParamUInt")
  (docs "The padding to insert at the right of the widget.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkArrow

(define-property user-data
  (of-object "GtkArrow")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkArrow")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkArrow")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkArrow")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkArrow")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkArrow")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkArrow")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkArrow")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkArrow")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkArrow")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkArrow")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkArrow")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkArrow")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkArrow")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkArrow")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property arrow-type
  (of-object "GtkArrow")
  (prop-type "GParamEnum")
  (docs "The direction the arrow should point")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkArrow")
  (prop-type "GParamEnum")
  (docs "Appearance of the shadow surrounding the arrow")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAspectFrame

(define-property user-data
  (of-object "GtkAspectFrame")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkAspectFrame")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkAspectFrame")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkAspectFrame")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkAspectFrame")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkAspectFrame")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkAspectFrame")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkAspectFrame")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkAspectFrame")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkAspectFrame")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkAspectFrame")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkAspectFrame")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkAspectFrame")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkAspectFrame")
  (prop-type "GParamString")
  (docs "Text of the frame's label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-xalign
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-yalign
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "The vertical alignment of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow
  (of-object "GtkAspectFrame")
  (prop-type "GParamEnum")
  (docs "Deprecated property, use shadow_type instead")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkAspectFrame")
  (prop-type "GParamEnum")
  (docs "Appearance of the frame border")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkAspectFrame")
  (prop-type "GParamObject")
  (docs "A widget to display in place of the usual frame label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "X alignment of the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "Y alignment of the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ratio
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "Aspect ratio if obey_child is FALSE")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property obey-child
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Force aspect ratio to match that of the frame's child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAssistant

(define-signal cancel
  (of-object "GtkAssistant")
  (return-type "void")
  (when "last")
)

(define-signal close
  (of-object "GtkAssistant")
  (return-type "void")
  (when "last")
)

(define-signal prepare
  (of-object "GtkAssistant")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal apply
  (of-object "GtkAssistant")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkAssistant")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkAssistant")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkAssistant")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkAssistant")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkAssistant")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkAssistant")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkAssistant")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkAssistant")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkAssistant")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkAssistant")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkAssistant")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkAssistant")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkAssistant")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkAssistant")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkAssistant")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkAssistant")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkBin

(define-property user-data
  (of-object "GtkBin")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkBin")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkBin")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkBin")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkBin")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkBin")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkBin")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkBin")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkBin")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkBin")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkBin")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkBin")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkBin")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkBin")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkBox

(define-property user-data
  (of-object "GtkBox")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkBox")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkBox")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkBox")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkBox")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkBox")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkBox")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkBox")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkBox")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkBox")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkBox")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkBox")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkButton

(define-signal clicked
  (of-object "GtkButton")
  (return-type "void")
  (when "first")
)

(define-signal activate
  (of-object "GtkButton")
  (return-type "void")
  (when "first")
)

(define-signal pressed
  (of-object "GtkButton")
  (return-type "void")
  (when "first")
)

(define-signal released
  (of-object "GtkButton")
  (return-type "void")
  (when "first")
)

(define-signal enter
  (of-object "GtkButton")
  (return-type "void")
  (when "first")
)

(define-signal leave
  (of-object "GtkButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkButtonBox

(define-property user-data
  (of-object "GtkButtonBox")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkButtonBox")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkButtonBox")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkButtonBox")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkButtonBox")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkButtonBox")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkButtonBox")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkButtonBox")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkButtonBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkButtonBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkButtonBox")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkButtonBox")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkButtonBox")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkButtonBox")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkButtonBox")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property layout-style
  (of-object "GtkButtonBox")
  (prop-type "GParamEnum")
  (docs "How to layout the buttons in the box. Possible values are default, spread, edge, start and end")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCalendar

(define-signal month-changed
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-signal day-selected
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-signal day-selected-double-click
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-signal prev-month
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-signal next-month
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-signal prev-year
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-signal next-year
  (of-object "GtkCalendar")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkCalendar")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCalendar")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCalendar")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCalendar")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCalendar")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCalendar")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCalendar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCalendar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property year
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "The selected year")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property month
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "The selected month (as a number between 0 and 11)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property day
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-heading
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, a heading is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-day-names
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, day names are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-month-change
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the selected month cannot be changed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-week-numbers
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, week numbers are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCheckButton

(define-property user-data
  (of-object "GtkCheckButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCheckButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCheckButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCheckButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCheckButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCheckButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCheckButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCheckButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCheckButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCheckButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkCheckButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkCheckButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkCheckButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkCheckButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkCheckButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkCheckButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCheckButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCheckButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkCheckButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inconsistent
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button is in an in between state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-indicator
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle part of the button is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCheckMenuItem

(define-signal toggled
  (of-object "GtkCheckMenuItem")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property submenu
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamObject")
  (docs "The submenu attached to the menu item, or NULL if it has none")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the menu item is checked")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inconsistent
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether to display an inconsistent state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-as-radio
  (of-object "GtkCheckMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the menu item looks like a radio menu item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCList

(define-signal set-scroll-adjustments
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkAdjustment*" "p0")
    '("GtkAdjustment*" "p1")
  )
)

(define-signal select-all
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal unselect-all
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal toggle-focus-row
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal undo-selection
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal start-selection
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal end-selection
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal toggle-add-mode
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-signal extend-selection
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gfloat" "p1")
    '("gboolean" "p2")
  )
)

(define-signal scroll-vertical
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gfloat" "p1")
  )
)

(define-signal scroll-horizontal
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gfloat" "p1")
  )
)

(define-signal select-row
  (of-object "GtkCList")
  (return-type "void")
  (when "first")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
    '("GdkEvent*" "p2")
  )
)

(define-signal unselect-row
  (of-object "GtkCList")
  (return-type "void")
  (when "first")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
    '("GdkEvent*" "p2")
  )
)

(define-signal row-move
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal click-column
  (of-object "GtkCList")
  (return-type "void")
  (when "first")
  (parameters
    '("gint" "p0")
  )
)

(define-signal resize-column
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal abort-column-resize
  (of-object "GtkCList")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkCList")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCList")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCList")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCList")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCList")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCList")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCList")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCList")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCList")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCList")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkCList")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkCList")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkCList")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property n-columns
  (of-object "GtkCList")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property shadow-type
  (of-object "GtkCList")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selection-mode
  (of-object "GtkCList")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-height
  (of-object "GtkCList")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property titles-active
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reorderable
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-drag-icons
  (of-object "GtkCList")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-type
  (of-object "GtkCList")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellLayout

;; From GtkCellRenderer

(define-signal editing-canceled
  (of-object "GtkCellRenderer")
  (return-type "void")
  (when "first")
)

(define-signal editing-started
  (of-object "GtkCellRenderer")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkCellEditable*" "p0")
    '("const-gchar*" "p1")
  )
)

(define-property user-data
  (of-object "GtkCellRenderer")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRenderer")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRenderer")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRenderer")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRenderer")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRenderer")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRenderer")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRenderer")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRenderer")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererAccel

(define-signal accel-edited
  (of-object "GtkCellRendererAccel")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("guint" "p1")
    '("GdkModifierType" "p2")
    '("guint" "p3")
  )
)

(define-signal accel-cleared
  (of-object "GtkCellRendererAccel")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property user-data
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property markup
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Marked up text to render")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the renderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-paragraph-mode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether or not to keep all text in a single paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-width
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "The width at which the text is wrapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "How to align the lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property foreground
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property background-gdk
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-gdk
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. Sans Italic 12")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-desc
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "Font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "Font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "Font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "Font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "Font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-points
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamDouble")
  (docs "Font scaling factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the ellipsize mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property align-set
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the alignment mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accel-key
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamUInt")
  (docs "The keyval of the accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accel-mods
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamFlags")
  (docs "The modifier mask of the accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property keycode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamUInt")
  (docs "The hardware keycode of the accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accel-mode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "The type of accelerators")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererCombo

(define-property user-data
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property markup
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Marked up text to render")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the renderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-paragraph-mode
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether or not to keep all text in a single paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-width
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "The width at which the text is wrapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "How to align the lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property foreground
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property background-gdk
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-gdk
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. Sans Italic 12")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-desc
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "Font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "Font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "Font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "Font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "Font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-points
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamDouble")
  (docs "Font scaling factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamEnum")
  (docs "How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the ellipsize mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property align-set
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the alignment mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamObject")
  (docs "The model containing the possible values for the combo box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-column
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "A column in the data source model to get the strings from")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-entry
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "If FALSE, don't allow to enter strings other than the chosen ones")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererProgress

(define-property user-data
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Value of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamString")
  (docs "Text on the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pulse
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Set this to positive values to indicate that some progress is made, but you don't know how much.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-xalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-yalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The vertical text alignment, from 0 (top) to 1 (bottom).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamEnum")
  (docs "Orientation and growth direction of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererText

(define-signal edited
  (of-object "GtkCellRendererText")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
    '("const-gchar*" "p1")
  )
)

(define-property user-data
  (of-object "GtkCellRendererText")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererText")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererText")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererText")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererText")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property markup
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Marked up text to render")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the renderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-paragraph-mode
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether or not to keep all text in a single paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-width
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The width at which the text is wrapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "How to align the lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property foreground
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property background-gdk
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-gdk
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. Sans Italic 12")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-desc
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "Font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "Font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-points
  (of-object "GtkCellRendererText")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale
  (of-object "GtkCellRendererText")
  (prop-type "GParamDouble")
  (docs "Font scaling factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the ellipsize mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property align-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the alignment mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererToggle

(define-signal toggled
  (of-object "GtkCellRendererToggle")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property user-data
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activatable
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "The toggle button can be activated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "The toggle state of the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property radio
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Draw the toggle button as a radio button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inconsistent
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "The inconsistent state of the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property indicator-size
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamInt")
  (docs "Size of check or radio indicator")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererPixbuf

(define-property user-data
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "The pixbuf to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf-expander-open
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "Pixbuf for open expander")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf-expander-closed
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "Pixbuf for closed expander")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamString")
  (docs "The stock ID of the stock icon to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-size
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamUInt")
  (docs "The GtkIconSize value that specifies the size of the rendered icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-detail
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamString")
  (docs "Render detail to pass to the theme engine")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property follow-state
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamBoolean")
  (docs "Whether the rendered pixbuf should be colorized according to the state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererProgress

(define-property user-data
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Value of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamString")
  (docs "Text on the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pulse
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Set this to positive values to indicate that some progress is made, but you don't know how much.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-xalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-yalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The vertical text alignment, from 0 (top) to 1 (bottom).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamEnum")
  (docs "Orientation and growth direction of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererSpin

(define-property user-data
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mode
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expander
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-expanded
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-gdk
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the cell background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property markup
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Marked up text to render")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the renderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-paragraph-mode
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether or not to keep all text in a single paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-width
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "The width at which the text is wrapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "How to align the lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property foreground
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property background-gdk
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-gdk
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. Sans Italic 12")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-desc
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "Font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "Font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "Font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "Font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "Font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-points
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamDouble")
  (docs "Font scaling factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamEnum")
  (docs "How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the ellipsize mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property align-set
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the alignment mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamObject")
  (docs "The adjustment that holds the value of the spinbutton.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property climb-rate
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamDouble")
  (docs "The acceleration rate when you hold down a button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property digits
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamUInt")
  (docs "The number of decimal places to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkClipboard

(define-signal owner-change
  (of-object "GtkClipboard")
  (return-type "void")
  (when "first")
  (parameters
    '("GdkEventOwnerChange*" "p0")
  )
)

;; From GtkColorButton

(define-signal color-set
  (of-object "GtkColorButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkColorButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkColorButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkColorButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkColorButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkColorButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkColorButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkColorButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkColorButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkColorButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkColorButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkColorButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkColorButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkColorButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkColorButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkColorButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkColorButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkColorButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkColorButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkColorButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-alpha
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether or not to give the color an alpha value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "GtkColorButton")
  (prop-type "GParamString")
  (docs "The title of the color selection dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color
  (of-object "GtkColorButton")
  (prop-type "GParamBoxed")
  (docs "The selected color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alpha
  (of-object "GtkColorButton")
  (prop-type "GParamUInt")
  (docs "The selected opacity value (0 fully transparent, 65535 fully opaque)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkColorSelection

(define-signal color-changed
  (of-object "GtkColorSelection")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkColorSelection")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkColorSelection")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkColorSelection")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkColorSelection")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkColorSelection")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkColorSelection")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkColorSelection")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkColorSelection")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkColorSelection")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkColorSelection")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkColorSelection")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkColorSelection")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkColorSelection")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkColorSelection")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-palette
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether a palette should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-opacity-control
  (of-object "GtkColorSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the color selector should allow setting opacity")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property current-color
  (of-object "GtkColorSelection")
  (prop-type "GParamBoxed")
  (docs "The current color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property current-alpha
  (of-object "GtkColorSelection")
  (prop-type "GParamUInt")
  (docs "The current opacity value (0 fully transparent, 65535 fully opaque)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCombo

(define-property user-data
  (of-object "GtkCombo")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCombo")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCombo")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCombo")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCombo")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCombo")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCombo")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCombo")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCombo")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCombo")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkCombo")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkCombo")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkCombo")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkCombo")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-arrow-keys
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether the arrow keys move through the list of items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-arrows-always
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Obsolete property, ignored")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property case-sensitive
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether list item matching is case sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-empty
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether an empty value may be entered in this field")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value-in-list
  (of-object "GtkCombo")
  (prop-type "GParamBoolean")
  (docs "Whether entered values must already be present in the list")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkComboBox

(define-signal changed
  (of-object "GtkComboBox")
  (return-type "void")
  (when "last")
)

(define-signal move-active
  (of-object "GtkComboBox")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-signal popup
  (of-object "GtkComboBox")
  (return-type "void")
  (when "last")
)

(define-signal popdown
  (of-object "GtkComboBox")
  (return-type "gboolean")
  (when "last")
)

(define-property user-data
  (of-object "GtkComboBox")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkComboBox")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkComboBox")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkComboBox")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkComboBox")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkComboBox")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkComboBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkComboBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkComboBox")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkComboBox")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkComboBox")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkComboBox")
  (prop-type "GParamObject")
  (docs "The model for the combo box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-width
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "Wrap width for laying out the items in a grid")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-span-column
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "TreeModel column containing the row span values")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-span-column
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "TreeModel column containing the column span values")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "The item which is currently active")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property add-tearoffs
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether dropdowns should have a tearoff menu item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tearoff-title
  (of-object "GtkComboBox")
  (prop-type "GParamString")
  (docs "A title that may be displayed by the window manager when the popup is torn-off")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-frame
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the combo box draws a frame around the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the combo box grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property popup-shown
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the combo's dropdown is shown")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkContainer

(define-signal add
  (of-object "GtkContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal remove
  (of-object "GtkContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal check-resize
  (of-object "GtkContainer")
  (return-type "void")
  (when "last")
)

(define-signal set-focus-child
  (of-object "GtkContainer")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-property user-data
  (of-object "GtkContainer")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkContainer")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkContainer")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkContainer")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkContainer")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkContainer")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkContainer")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkContainer")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkContainer")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkContainer")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkContainer")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkContainer")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkContainer")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkContainer")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkCTree

(define-signal tree-select-row
  (of-object "GtkCTree")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkCTreeNode" "p0")
    '("gint" "p1")
  )
)

(define-signal tree-unselect-row
  (of-object "GtkCTree")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkCTreeNode" "p0")
    '("gint" "p1")
  )
)

(define-signal tree-expand
  (of-object "GtkCTree")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkCTreeNode" "p0")
  )
)

(define-signal tree-collapse
  (of-object "GtkCTree")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkCTreeNode" "p0")
  )
)

(define-signal tree-move
  (of-object "GtkCTree")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkCTreeNode" "p0")
    '("GtkCTreeNode" "p1")
    '("GtkCTreeNode" "p2")
  )
)

(define-signal change-focus-row-expansion
  (of-object "GtkCTree")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkCTreeExpansionType" "p0")
  )
)

(define-property user-data
  (of-object "GtkCTree")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCTree")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCTree")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCTree")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCTree")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCTree")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCTree")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCTree")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCTree")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkCTree")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkCTree")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selection-mode
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-height
  (of-object "GtkCTree")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property titles-active
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reorderable
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-drag-icons
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-type
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property n-columns
  (of-object "GtkCTree")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property tree-column
  (of-object "GtkCTree")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property indent
  (of-object "GtkCTree")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkCTree")
  (prop-type "GParamUInt")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-stub
  (of-object "GtkCTree")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property line-style
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property expander-style
  (of-object "GtkCTree")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellView

(define-property user-data
  (of-object "GtkCellView")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCellView")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCellView")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCellView")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCellView")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCellView")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCellView")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCellView")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCellView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCellView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background
  (of-object "GtkCellView")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property background-gdk
  (of-object "GtkCellView")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-set
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkCellView")
  (prop-type "GParamObject")
  (docs "The model for cell view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCurve

(define-signal curve-type-changed
  (of-object "GtkCurve")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkCurve")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkCurve")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkCurve")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkCurve")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkCurve")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkCurve")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkCurve")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkCurve")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkCurve")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkCurve")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkCurve")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property curve-type
  (of-object "GtkCurve")
  (prop-type "GParamEnum")
  (docs "Is this curve linear, spline interpolated, or free-form")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-x
  (of-object "GtkCurve")
  (prop-type "GParamFloat")
  (docs "Minimum possible value for X")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-x
  (of-object "GtkCurve")
  (prop-type "GParamFloat")
  (docs "Maximum possible X value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-y
  (of-object "GtkCurve")
  (prop-type "GParamFloat")
  (docs "Minimum possible value for Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-y
  (of-object "GtkCurve")
  (prop-type "GParamFloat")
  (docs "Maximum possible value for Y")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkDialog

(define-signal response
  (of-object "GtkDialog")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal close
  (of-object "GtkDialog")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkDrawingArea

(define-property user-data
  (of-object "GtkDrawingArea")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkDrawingArea")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkDrawingArea")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkDrawingArea")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkDrawingArea")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkDrawingArea")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkDrawingArea")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkDrawingArea")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkDrawingArea")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkDrawingArea")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkDrawingArea")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkEntry

(define-signal move-cursor
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
  )
)

(define-signal activate
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
)

(define-signal insert-at-cursor
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal delete-from-cursor
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkDeleteType" "p0")
    '("gint" "p1")
  )
)

(define-signal backspace
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
)

(define-signal cut-clipboard
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
)

(define-signal copy-clipboard
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
)

(define-signal paste-clipboard
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
)

(define-signal toggle-overwrite
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
)

(define-signal populate-popup
  (of-object "GtkEntry")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMenu*" "p0")
  )
)

(define-property user-data
  (of-object "GtkEntry")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkEntry")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkEntry")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "The current position of the insertion cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property selection-bound
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "The position of the opposite end of the selection from the cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the entry contents can be edited")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-length
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Maximum number of characters for this entry. Zero if no maximum")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visibility
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "FALSE displays the invisible char instead of the actual text (password mode)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-frame
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "FALSE removes outside bevel from entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inner-border
  (of-object "GtkEntry")
  (prop-type "GParamBoxed")
  (docs "Border between text and frame. Overrides the inner-border style property")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property invisible-char
  (of-object "GtkEntry")
  (prop-type "GParamUnichar")
  (docs "The character to use when masking entry contents (in password mode)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activates-default
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Number of characters to leave space for in the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scroll-offset
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Number of pixels of the entry scrolled off the screen to the left")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property text
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkEntry")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property truncate-multiline
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to truncate multiline pastes to one line.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkEntry")
  (prop-type "GParamEnum")
  (docs "Which kind of shadow to draw around the entry when has-frame is set")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkEntryCompletion

(define-signal insert-prefix
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal match-selected
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkTreeModel*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal cursor-on-match
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkTreeModel*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal action-activated
  (of-object "GtkEntryCompletion")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-property model
  (of-object "GtkEntryCompletion")
  (prop-type "GParamObject")
  (docs "The model to find matches in")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property minimum-key-length
  (of-object "GtkEntryCompletion")
  (prop-type "GParamInt")
  (docs "Minimum length of the search key in order to look up matches")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-column
  (of-object "GtkEntryCompletion")
  (prop-type "GParamInt")
  (docs "The column of the model containing the strings.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inline-completion
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "Whether the common prefix should be inserted automatically")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property popup-completion
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "Whether the completions should be shown in a popup window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property popup-set-width
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the popup window will have the same size as the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property popup-single-match
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the popup window will appear for a single match.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inline-selection
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "Your description here")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkEventBox

(define-property user-data
  (of-object "GtkEventBox")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkEventBox")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkEventBox")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkEventBox")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkEventBox")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkEventBox")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkEventBox")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkEventBox")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkEventBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkEventBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkEventBox")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkEventBox")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkEventBox")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-window
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the event box is visible, as opposed to invisible and only used to trap events.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property above-child
  (of-object "GtkEventBox")
  (prop-type "GParamBoolean")
  (docs "Whether the event-trapping window of the eventbox is above the window of the child widget as opposed to below it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkExpander

(define-signal activate
  (of-object "GtkExpander")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkExpander")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkExpander")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkExpander")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkExpander")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkExpander")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkExpander")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkExpander")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkExpander")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkExpander")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkExpander")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkExpander")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkExpander")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkExpander")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property expanded
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the expander has been opened to reveal the child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkExpander")
  (prop-type "GParamString")
  (docs "Text of the expander's label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup. See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkExpander")
  (prop-type "GParamInt")
  (docs "Space to put between the label and the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkExpander")
  (prop-type "GParamObject")
  (docs "A widget to display in place of the usual expander label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFileFilter

(define-property user-data
  (of-object "GtkFileFilter")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFileChooserButton

(define-signal file-set
  (of-object "GtkFileChooserButton")
  (return-type "void")
  (when "first")
)

(define-property action
  (of-object "GtkFileChooserButton")
  (prop-type "GParamEnum")
  (docs "The type of operation that the file selector is performing")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-preview-label
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether to display a stock label with the name of the previewed file.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extra-widget
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "Application supplied widget for extra options.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file-system-backend
  (of-object "GtkFileChooserButton")
  (prop-type "GParamString")
  (docs "Name of file system backend to use")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property select-multiple
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple files to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-hidden
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the hidden files and folders should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property preview-widget
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "Application supplied widget for custom previews.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-only
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the selected file(s) should be limited to local file: URLs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property preview-widget-active
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application supplied widget for custom previews should be shown.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which files are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property do-overwrite-confirmation
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether a file chooser in save mode will present an overwrite confirmation dialog if necessary.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-data
  (of-object "GtkFileChooserButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFileChooserButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFileChooserButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFileChooserButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFileChooserButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFileChooserButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFileChooserButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFileChooserButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFileChooserButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFileChooserButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkFileChooserButton")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property dialog
  (of-object "GtkFileChooserButton")
  (prop-type "GParamObject")
  (docs "The file chooser dialog to use.")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property focus-on-click
  (of-object "GtkFileChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "GtkFileChooserButton")
  (prop-type "GParamString")
  (docs "The title of the file chooser dialog.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkFileChooserButton")
  (prop-type "GParamInt")
  (docs "The desired width of the button widget, in characters.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFileChooserDialog

(define-property action
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "The type of operation that the file selector is performing")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-preview-label
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether to display a stock label with the name of the previewed file.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extra-widget
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "Application supplied widget for extra options.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file-system-backend
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "Name of file system backend to use")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property select-multiple
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple files to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-hidden
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the hidden files and folders should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property preview-widget
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "Application supplied widget for custom previews.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-only
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the selected file(s) should be limited to local file: URLs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property preview-widget-active
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application supplied widget for custom previews should be shown.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which files are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property do-overwrite-confirmation
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether a file chooser in save mode will present an overwrite confirmation dialog if necessary.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-data
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkFileChooserDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFileChooserWidget

(define-property action
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamEnum")
  (docs "The type of operation that the file selector is performing")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-preview-label
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether to display a stock label with the name of the previewed file.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extra-widget
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamObject")
  (docs "Application supplied widget for extra options.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file-system-backend
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamString")
  (docs "Name of file system backend to use")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property select-multiple
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple files to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-hidden
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the hidden files and folders should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property preview-widget
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamObject")
  (docs "Application supplied widget for custom previews.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-only
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the selected file(s) should be limited to local file: URLs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property preview-widget-active
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the application supplied widget for custom previews should be shown.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which files are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property do-overwrite-confirmation
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether a file chooser in save mode will present an overwrite confirmation dialog if necessary.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-data
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFileSelection

(define-property user-data
  (of-object "GtkFileSelection")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFileSelection")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFileSelection")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFileSelection")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFileSelection")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFileSelection")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFileSelection")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFileSelection")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFileSelection")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFileSelection")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkFileSelection")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkFileSelection")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkFileSelection")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkFileSelection")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkFileSelection")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkFileSelection")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkFileSelection")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkFileSelection")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkFileSelection")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkFileSelection")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-fileops
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether buttons for creating/manipulating files should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filename
  (of-object "GtkFileSelection")
  (prop-type "GParamString")
  (docs "The currently selected filename")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property select-multiple
  (of-object "GtkFileSelection")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple files to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFixed

(define-property user-data
  (of-object "GtkFixed")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFixed")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFixed")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFixed")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFixed")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFixed")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFixed")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFixed")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFixed")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFixed")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFixed")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFixed")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFixed")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFixed")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkFontButton

(define-signal font-set
  (of-object "GtkFontButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkFontButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFontButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFontButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFontButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFontButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFontButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFontButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFontButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFontButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFontButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkFontButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkFontButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkFontButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkFontButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkFontButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "The title of the font selection dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-name
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "The name of the selected font")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-font
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the label is drawn in the selected font")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-size
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the label is drawn with the selected font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-style
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the selected font style is shown in the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-size
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether selected font size is shown in the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFontSelection

(define-property user-data
  (of-object "GtkFontSelection")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFontSelection")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFontSelection")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFontSelection")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFontSelection")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFontSelection")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFontSelection")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFontSelection")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFontSelection")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFontSelection")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFontSelection")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFontSelection")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFontSelection")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkFontSelection")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkFontSelection")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-name
  (of-object "GtkFontSelection")
  (prop-type "GParamString")
  (docs "The X string that represents this font")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkFontSelection")
  (prop-type "GParamBoxed")
  (docs "The GdkFont that is currently selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property preview-text
  (of-object "GtkFontSelection")
  (prop-type "GParamString")
  (docs "The text to display in order to demonstrate the selected font")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFontSelectionDialog

(define-property user-data
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkFontSelectionDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFrame

(define-property user-data
  (of-object "GtkFrame")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkFrame")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkFrame")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkFrame")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkFrame")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkFrame")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkFrame")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkFrame")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkFrame")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkFrame")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkFrame")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkFrame")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkFrame")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFrame")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkFrame")
  (prop-type "GParamString")
  (docs "Text of the frame's label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-xalign
  (of-object "GtkFrame")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-yalign
  (of-object "GtkFrame")
  (prop-type "GParamFloat")
  (docs "The vertical alignment of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow
  (of-object "GtkFrame")
  (prop-type "GParamEnum")
  (docs "Deprecated property, use shadow_type instead")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkFrame")
  (prop-type "GParamEnum")
  (docs "Appearance of the frame border")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkFrame")
  (prop-type "GParamObject")
  (docs "A widget to display in place of the usual frame label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkHandleBox

(define-signal child-attached
  (of-object "GtkHandleBox")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal child-detached
  (of-object "GtkHandleBox")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-property user-data
  (of-object "GtkHandleBox")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkHandleBox")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkHandleBox")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkHandleBox")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkHandleBox")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkHandleBox")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkHandleBox")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkHandleBox")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkHandleBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkHandleBox")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkHandleBox")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkHandleBox")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkHandleBox")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property shadow
  (of-object "GtkHandleBox")
  (prop-type "GParamEnum")
  (docs "Deprecated property, use shadow_type instead")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkHandleBox")
  (prop-type "GParamEnum")
  (docs "Appearance of the shadow that surrounds the container")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property handle-position
  (of-object "GtkHandleBox")
  (prop-type "GParamEnum")
  (docs "Position of the handle relative to the child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property snap-edge
  (of-object "GtkHandleBox")
  (prop-type "GParamEnum")
  (docs "Side of the handlebox that's lined up with the docking point to dock the handlebox")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property snap-edge-set
  (of-object "GtkHandleBox")
  (prop-type "GParamBoolean")
  (docs "Whether to use the value from the snap_edge property or a value derived from handle_position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkIconTheme

(define-signal changed
  (of-object "GtkIconTheme")
  (return-type "void")
  (when "last")
)

;; From GtkImage

(define-property user-data
  (of-object "GtkImage")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkImage")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkImage")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkImage")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkImage")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "A GdkPixbuf to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixmap
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "A GdkPixmap to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "A GdkImage to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mask
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "Mask bitmap to use with GdkImage or GdkPixmap")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "Filename to load and display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "Stock ID for a stock image to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-set
  (of-object "GtkImage")
  (prop-type "GParamBoxed")
  (docs "Icon set to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-size
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "Symbolic size to use for stock icon, icon set or named icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixel-size
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "Pixel size to use for named icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf-animation
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "GdkPixbufAnimation to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property storage-type
  (of-object "GtkImage")
  (prop-type "GParamEnum")
  (docs "The representation being used for image data")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkInputDialog

(define-signal enable-device
  (of-object "GtkInputDialog")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDevice*" "p0")
  )
)

(define-signal disable-device
  (of-object "GtkInputDialog")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDevice*" "p0")
  )
)

(define-property user-data
  (of-object "GtkInputDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkInputDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkInputDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkInputDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkInputDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkInputDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkInputDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkInputDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkInputDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkInputDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkInputDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkInputDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkInputDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkInputDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkInputDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkInputDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkInputDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkInputDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkInputDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkInputDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkInputDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkInputDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkInvisible

(define-property user-data
  (of-object "GtkInvisible")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkInvisible")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkInvisible")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkInvisible")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkInvisible")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkInvisible")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkInvisible")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkInvisible")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkInvisible")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkInvisible")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkInvisible")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkInvisible")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkItem

(define-signal select
  (of-object "GtkItem")
  (return-type "void")
  (when "first")
)

(define-signal deselect
  (of-object "GtkItem")
  (return-type "void")
  (when "first")
)

(define-signal toggle
  (of-object "GtkItem")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkIconView

(define-signal selection-changed
  (of-object "GtkIconView")
  (return-type "void")
  (when "first")
)

(define-signal set-scroll-adjustments
  (of-object "GtkIconView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkAdjustment*" "p0")
    '("GtkAdjustment*" "p1")
  )
)

(define-signal move-cursor
  (of-object "GtkIconView")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
  )
)

(define-signal select-all
  (of-object "GtkIconView")
  (return-type "void")
  (when "last")
)

(define-signal unselect-all
  (of-object "GtkIconView")
  (return-type "void")
  (when "last")
)

(define-signal item-activated
  (of-object "GtkIconView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTreePath*" "p0")
  )
)

(define-signal select-cursor-item
  (of-object "GtkIconView")
  (return-type "void")
  (when "last")
)

(define-signal toggle-cursor-item
  (of-object "GtkIconView")
  (return-type "void")
  (when "last")
)

(define-signal activate-cursor-item
  (of-object "GtkIconView")
  (return-type "gboolean")
  (when "last")
)

(define-property user-data
  (of-object "GtkIconView")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkIconView")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkIconView")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkIconView")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkIconView")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkIconView")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkIconView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkIconView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkIconView")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkIconView")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkIconView")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Model column used to retrieve the icon pixbuf from")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Model column used to retrieve the text from")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property markup-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Model column used to retrieve the text if using Pango markup")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selection-mode
  (of-object "GtkIconView")
  (prop-type "GParamEnum")
  (docs "The selection mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "GtkIconView")
  (prop-type "GParamEnum")
  (docs "How the text and icon of each item are positioned relative to each other")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkIconView")
  (prop-type "GParamObject")
  (docs "The model for the icon view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property columns
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Number of columns to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property item-width
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "The width used for each item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted between cells of an item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-spacing
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted between grid rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-spacing
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted between grid columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property margin
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted at the edges of the icon view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reorderable
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "View is reorderable")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkLabel

(define-signal move-cursor
  (of-object "GtkLabel")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
  )
)

(define-signal copy-clipboard
  (of-object "GtkLabel")
  (return-type "void")
  (when "last")
)

(define-signal populate-popup
  (of-object "GtkLabel")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMenu*" "p0")
  )
)

(define-property user-data
  (of-object "GtkLabel")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkLabel")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkLabel")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkLabel")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkLabel")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkLabel")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkLabel")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkLabel")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkLabel")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkLabel")
  (prop-type "GParamString")
  (docs "The text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkLabel")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup. See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justify
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkMisc::xalign for that")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pattern
  (of-object "GtkLabel")
  (prop-type "GParamString")
  (docs "A string with _ characters in positions correspond to characters in the text to underline")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property wrap
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "If set, wrap lines if the text becomes too wide")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "If wrap is set, controls how linewrapping is done")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selectable
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the label text can be selected with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mnemonic-keyval
  (of-object "GtkLabel")
  (prop-type "GParamUInt")
  (docs "The mnemonic accelerator key for this label")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property mnemonic-widget
  (of-object "GtkLabel")
  (prop-type "GParamObject")
  (docs "The widget to be activated when the label's mnemonic key is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The current position of the insertion cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property selection-bound
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The position of the opposite end of the selection from the cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the label does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-line-mode
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the label is in single line mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle
  (of-object "GtkLabel")
  (prop-type "GParamDouble")
  (docs "Angle at which the label is rotated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-width-chars
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The desired maximum width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkLayout

(define-signal set-scroll-adjustments
  (of-object "GtkLayout")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkAdjustment*" "p0")
    '("GtkAdjustment*" "p1")
  )
)

(define-property user-data
  (of-object "GtkLayout")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkLayout")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkLayout")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkLayout")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkLayout")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkLayout")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkLayout")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkLayout")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkLayout")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkLayout")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkLayout")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkLayout")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkLayout")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkLayout")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property hadjustment
  (of-object "GtkLayout")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment for the horizontal position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vadjustment
  (of-object "GtkLayout")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment for the vertical position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkLayout")
  (prop-type "GParamUInt")
  (docs "The width of the layout")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkLayout")
  (prop-type "GParamUInt")
  (docs "The height of the layout")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkLinkButton

(define-property user-data
  (of-object "GtkLinkButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkLinkButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkLinkButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkLinkButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkLinkButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkLinkButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkLinkButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkLinkButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkLinkButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkLinkButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkLinkButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkLinkButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkLinkButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkLinkButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkLinkButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkLinkButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkLinkButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkLinkButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkLinkButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property uri
  (of-object "GtkLinkButton")
  (prop-type "GParamString")
  (docs "The URI bound to this button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkList

(define-signal selection-changed
  (of-object "GtkList")
  (return-type "void")
  (when "first")
)

(define-signal select-child
  (of-object "GtkList")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal unselect-child
  (of-object "GtkList")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-property user-data
  (of-object "GtkList")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkList")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkList")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkList")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkList")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkList")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkList")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkList")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkList")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkList")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkList")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkList")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkList")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkList")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property selection-mode
  (of-object "GtkList")
  (prop-type "GParamEnum")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkListItem

(define-signal select-all
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal unselect-all
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal toggle-focus-row
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal undo-selection
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal start-selection
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal end-selection
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal toggle-add-mode
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
)

(define-signal extend-selection
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gfloat" "p1")
    '("gboolean" "p2")
  )
)

(define-signal scroll-vertical
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gfloat" "p1")
  )
)

(define-signal scroll-horizontal
  (of-object "GtkListItem")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gfloat" "p1")
  )
)

(define-property user-data
  (of-object "GtkListItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkListItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkListItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkListItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkListItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkListItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkListItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkListItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkListItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkListItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkListItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkListItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkListItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkMenu

(define-signal move-scroll
  (of-object "GtkMenu")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-property user-data
  (of-object "GtkMenu")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMenu")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMenu")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMenu")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMenu")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMenu")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMenu")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMenu")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMenu")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMenu")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkMenu")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkMenu")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkMenu")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property take-focus
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "A boolean that determines whether the menu grabs the keyboard focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tearoff-state
  (of-object "GtkMenu")
  (prop-type "GParamBoolean")
  (docs "A boolean that indicates whether the menu is torn-off")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tearoff-title
  (of-object "GtkMenu")
  (prop-type "GParamString")
  (docs "A title that may be displayed by the window manager when this menu is torn-off")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMenuBar

(define-property user-data
  (of-object "GtkMenuBar")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMenuBar")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMenuBar")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMenuBar")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMenuBar")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMenuBar")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMenuBar")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMenuBar")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMenuBar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMenuBar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkMenuBar")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkMenuBar")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkMenuBar")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property take-focus
  (of-object "GtkMenuBar")
  (prop-type "GParamBoolean")
  (docs "A boolean that determines whether the menu grabs the keyboard focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pack-direction
  (of-object "GtkMenuBar")
  (prop-type "GParamEnum")
  (docs "The pack direction of the menubar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child-pack-direction
  (of-object "GtkMenuBar")
  (prop-type "GParamEnum")
  (docs "The child pack direction of the menubar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMenuItem

(define-signal activate
  (of-object "GtkMenuItem")
  (return-type "void")
  (when "first")
)

(define-signal activate-item
  (of-object "GtkMenuItem")
  (return-type "void")
  (when "first")
)

(define-signal toggle-size-request
  (of-object "GtkMenuItem")
  (return-type "void")
  (when "first")
  (parameters
    '("gint*" "p0")
  )
)

(define-signal toggle-size-allocate
  (of-object "GtkMenuItem")
  (return-type "void")
  (when "first")
  (parameters
    '("gint" "p0")
  )
)

(define-property user-data
  (of-object "GtkMenuItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMenuItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMenuItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMenuItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMenuItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMenuItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMenuItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMenuItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkMenuItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkMenuItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkMenuItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property submenu
  (of-object "GtkMenuItem")
  (prop-type "GParamObject")
  (docs "The submenu attached to the menu item, or NULL if it has none")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMenuShell

(define-signal deactivate
  (of-object "GtkMenuShell")
  (return-type "void")
  (when "first")
)

(define-signal selection-done
  (of-object "GtkMenuShell")
  (return-type "void")
  (when "first")
)

(define-signal move-current
  (of-object "GtkMenuShell")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMenuDirectionType" "p0")
  )
)

(define-signal activate-current
  (of-object "GtkMenuShell")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal cancel
  (of-object "GtkMenuShell")
  (return-type "void")
  (when "last")
)

(define-signal cycle-focus
  (of-object "GtkMenuShell")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal move-selected
  (of-object "GtkMenuShell")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-property user-data
  (of-object "GtkMenuShell")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMenuShell")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMenuShell")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMenuShell")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMenuShell")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMenuShell")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMenuShell")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMenuShell")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMenuShell")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMenuShell")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkMenuShell")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkMenuShell")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkMenuShell")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property take-focus
  (of-object "GtkMenuShell")
  (prop-type "GParamBoolean")
  (docs "A boolean that determines whether the menu grabs the keyboard focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMenuToolButton

(define-signal show-menu
  (of-object "GtkMenuToolButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkMenuToolButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMenuToolButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMenuToolButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMenuToolButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMenuToolButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMenuToolButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMenuToolButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMenuToolButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMenuToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMenuToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkMenuToolButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkMenuToolButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkMenuToolButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkMenuToolButton")
  (prop-type "GParamString")
  (docs "Text to show in the item.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkMenuToolButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkMenuToolButton")
  (prop-type "GParamObject")
  (docs "Widget to use as the item label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkMenuToolButton")
  (prop-type "GParamString")
  (docs "The stock icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkMenuToolButton")
  (prop-type "GParamString")
  (docs "The name of the themed icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-widget
  (of-object "GtkMenuToolButton")
  (prop-type "GParamObject")
  (docs "Icon widget to display in the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property menu
  (of-object "GtkMenuToolButton")
  (prop-type "GParamObject")
  (docs "The dropdown menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMessageDialog

(define-property user-data
  (of-object "GtkMessageDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMessageDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMessageDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMessageDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkMessageDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkMessageDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkMessageDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkMessageDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property message-type
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The type of message")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property buttons
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The buttons shown in the message dialog")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property text
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The primary text of the message dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "The primary text of the title includes Pango markup.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property secondary-text
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The secondary text of the message dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property secondary-use-markup
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "The secondary text includes Pango markup.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "The image")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMisc

(define-property user-data
  (of-object "GtkMisc")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkMisc")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkMisc")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkMisc")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkMisc")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkMisc")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkMisc")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkMisc")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkMisc")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkMisc")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkMisc")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkMisc")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkMisc")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkMisc")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkMisc")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkNotebook

(define-signal move-focus-out
  (of-object "GtkNotebook")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal switch-page
  (of-object "GtkNotebook")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkNotebookPage*" "p0")
    '("guint" "p1")
  )
)

(define-signal focus-tab
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkNotebookTab" "p0")
  )
)

(define-signal select-page
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal change-current-page
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal reorder-tab
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
    '("gboolean" "p1")
  )
)

(define-signal page-reordered
  (of-object "GtkNotebook")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal page-removed
  (of-object "GtkNotebook")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal page-added
  (of-object "GtkNotebook")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal create-window
  (of-object "GtkNotebook")
  (return-type "GtkNotebook*")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
    '("gint" "p1")
    '("gint" "p2")
  )
)

(define-property user-data
  (of-object "GtkNotebook")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkNotebook")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkNotebook")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkNotebook")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkNotebook")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkNotebook")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkNotebook")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkNotebook")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkNotebook")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkNotebook")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkNotebook")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkNotebook")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkNotebook")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property tab-pos
  (of-object "GtkNotebook")
  (prop-type "GParamEnum")
  (docs "Which side of the notebook holds the tabs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-tabs
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether tabs should be shown or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-border
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the border should be shown or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scrollable
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "If TRUE, scroll arrows are added if there are too many tabs to fit")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tab-border
  (of-object "GtkNotebook")
  (prop-type "GParamUInt")
  (docs "Width of the border around the tab labels")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property tab-hborder
  (of-object "GtkNotebook")
  (prop-type "GParamUInt")
  (docs "Width of the horizontal border of tab labels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tab-vborder
  (of-object "GtkNotebook")
  (prop-type "GParamUInt")
  (docs "Width of the vertical border of tab labels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property page
  (of-object "GtkNotebook")
  (prop-type "GParamInt")
  (docs "The index of the current page")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-popup
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "If TRUE, pressing the right mouse button on the notebook pops up a menu that you can use to go to a page")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property group-id
  (of-object "GtkNotebook")
  (prop-type "GParamInt")
  (docs "Group ID for tabs drag and drop")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property group
  (of-object "GtkNotebook")
  (prop-type "GParamPointer")
  (docs "Group for tabs drag and drop")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether tabs should have homogeneous sizes")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkObject

(define-signal destroy
  (of-object "GtkObject")
  (return-type "void")
  (when "unknown")
)

(define-property user-data
  (of-object "GtkObject")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkOptionMenu

(define-signal changed
  (of-object "GtkOptionMenu")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkOptionMenu")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkOptionMenu")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkOptionMenu")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkOptionMenu")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkOptionMenu")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkOptionMenu")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkOptionMenu")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkOptionMenu")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkOptionMenu")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkOptionMenu")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkOptionMenu")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkOptionMenu")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkOptionMenu")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkOptionMenu")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkOptionMenu")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkOptionMenu")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkOptionMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkOptionMenu")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkOptionMenu")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkOptionMenu")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property menu
  (of-object "GtkOptionMenu")
  (prop-type "GParamObject")
  (docs "The menu of options")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPaned

(define-signal cycle-child-focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal toggle-handle-focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (when "last")
)

(define-signal move-handle
  (of-object "GtkPaned")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-signal cycle-handle-focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal accept-position
  (of-object "GtkPaned")
  (return-type "gboolean")
  (when "last")
)

(define-signal cancel-position
  (of-object "GtkPaned")
  (return-type "gboolean")
  (when "last")
)

(define-property user-data
  (of-object "GtkPaned")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkPaned")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkPaned")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkPaned")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkPaned")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkPaned")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkPaned")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkPaned")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkPaned")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkPaned")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkPaned")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property position
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Position of paned separator in pixels (0 means all the way to the left/top)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property position-set
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "TRUE if the Position property should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-position
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Smallest possible value for the position property")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property max-position
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Largest possible value for the position property")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkPixmap

(define-property user-data
  (of-object "GtkPixmap")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkPixmap")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkPixmap")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkPixmap")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkPixmap")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkPixmap")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkPixmap")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkPixmap")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkPixmap")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkPixmap")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkPixmap")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkPixmap")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkPixmap")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkPixmap")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkPixmap")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPlug

(define-signal embedded
  (of-object "GtkPlug")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkPlug")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkPlug")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkPlug")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkPlug")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkPlug")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkPlug")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkPlug")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkPlug")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkPlug")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkPlug")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkPlug")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkPlug")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkPlug")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkPlug")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkPlug")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkPlug")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkPlug")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkPlug")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkPlug")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkPlug")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkPlug")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property embedded
  (of-object "GtkPlug")
  (prop-type "GParamBoolean")
  (docs "Whether or not the plug is embedded")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkPreview

(define-property user-data
  (of-object "GtkPreview")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkPreview")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkPreview")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkPreview")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkPreview")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkPreview")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkPreview")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkPreview")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkPreview")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkPreview")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property expand
  (of-object "GtkPreview")
  (prop-type "GParamBoolean")
  (docs "Whether the preview widget should take up the entire space it is allocated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPrintOperation

(define-signal status-changed
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
)

(define-signal done
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintOperationResult" "p0")
  )
)

(define-signal begin-print
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal paginate
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal request-page-setup
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("gint" "p1")
    '("GtkPageSetup*" "p2")
  )
)

(define-signal draw-page
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("gint" "p1")
  )
)

(define-signal end-print
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal create-custom-widget
  (of-object "GtkPrintOperation")
  (return-type "GtkWidget*")
  (when "last")
)

(define-signal custom-widget-apply
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal preview
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkPrintOperationPreview*" "p0")
    '("GtkPrintContext*" "p1")
    '("GtkWindow*" "p2")
  )
)

(define-property default-page-setup
  (of-object "GtkPrintOperation")
  (prop-type "GParamObject")
  (docs "The GtkPageSetup used by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property print-settings
  (of-object "GtkPrintOperation")
  (prop-type "GParamObject")
  (docs "The GtkPrintSettings used for initializing the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property job-name
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "A string used for identifying the print job.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property n-pages
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The number of pages in the document.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property current-page
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The current page in the document")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-full-page
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the origin of the context should be at the corner of the page and not the corner of the imageable area")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property track-print-status
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the print operation will continue to report on the print job status after the print data has been sent to the printer or print server.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property unit
  (of-object "GtkPrintOperation")
  (prop-type "GParamEnum")
  (docs "The unit in which distances can be measured in the context")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-progress
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if a progress dialog is shown while printing.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-async
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if print process may run asynchronous.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property export-filename
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "Export filename")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property status
  (of-object "GtkPrintOperation")
  (prop-type "GParamEnum")
  (docs "The status of the print operation")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property status-string
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "A human-readable description of the status")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property custom-tab-label
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "Label for the tab containing custom widgets.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPrinter

(define-signal details-acquired
  (of-object "GtkPrinter")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-property name
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "Name of the printer")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property backend
  (of-object "GtkPrinter")
  (prop-type "GParamObject")
  (docs "Backend for the printer")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property is-virtual
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "FALSE if this represents a real hardware printer")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property state-message
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "String giving the current state of the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property location
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "The location of the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "The icon name to use for the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property job-count
  (of-object "GtkPrinter")
  (prop-type "GParamInt")
  (docs "Number of jobs queued in the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property accepts-pdf
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "TRUE if this printer can accept PDF")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property accepts-ps
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "TRUE if this printer can accept PostScript")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkPrintJob

(define-signal status-changed
  (of-object "GtkPrintJob")
  (return-type "void")
  (when "last")
)

(define-property title
  (of-object "GtkPrintJob")
  (prop-type "GParamString")
  (docs "Title of the print job")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property printer
  (of-object "GtkPrintJob")
  (prop-type "GParamObject")
  (docs "Printer to print the job to")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property page-setup
  (of-object "GtkPrintJob")
  (prop-type "GParamObject")
  (docs "Page Setup")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property settings
  (of-object "GtkPrintJob")
  (prop-type "GParamObject")
  (docs "Printer settings")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property track-print-status
  (of-object "GtkPrintJob")
  (prop-type "GParamBoolean")
  (docs "TRUE if the print job will continue to emit status-changed signals after the print data has been sent to the printer or print server.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPrintOperation

(define-signal done
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintOperationResult" "p0")
  )
)

(define-signal begin-print
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal paginate
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal request-page-setup
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("gint" "p1")
    '("GtkPageSetup*" "p2")
  )
)

(define-signal draw-page
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("gint" "p1")
  )
)

(define-signal end-print
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal status-changed
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
)

(define-signal create-custom-widget
  (of-object "GtkPrintOperation")
  (return-type "GtkWidget*")
  (when "last")
)

(define-signal custom-widget-apply
  (of-object "GtkPrintOperation")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal preview
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkPrintOperationPreview*" "p0")
    '("GtkPrintContext*" "p1")
    '("GtkWindow*" "p2")
  )
)

(define-property default-page-setup
  (of-object "GtkPrintOperation")
  (prop-type "GParamObject")
  (docs "The GtkPageSetup used by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property print-settings
  (of-object "GtkPrintOperation")
  (prop-type "GParamObject")
  (docs "The GtkPrintSettings used for initializing the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property job-name
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "A string used for identifying the print job.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property n-pages
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The number of pages in the document.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property current-page
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The current page in the document")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-full-page
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the origin of the context should be at the corner of the page and not the corner of the imageable area")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property track-print-status
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the print operation will continue to report on the print job status after the print data has been sent to the printer or print server.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property unit
  (of-object "GtkPrintOperation")
  (prop-type "GParamEnum")
  (docs "The unit in which distances can be measured in the context")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-progress
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if a progress dialog is shown while printing.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-async
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if print process may run asynchronous.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property export-filename
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "Export filename")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property status
  (of-object "GtkPrintOperation")
  (prop-type "GParamEnum")
  (docs "The status of the print operation")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property status-string
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "A human-readable description of the status")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property custom-tab-label
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "Label for the tab containing custom widgets.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)


;; From GtkPageSetupUnixDialog

(define-property user-data
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkPageSetupUnixDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPrintUnixDialog

(define-property user-data
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-separator
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "The dialog has a separator bar above its buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property page-setup
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The GtkPageSetup to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property current-page
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamInt")
  (docs "The current page in the document")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property print-settings
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The GtkPrintSettings used for initializing the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selected-printer
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The GtkPrinter which is selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkProgress

(define-property user-data
  (of-object "GtkProgress")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkProgress")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkProgress")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkProgress")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkProgress")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkProgress")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkProgress")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkProgress")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkProgress")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkProgress")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activity-mode
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the GtkProgress is in activity mode, meaning that it signals something is happening, but not how much of the activity is finished. This is used when you're doing something but don't know how long it will take.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-text
  (of-object "GtkProgress")
  (prop-type "GParamBoolean")
  (docs "Whether the progress is shown as text.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-xalign
  (of-object "GtkProgress")
  (prop-type "GParamFloat")
  (docs "The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-yalign
  (of-object "GtkProgress")
  (prop-type "GParamFloat")
  (docs "The vertical text alignment, from 0 (top) to 1 (bottom).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkProgressBar

(define-property user-data
  (of-object "GtkProgressBar")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkProgressBar")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkProgressBar")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkProgressBar")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkProgressBar")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkProgressBar")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkProgressBar")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkProgressBar")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkProgressBar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkProgressBar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activity-mode
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the GtkProgress is in activity mode, meaning that it signals something is happening, but not how much of the activity is finished. This is used when you're doing something but don't know how long it will take.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-text
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the progress is shown as text.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-xalign
  (of-object "GtkProgressBar")
  (prop-type "GParamFloat")
  (docs "The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-yalign
  (of-object "GtkProgressBar")
  (prop-type "GParamFloat")
  (docs "The vertical text alignment, from 0 (top) to 1 (bottom).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fraction
  (of-object "GtkProgressBar")
  (prop-type "GParamDouble")
  (docs "The fraction of total work that has been completed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pulse-step
  (of-object "GtkProgressBar")
  (prop-type "GParamDouble")
  (docs "The fraction of total progress to move the bouncing block when pulsed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "GtkProgressBar")
  (prop-type "GParamEnum")
  (docs "Orientation and growth direction of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text
  (of-object "GtkProgressBar")
  (prop-type "GParamString")
  (docs "Text to be displayed in the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkProgressBar")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the progress bar does not have enough room to display the entire string, if at all.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkProgressBar")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment connected to the progress bar (Deprecated)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property bar-style
  (of-object "GtkProgressBar")
  (prop-type "GParamEnum")
  (docs "Specifies the visual style of the bar in percentage mode (Deprecated)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activity-step
  (of-object "GtkProgressBar")
  (prop-type "GParamUInt")
  (docs "The increment used for each iteration in activity mode (Deprecated)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activity-blocks
  (of-object "GtkProgressBar")
  (prop-type "GParamUInt")
  (docs "The number of blocks which can fit in the progress bar area in activity mode (Deprecated)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property discrete-blocks
  (of-object "GtkProgressBar")
  (prop-type "GParamUInt")
  (docs "The number of discrete blocks in a progress bar (when shown in the discrete style)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRadioButton

(define-signal group-changed
  (of-object "GtkRadioButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkRadioButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRadioButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRadioButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRadioButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRadioButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRadioButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRadioButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRadioButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRadioButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRadioButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkRadioButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkRadioButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkRadioButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkRadioButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkRadioButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkRadioButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkRadioButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkRadioButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkRadioButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inconsistent
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button is in an in between state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-indicator
  (of-object "GtkRadioButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle part of the button is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property group
  (of-object "GtkRadioButton")
  (prop-type "GParamObject")
  (docs "The radio button whose group this widget belongs to.")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkRadioToolButton

(define-property user-data
  (of-object "GtkRadioToolButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRadioToolButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRadioToolButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRadioToolButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRadioToolButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRadioToolButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRadioToolButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRadioToolButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRadioToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRadioToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkRadioToolButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkRadioToolButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkRadioToolButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkRadioToolButton")
  (prop-type "GParamString")
  (docs "Text to show in the item.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkRadioToolButton")
  (prop-type "GParamObject")
  (docs "Widget to use as the item label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkRadioToolButton")
  (prop-type "GParamString")
  (docs "The stock icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkRadioToolButton")
  (prop-type "GParamString")
  (docs "The name of the themed icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-widget
  (of-object "GtkRadioToolButton")
  (prop-type "GParamObject")
  (docs "Icon widget to display in the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkRadioToolButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property group
  (of-object "GtkRadioToolButton")
  (prop-type "GParamObject")
  (docs "The radio tool button whose group this button belongs to.")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkRadioAction

(define-signal changed
  (of-object "GtkRadioAction")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkRadioAction*" "p0")
  )
)

(define-property name
  (of-object "GtkRadioAction")
  (prop-type "GParamString")
  (docs "A unique name for the action.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property label
  (of-object "GtkRadioAction")
  (prop-type "GParamString")
  (docs "The label used for menu items and buttons that activate this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property short-label
  (of-object "GtkRadioAction")
  (prop-type "GParamString")
  (docs "A shorter label that may be used on toolbar buttons.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip
  (of-object "GtkRadioAction")
  (prop-type "GParamString")
  (docs "A tooltip for this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkRadioAction")
  (prop-type "GParamString")
  (docs "The stock icon displayed in widgets representing this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkRadioAction")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-overflown
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hide-if-empty
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, empty menu proxies for this action are hidden.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is visible.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property action-group
  (of-object "GtkRadioAction")
  (prop-type "GParamObject")
  (docs "The GtkActionGroup this GtkAction is associated with, or NULL (for internal use).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-as-radio
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "Whether the proxies for this action look like radio action proxies")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkRadioAction")
  (prop-type "GParamBoolean")
  (docs "If the toggle action should be active in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkRadioAction")
  (prop-type "GParamInt")
  (docs "The value returned by gtk_radio_action_get_current_value() when this action is the current action of its group.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property group
  (of-object "GtkRadioAction")
  (prop-type "GParamObject")
  (docs "The radio action whose group this action belongs to.")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property current-value
  (of-object "GtkRadioAction")
  (prop-type "GParamInt")
  (docs "The value property of the currently active member of the group to which this action belongs.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRadioMenuItem

(define-signal group-changed
  (of-object "GtkRadioMenuItem")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property submenu
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamObject")
  (docs "The submenu attached to the menu item, or NULL if it has none")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the menu item is checked")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inconsistent
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether to display an inconsistent state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-as-radio
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the menu item looks like a radio menu item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property group
  (of-object "GtkRadioMenuItem")
  (prop-type "GParamObject")
  (docs "The radio menu item whose group this widget belongs to.")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkRange

(define-signal value-changed
  (of-object "GtkRange")
  (return-type "void")
  (when "last")
)

(define-signal change-value
  (of-object "GtkRange")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gdouble" "p1")
  )
)

(define-signal adjust-bounds
  (of-object "GtkRange")
  (return-type "void")
  (when "last")
  (parameters
    '("gdouble" "p0")
  )
)

(define-signal move-slider
  (of-object "GtkRange")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-property user-data
  (of-object "GtkRange")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRange")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRange")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRange")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRange")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRange")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRange")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRange")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRange")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRange")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property update-policy
  (of-object "GtkRange")
  (prop-type "GParamEnum")
  (docs "How the range should be updated on the screen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkRange")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this range object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inverted
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Invert direction slider moves to increase range value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property lower-stepper-sensitivity
  (of-object "GtkRange")
  (prop-type "GParamEnum")
  (docs "The sensitivity policy for the stepper that points to the adjustment's lower side")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property upper-stepper-sensitivity
  (of-object "GtkRange")
  (prop-type "GParamEnum")
  (docs "The sensitivity policy for the stepper that points to the adjustment's upper side")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-fill-level
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether to display a fill level indicator graphics on trough.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property restrict-to-fill-level
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether to restrict the upper boundary to the fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fill-level
  (of-object "GtkRange")
  (prop-type "GParamDouble")
  (docs "The fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)


;; From GtkRecentAction

(define-property sort-type
  (of-object "GtkRecentAction")
  (prop-type "GParamEnum")
  (docs "The sorting order of the items displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter
  (of-object "GtkRecentAction")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which resources are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-private
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the private items should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-tips
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether there should be a tooltip on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property limit
  (of-object "GtkRecentAction")
  (prop-type "GParamInt")
  (docs "The maximum number of items to be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-only
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the selected resource(s) should be limited to local file: URIs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-not-found
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the items pointing to unavailable resources should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-icons
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether there should be an icon near the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property recent-manager
  (of-object "GtkRecentAction")
  (prop-type "GParamObject")
  (docs "The RecentManager object to use")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property select-multiple
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple items to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRecentAction")
  (prop-type "GParamString")
  (docs "A unique name for the action.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property label
  (of-object "GtkRecentAction")
  (prop-type "GParamString")
  (docs "The label used for menu items and buttons that activate this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property short-label
  (of-object "GtkRecentAction")
  (prop-type "GParamString")
  (docs "A shorter label that may be used on toolbar buttons.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip
  (of-object "GtkRecentAction")
  (prop-type "GParamString")
  (docs "A tooltip for this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkRecentAction")
  (prop-type "GParamString")
  (docs "The stock icon displayed in widgets representing this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkRecentAction")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-overflown
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hide-if-empty
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, empty menu proxies for this action are hidden.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is visible.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property action-group
  (of-object "GtkRecentAction")
  (prop-type "GParamObject")
  (docs "The GtkActionGroup this GtkAction is associated with, or NULL (for internal use).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-numbers
  (of-object "GtkRecentAction")
  (prop-type "GParamBoolean")
  (docs "Whether the items should be displayed with a number")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRecentChooser

(define-signal selection-changed
  (of-object "GtkRecentChooser")
  (return-type "void")
  (when "last")
)

(define-signal item-activated
  (of-object "GtkRecentChooser")
  (return-type "void")
  (when "last")
)

;; From GtkRecentChooserMenu

(define-property show-tips
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether there should be a tooltip on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property limit
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamInt")
  (docs "The maximum number of items to be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which resources are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property recent-manager
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamObject")
  (docs "The RecentManager object to use")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property select-multiple
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple items to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-only
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the selected resource(s) should be limited to local file: URIs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-type
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamEnum")
  (docs "The sorting order of the items displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-not-found
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the items pointing to unavailable resources should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-icons
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether there should be an icon near the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-private
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the private items should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-data
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property take-focus
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "A boolean that determines whether the menu grabs the keyboard focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tearoff-state
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "A boolean that indicates whether the menu is torn-off")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tearoff-title
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamString")
  (docs "A title that may be displayed by the window manager when this menu is torn-off")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-numbers
  (of-object "GtkRecentChooserMenu")
  (prop-type "GParamBoolean")
  (docs "Whether the items should be displayed with a number")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRecentChooserWidget

(define-property show-tips
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether there should be a tooltip on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property limit
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamInt")
  (docs "The maximum number of items to be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filter
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which resources are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property recent-manager
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamObject")
  (docs "The RecentManager object to use")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property select-multiple
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple items to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property local-only
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the selected resource(s) should be limited to local file: URIs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-type
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamEnum")
  (docs "The sorting order of the items displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-not-found
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the items pointing to unavailable resources should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-icons
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether there should be an icon near the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-private
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the private items should be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property user-data
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkRecentChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRecentFilter

(define-property user-data
  (of-object "GtkRecentFilter")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRecentManager

(define-signal changed
  (of-object "GtkRecentManager")
  (return-type "void")
  (when "first")
)

(define-property filename
  (of-object "GtkRecentManager")
  (prop-type "GParamString")
  (docs "The full path to the file to be used to store and read the list")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property limit
  (of-object "GtkRecentManager")
  (prop-type "GParamInt")
  (docs "The maximum number of items to be returned by gtk_recent_manager_get_items()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkRecentManager")
  (prop-type "GParamInt")
  (docs "The size of the recently used resources list")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkRuler

(define-property user-data
  (of-object "GtkRuler")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkRuler")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkRuler")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkRuler")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkRuler")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkRuler")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkRuler")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkRuler")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkRuler")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkRuler")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkRuler")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property lower
  (of-object "GtkRuler")
  (prop-type "GParamDouble")
  (docs "Lower limit of ruler")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property upper
  (of-object "GtkRuler")
  (prop-type "GParamDouble")
  (docs "Upper limit of ruler")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property position
  (of-object "GtkRuler")
  (prop-type "GParamDouble")
  (docs "Position of mark on the ruler")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-size
  (of-object "GtkRuler")
  (prop-type "GParamDouble")
  (docs "Maximum size of the ruler")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property metric
  (of-object "GtkRuler")
  (prop-type "GParamEnum")
  (docs "The metric used for the ruler")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkScale

(define-signal format-value
  (of-object "GtkScale")
  (return-type "gchar*")
  (when "last")
  (parameters
    '("gdouble" "p0")
  )
)

(define-property user-data
  (of-object "GtkScale")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkScale")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkScale")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkScale")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkScale")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkScale")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkScale")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkScale")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkScale")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkScale")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property update-policy
  (of-object "GtkScale")
  (prop-type "GParamEnum")
  (docs "How the range should be updated on the screen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkScale")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this range object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inverted
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Invert direction slider moves to increase range value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property lower-stepper-sensitivity
  (of-object "GtkScale")
  (prop-type "GParamEnum")
  (docs "The sensitivity policy for the stepper that points to the adjustment's lower side")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property upper-stepper-sensitivity
  (of-object "GtkScale")
  (prop-type "GParamEnum")
  (docs "The sensitivity policy for the stepper that points to the adjustment's upper side")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-fill-level
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether to display a fill level indicator graphics on trough.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property restrict-to-fill-level
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether to restrict the upper boundary to the fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fill-level
  (of-object "GtkScale")
  (prop-type "GParamDouble")
  (docs "The fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property digits
  (of-object "GtkScale")
  (prop-type "GParamInt")
  (docs "The number of decimal places that are displayed in the value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-value
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the current value is displayed as a string next to the slider")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value-pos
  (of-object "GtkScale")
  (prop-type "GParamEnum")
  (docs "The position in which the current value is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkScaleButton

(define-signal value-changed
  (of-object "GtkScaleButton")
  (return-type "void")
  (when "last")
  (parameters
    '("gdouble" "p0")
  )
)

(define-signal popup
  (of-object "GtkScaleButton")
  (return-type "void")
  (when "last")
)

(define-signal popdown
  (of-object "GtkScaleButton")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkScaleButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkScaleButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkScaleButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkScaleButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkScaleButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkScaleButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkScaleButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkScaleButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkScaleButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkScaleButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkScaleButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkScaleButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkScaleButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkScaleButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkScaleButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkScaleButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkScaleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkScaleButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkScaleButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkScaleButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkScaleButton")
  (prop-type "GParamDouble")
  (docs "The value of the scale")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkScaleButton")
  (prop-type "GParamEnum")
  (docs "The icon size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkScaleButton")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this scale button object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icons
  (of-object "GtkScaleButton")
  (prop-type "GParamBoxed")
  (docs "List of icon names")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkScrollbar

(define-property user-data
  (of-object "GtkScrollbar")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkScrollbar")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkScrollbar")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkScrollbar")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkScrollbar")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkScrollbar")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkScrollbar")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkScrollbar")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkScrollbar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkScrollbar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property update-policy
  (of-object "GtkScrollbar")
  (prop-type "GParamEnum")
  (docs "How the range should be updated on the screen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkScrollbar")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this range object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inverted
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Invert direction slider moves to increase range value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property lower-stepper-sensitivity
  (of-object "GtkScrollbar")
  (prop-type "GParamEnum")
  (docs "The sensitivity policy for the stepper that points to the adjustment's lower side")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property upper-stepper-sensitivity
  (of-object "GtkScrollbar")
  (prop-type "GParamEnum")
  (docs "The sensitivity policy for the stepper that points to the adjustment's upper side")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-fill-level
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether to display a fill level indicator graphics on trough.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property restrict-to-fill-level
  (of-object "GtkScrollbar")
  (prop-type "GParamBoolean")
  (docs "Whether to restrict the upper boundary to the fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fill-level
  (of-object "GtkScrollbar")
  (prop-type "GParamDouble")
  (docs "The fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkScrolledWindow

(define-signal scroll-child
  (of-object "GtkScrolledWindow")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
    '("gboolean" "p1")
  )
)

(define-signal move-focus-out
  (of-object "GtkScrolledWindow")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-property user-data
  (of-object "GtkScrolledWindow")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkScrolledWindow")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkScrolledWindow")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkScrolledWindow")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkScrolledWindow")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkScrolledWindow")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkScrolledWindow")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkScrolledWindow")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property hadjustment
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment for the horizontal position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vadjustment
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment for the vertical position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hscrollbar-policy
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "When the horizontal scrollbar is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vscrollbar-policy
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "When the vertical scrollbar is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-placement
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "Where the contents are located with respect to the scrollbars. This property only takes effect if window-placement-set is TRUE.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-placement-set
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether window-placement should be used to determine the location of the contents with respect to the scrollbars.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "Style of bevel around the contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSeparator

(define-property user-data
  (of-object "GtkSeparator")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkSeparator")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkSeparator")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkSeparator")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkSeparator")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkSeparator")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkSeparator")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkSeparator")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkSeparator")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkSeparator")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkSeparator")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSeparatorToolItem

(define-property user-data
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw
  (of-object "GtkSeparatorToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the separator is drawn, or just blank")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSettings

(define-property gtk-double-click-time
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Maximum time allowed between two clicks for them to be considered a double click (in milliseconds)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-double-click-distance
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Maximum distance allowed between two clicks for them to be considered a double click (in pixels)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-cursor-blink
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the cursor should blink")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-cursor-blink-time
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Length of the cursor blink cycle, in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-cursor-blink-timeout
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Time after which the cursor stops blinking, in seconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-split-cursor
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether two cursors should be displayed for mixed left-to-right and right-to-left text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of theme RC file to load")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-icon-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of icon theme to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-fallback-icon-theme
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of a icon theme to fall back to")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-key-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of key theme RC file to load")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-menu-bar-accel
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Keybinding to activate the menu bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-dnd-drag-threshold
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Number of pixels the cursor can move before dragging")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-font-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of default font to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-icon-sizes
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "List of icon sizes (gtk-menu=16,16:gtk-button=20,20...)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-modules
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "List of currently active GTK modules")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-xft-antialias
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Whether to antialias Xft fonts; 0=no, 1=yes, -1=default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-xft-hinting
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Whether to hint Xft fonts; 0=no, 1=yes, -1=default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-xft-hintstyle
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "What degree of hinting to use; hintnone, hintslight, hintmedium, or hintfull")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-xft-rgba
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Type of subpixel antialiasing; none, rgb, bgr, vrgb, vbgr")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-xft-dpi
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Resolution for Xft, in 1024 * dots/inch. -1 to use default value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-cursor-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of the cursor theme to use, or NULL to use the default theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-cursor-theme-size
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Size to use for cursors, or 0 to use the default size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-alternative-button-order
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether buttons in dialogs should use the alternative button order")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-alternative-sort-arrows
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the direction of the sort indicators in list and tree views is inverted compared to the default (where down means ascending)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-show-input-method-menu
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the context menus of entries and text views should offer to change the input method")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-show-unicode-menu
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the context menus of entries and text views should offer to insert control characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-timeout-initial
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Starting value for timeouts, when button is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-timeout-repeat
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Repeat value for timeouts, when button is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-timeout-expand
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Expand value for timeouts, when a widget is expanding a new region")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-color-scheme
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "A palette of named colors for use in themes")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-enable-animations
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to enable toolkit-wide animations.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-touchscreen-mode
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "When TRUE, there are no motion notify events delivered on this screen")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-tooltip-timeout
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Timeout before tooltip is shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-tooltip-browse-timeout
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Timeout before tooltip is shown when browse mode is enabled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-tooltip-browse-mode-timeout
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Timeout after which browse mode is disabled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-keynav-cursor-only
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "When TRUE, there are only cursor keys available to navigate widgets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-keynav-wrap-around
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to wrap around when keyboard-navigating widgets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-error-bell
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "When TRUE, keyboard navigation and other errors will cause a beep")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property color-hash
  (of-object "GtkSettings")
  (prop-type "GParamBoxed")
  (docs "A hash table representation of the color scheme.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property gtk-file-chooser-backend
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of the GtkFileChooser backend to use by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-print-backends
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "List of the GtkPrintBackend backends to use by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-print-preview-command
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Command to run when displaying a print preview")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-enable-mnemonics
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether labels should have mnemonics")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-enable-accels
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether menu items should have accelerators")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-toolbar-style
  (of-object "GtkSettings")
  (prop-type "GParamEnum")
  (docs "Whether default toolbars have text only, text and icons, icons only, etc.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-toolbar-icon-size
  (of-object "GtkSettings")
  (prop-type "GParamEnum")
  (docs "Size of icons in default toolbars")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-button-images
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether stock icons should be shown in buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-label-select-on-focus
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to select the contents of a selectable label when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-entry-select-on-focus
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to select the contents of an entry when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gtk-entry-password-hint-timeout
  (of-object "GtkSettings")
  (prop-type "GParamUInt")
  (docs "How long to show the last inputted character in hidden entries")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSizeGroup

(define-property mode
  (of-object "GtkSizeGroup")
  (prop-type "GParamEnum")
  (docs "The directions in which the size group affects the requested sizes of its component widgets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ignore-hidden
  (of-object "GtkSizeGroup")
  (prop-type "GParamBoolean")
  (docs "If TRUE, unmapped widgets are ignored when determining the size of the group")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSocket

(define-signal plug-added
  (of-object "GtkSocket")
  (return-type "void")
  (when "last")
)

(define-signal plug-removed
  (of-object "GtkSocket")
  (return-type "gboolean")
  (when "last")
)

(define-property user-data
  (of-object "GtkSocket")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkSocket")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkSocket")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkSocket")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkSocket")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkSocket")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkSocket")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkSocket")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkSocket")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkSocket")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkSocket")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkSocket")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkSocket")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkSocket")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkSpinButton

(define-signal input
  (of-object "GtkSpinButton")
  (return-type "gint")
  (when "last")
  (parameters
    '("gdouble*" "p0")
  )
)

(define-signal output
  (of-object "GtkSpinButton")
  (return-type "gboolean")
  (when "last")
)

(define-signal value-changed
  (of-object "GtkSpinButton")
  (return-type "void")
  (when "last")
)

(define-signal wrapped
  (of-object "GtkSpinButton")
  (return-type "void")
  (when "last")
)

(define-signal change-value
  (of-object "GtkSpinButton")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-property user-data
  (of-object "GtkSpinButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkSpinButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkSpinButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkSpinButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkSpinButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkSpinButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkSpinButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkSpinButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "The current position of the insertion cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property selection-bound
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "The position of the opposite end of the selection from the cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether the entry contents can be edited")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-length
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "Maximum number of characters for this entry. Zero if no maximum")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visibility
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "FALSE displays the invisible char instead of the actual text (password mode)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-frame
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "FALSE removes outside bevel from entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inner-border
  (of-object "GtkSpinButton")
  (prop-type "GParamBoxed")
  (docs "Border between text and frame. Overrides the inner-border style property")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property invisible-char
  (of-object "GtkSpinButton")
  (prop-type "GParamUnichar")
  (docs "The character to use when masking entry contents (in password mode)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property activates-default
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "Number of characters to leave space for in the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scroll-offset
  (of-object "GtkSpinButton")
  (prop-type "GParamInt")
  (docs "Number of pixels of the entry scrolled off the screen to the left")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property text
  (of-object "GtkSpinButton")
  (prop-type "GParamString")
  (docs "The contents of the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkSpinButton")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property truncate-multiline
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether to truncate multiline pastes to one line.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkSpinButton")
  (prop-type "GParamEnum")
  (docs "Which kind of shadow to draw around the entry when has-frame is set")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkSpinButton")
  (prop-type "GParamObject")
  (docs "The adjustment that holds the value of the spinbutton")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property climb-rate
  (of-object "GtkSpinButton")
  (prop-type "GParamDouble")
  (docs "The acceleration rate when you hold down a button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property digits
  (of-object "GtkSpinButton")
  (prop-type "GParamUInt")
  (docs "The number of decimal places to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property snap-to-ticks
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether erroneous values are automatically changed to a spin button's nearest step increment")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property numeric
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether non-numeric characters should be ignored")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether a spin button should wrap upon reaching its limits")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property update-policy
  (of-object "GtkSpinButton")
  (prop-type "GParamEnum")
  (docs "Whether the spin button should update always, or only when the value is legal")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkSpinButton")
  (prop-type "GParamDouble")
  (docs "Reads the current value, or sets a new value")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkStatusbar

(define-signal text-pushed
  (of-object "GtkStatusbar")
  (return-type "void")
  (when "last")
  (parameters
    '("guint" "p0")
    '("const-gchar*" "p1")
  )
)

(define-signal text-popped
  (of-object "GtkStatusbar")
  (return-type "void")
  (when "last")
  (parameters
    '("guint" "p0")
    '("const-gchar*" "p1")
  )
)

(define-property user-data
  (of-object "GtkStatusbar")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkStatusbar")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkStatusbar")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkStatusbar")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkStatusbar")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkStatusbar")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkStatusbar")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkStatusbar")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkStatusbar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkStatusbar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkStatusbar")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkStatusbar")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkStatusbar")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkStatusbar")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-resize-grip
  (of-object "GtkStatusbar")
  (prop-type "GParamBoolean")
  (docs "Whether the statusbar has a grip for resizing the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkStatusIcon

(define-signal size-changed
  (of-object "GtkStatusIcon")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal popup-menu
  (of-object "GtkStatusIcon")
  (return-type "void")
  (when "first")
  (parameters
    '("guint" "p0")
    '("guint32" "p1")
  )
)

(define-signal activate
  (of-object "GtkStatusIcon")
  (return-type "void")
  (when "first")
)

(define-property pixbuf
  (of-object "GtkStatusIcon")
  (prop-type "GParamObject")
  (docs "A GdkPixbuf to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file
  (of-object "GtkStatusIcon")
  (prop-type "GParamString")
  (docs "Filename to load and display")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property stock
  (of-object "GtkStatusIcon")
  (prop-type "GParamString")
  (docs "Stock ID for a stock image to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkStatusIcon")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property storage-type
  (of-object "GtkStatusIcon")
  (prop-type "GParamEnum")
  (docs "The representation being used for image data")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property size
  (of-object "GtkStatusIcon")
  (prop-type "GParamInt")
  (docs "The size of the icon")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkStatusIcon")
  (prop-type "GParamObject")
  (docs "The screen where this status icon will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkStatusIcon")
  (prop-type "GParamBoolean")
  (docs "Whether or not the status icon is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "GtkStatusIcon")
  (prop-type "GParamEnum")
  (docs "The orientation of the tray")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property embedded
  (of-object "GtkStatusIcon")
  (prop-type "GParamBoolean")
  (docs "Whether or not the status icon is embedded")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property blinking
  (of-object "GtkStatusIcon")
  (prop-type "GParamBoolean")
  (docs "Whether or not the status icon is blinking")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkStyle

(define-signal realize
  (of-object "GtkStyle")
  (return-type "void")
  (when "first")
)

(define-signal unrealize
  (of-object "GtkStyle")
  (return-type "void")
  (when "first")
)

;; From GtkTable

(define-property user-data
  (of-object "GtkTable")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkTable")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkTable")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkTable")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkTable")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkTable")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkTable")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkTable")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkTable")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkTable")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkTable")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkTable")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkTable")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property n-rows
  (of-object "GtkTable")
  (prop-type "GParamUInt")
  (docs "The number of rows in the table")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property n-columns
  (of-object "GtkTable")
  (prop-type "GParamUInt")
  (docs "The number of columns in the table")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property column-spacing
  (of-object "GtkTable")
  (prop-type "GParamUInt")
  (docs "The amount of space between two consecutive columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property row-spacing
  (of-object "GtkTable")
  (prop-type "GParamUInt")
  (docs "The amount of space between two consecutive rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property homogeneous
  (of-object "GtkTable")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the table cells are all the same width/height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTearoffMenuItem

(define-property user-data
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property submenu
  (of-object "GtkTearoffMenuItem")
  (prop-type "GParamObject")
  (docs "The submenu attached to the menu item, or NULL if it has none")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTipsQuery

(define-signal start-query
  (of-object "GtkTipsQuery")
  (return-type "void")
  (when "first")
)

(define-signal stop-query
  (of-object "GtkTipsQuery")
  (return-type "void")
  (when "first")
)

(define-signal widget-entered
  (of-object "GtkTipsQuery")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
    '("const-gchar*" "p1")
    '("const-gchar*" "p2")
  )
)

(define-signal widget-selected
  (of-object "GtkTipsQuery")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
    '("const-gchar*" "p1")
    '("const-gchar*" "p2")
    '("GdkEvent*" "p3")
  )
)

(define-property user-data
  (of-object "GtkTipsQuery")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkTipsQuery")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkTipsQuery")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkTipsQuery")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkTipsQuery")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkTipsQuery")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkTipsQuery")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xpad
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the left and right of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ypad
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "The amount of space to add on the top and bottom of the widget, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "The text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property attributes
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup. See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justify
  (of-object "GtkTipsQuery")
  (prop-type "GParamEnum")
  (docs "The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkMisc::xalign for that")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pattern
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "A string with _ characters in positions correspond to characters in the text to underline")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property wrap
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "If set, wrap lines if the text becomes too wide")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkTipsQuery")
  (prop-type "GParamEnum")
  (docs "If wrap is set, controls how linewrapping is done")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selectable
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the label text can be selected with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property mnemonic-keyval
  (of-object "GtkTipsQuery")
  (prop-type "GParamUInt")
  (docs "The mnemonic accelerator key for this label")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property mnemonic-widget
  (of-object "GtkTipsQuery")
  (prop-type "GParamObject")
  (docs "The widget to be activated when the label's mnemonic key is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "The current position of the insertion cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property selection-bound
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "The position of the opposite end of the selection from the cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkTipsQuery")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the label does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-chars
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-line-mode
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "Whether the label is in single line mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property angle
  (of-object "GtkTipsQuery")
  (prop-type "GParamDouble")
  (docs "Angle at which the label is rotated")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-width-chars
  (of-object "GtkTipsQuery")
  (prop-type "GParamInt")
  (docs "The desired maximum width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property emit-always
  (of-object "GtkTipsQuery")
  (prop-type "GParamBoolean")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property caller
  (of-object "GtkTipsQuery")
  (prop-type "GParamObject")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-inactive
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-no-tip
  (of-object "GtkTipsQuery")
  (prop-type "GParamString")
  (docs "")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToggleButton

(define-signal toggled
  (of-object "GtkToggleButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkToggleButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkToggleButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkToggleButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkToggleButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkToggleButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkToggleButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkToggleButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkToggleButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkToggleButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkToggleButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkToggleButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkToggleButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkToggleButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkToggleButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkToggleButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkToggleButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkToggleButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkToggleButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkToggleButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inconsistent
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button is in an in between state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-indicator
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle part of the button is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToolbar

(define-signal orientation-changed
  (of-object "GtkToolbar")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkOrientation" "p0")
  )
)

(define-signal style-changed
  (of-object "GtkToolbar")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkToolbarStyle" "p0")
  )
)

(define-signal popup-context-menu
  (of-object "GtkToolbar")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
    '("gint" "p2")
  )
)

(define-signal focus-home-or-end
  (of-object "GtkToolbar")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-property user-data
  (of-object "GtkToolbar")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkToolbar")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkToolbar")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkToolbar")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkToolbar")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkToolbar")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkToolbar")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkToolbar")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkToolbar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkToolbar")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkToolbar")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkToolbar")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkToolbar")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property orientation
  (of-object "GtkToolbar")
  (prop-type "GParamEnum")
  (docs "The orientation of the toolbar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property toolbar-style
  (of-object "GtkToolbar")
  (prop-type "GParamEnum")
  (docs "How to draw the toolbar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-arrow
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "If an arrow should be shown if the toolbar doesn't fit")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltips
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "If the tooltips of the toolbar should be active or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-size
  (of-object "GtkToolbar")
  (prop-type "GParamEnum")
  (docs "Size of icons in this toolbar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-size-set
  (of-object "GtkToolbar")
  (prop-type "GParamBoolean")
  (docs "Whether the icon-size property has been set")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToolItem

(define-signal create-menu-proxy
  (of-object "GtkToolItem")
  (return-type "gboolean")
  (when "last")
)

(define-signal toolbar-reconfigured
  (of-object "GtkToolItem")
  (return-type "void")
  (when "last")
)

(define-signal set-tooltip
  (of-object "GtkToolItem")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkTooltips*" "p0")
    '("const-gchar*" "p1")
    '("const-gchar*" "p2")
  )
)

(define-property user-data
  (of-object "GtkToolItem")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkToolItem")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkToolItem")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkToolItem")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkToolItem")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkToolItem")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkToolItem")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkToolItem")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkToolItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkToolItem")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkToolItem")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkToolItem")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkToolItem")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkToolItem")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToolButton

(define-signal clicked
  (of-object "GtkToolButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkToolButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkToolButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkToolButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkToolButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkToolButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkToolButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkToolButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkToolButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkToolButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkToolButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkToolButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkToolButton")
  (prop-type "GParamString")
  (docs "Text to show in the item.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkToolButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkToolButton")
  (prop-type "GParamObject")
  (docs "Widget to use as the item label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkToolButton")
  (prop-type "GParamString")
  (docs "The stock icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkToolButton")
  (prop-type "GParamString")
  (docs "The name of the themed icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-widget
  (of-object "GtkToolButton")
  (prop-type "GParamObject")
  (docs "Icon widget to display in the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTextBuffer

(define-signal changed
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
)

(define-signal insert-text
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextIter*" "p0")
    '("const-gchar*" "p1")
    '("gint" "p2")
  )
)

(define-signal insert-pixbuf
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextIter*" "p0")
    '("GdkPixbuf*" "p1")
  )
)

(define-signal insert-child-anchor
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextIter*" "p0")
    '("GtkTextChildAnchor*" "p1")
  )
)

(define-signal delete-range
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextIter*" "p0")
    '("GtkTextIter*" "p1")
  )
)

(define-signal modified-changed
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
)

(define-signal mark-set
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("const-GtkTextIter*" "p0")
    '("GtkTextMark*" "p1")
  )
)

(define-signal mark-deleted
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextMark*" "p0")
  )
)

(define-signal apply-tag
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextTag*" "p0")
    '("const-GtkTextIter*" "p1")
    '("const-GtkTextIter*" "p2")
  )
)

(define-signal remove-tag
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextTag*" "p0")
    '("const-GtkTextIter*" "p1")
    '("const-GtkTextIter*" "p2")
  )
)

(define-signal begin-user-action
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
)

(define-signal end-user-action
  (of-object "GtkTextBuffer")
  (return-type "void")
  (when "last")
)

(define-property tag-table
  (of-object "GtkTextBuffer")
  (prop-type "GParamObject")
  (docs "Text Tag Table")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property text
  (of-object "GtkTextBuffer")
  (prop-type "GParamString")
  (docs "Current text of the buffer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-selection
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoolean")
  (docs "Whether the buffer has some text currently selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property cursor-position
  (of-object "GtkTextBuffer")
  (prop-type "GParamInt")
  (docs "The position of the insert mark (as offset from the beginning of the buffer)")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property copy-target-list
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoxed")
  (docs "The list of targets this buffer supports for clipboard copying and DND source")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property paste-target-list
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoxed")
  (docs "The list of targets this buffer supports for clipboard pasting and DND destination")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkTextMark

(define-property name
  (of-object "GtkTextMark")
  (prop-type "GParamString")
  (docs "Mark name")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property left-gravity
  (of-object "GtkTextMark")
  (prop-type "GParamBoolean")
  (docs "Whether the mark has left gravity")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkTextTag

(define-signal event
  (of-object "GtkTextTag")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GObject*" "p0")
    '("GdkEvent*" "p1")
    '("const-GtkTextIter*" "p2")
  )
)

(define-property name
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Name used to refer to the text tag. NULL for anonymous tags")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property background
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property foreground
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property background-gdk
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Background color as a (possibly unallocated) GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-gdk
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a (possibly unallocated) GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-stipple
  (of-object "GtkTextTag")
  (prop-type "GParamObject")
  (docs "Bitmap to use as a mask when drawing the text background")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-stipple
  (of-object "GtkTextTag")
  (prop-type "GParamObject")
  (docs "Bitmap to use as a mask when drawing the text foreground")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. Sans Italic 12")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-desc
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Font style as a PangoStyle, e.g. PANGO_STYLE_ITALIC")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Font variant as a PangoVariant, e.g. PANGO_VARIANT_SMALL_CAPS")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Font weight as an integer, see predefined values in PangoWeight; for example, PANGO_WEIGHT_BOLD")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Font stretch as a PangoStretch, e.g. PANGO_STRETCH_CONDENSED")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Font size in Pango units")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-points
  (of-object "GtkTextTag")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale
  (of-object "GtkTextTag")
  (prop-type "GParamDouble")
  (docs "Font size as a scale factor relative to the default font size. This properly adapts to theme changes etc. so is recommended. Pango predefines some scales such as PANGO_SCALE_X_LARGE")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-above-lines
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Pixels of blank space above paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-below-lines
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Pixels of blank space below paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-inside-wrap
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Pixels of blank space between wrapped lines in a paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Whether to wrap lines never, at word boundaries, or at character boundaries")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justification
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Left, right, or center justification")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Text direction, e.g. right-to-left or left-to-right")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property left-margin
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Width of the left margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property indent
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Amount to indent the paragraph, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property right-margin
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Width of the right margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative) in Pango units")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-full-height
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether the background color fills the entire line height or only the height of the tagged characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tabs
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Custom tabs for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property invisible
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this text is hidden.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property paragraph-background
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Paragraph background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property paragraph-background-gdk
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Paragraph background color as a (possibly unallocated) GdkColor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accumulative-margin
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether left and right margins accumulate.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-stipple-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background stipple")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-stipple-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground stipple")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property style-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property variant-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property weight-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stretch-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scale-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-above-lines-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the number of pixels above lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-below-lines-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the number of pixels above lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-inside-wrap-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the number of pixels between wrapped lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects line wrap mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justification-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects paragraph justification")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property left-margin-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the left margin")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property indent-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects indentation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property strikethrough-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property right-margin-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the right margin")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property underline-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property background-full-height-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects background height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property language-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tabs-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects tabs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property invisible-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text visibility")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property paragraph-background-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the paragraph background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTextTagTable

(define-signal tag-changed
  (of-object "GtkTextTagTable")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextTag*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal tag-added
  (of-object "GtkTextTagTable")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextTag*" "p0")
  )
)

(define-signal tag-removed
  (of-object "GtkTextTagTable")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTextTag*" "p0")
  )
)

;; From GtkTextView

(define-signal set-scroll-adjustments
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkAdjustment*" "p0")
    '("GtkAdjustment*" "p1")
  )
)

(define-signal move-cursor
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
  )
)

(define-signal select-all
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal page-horizontally
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gboolean" "p1")
  )
)

(define-signal move-viewport
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkScrollStep" "p0")
    '("gint" "p1")
  )
)

(define-signal set-anchor
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-signal insert-at-cursor
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal delete-from-cursor
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkDeleteType" "p0")
    '("gint" "p1")
  )
)

(define-signal backspace
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-signal cut-clipboard
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-signal copy-clipboard
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-signal paste-clipboard
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-signal toggle-overwrite
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-signal populate-popup
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkMenu*" "p0")
  )
)

(define-signal toggle-cursor-visible
  (of-object "GtkTextView")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkTextView")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkTextView")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkTextView")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkTextView")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkTextView")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkTextView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkTextView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkTextView")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkTextView")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-above-lines
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Pixels of blank space above paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-below-lines
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Pixels of blank space below paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixels-inside-wrap
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Pixels of blank space between wrapped lines in a paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property editable
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property wrap-mode
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "Whether to wrap lines never, at word boundaries, or at character boundaries")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property justification
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "Left, right, or center justification")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property left-margin
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Width of the left margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property right-margin
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Width of the right margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property indent
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Amount to indent the paragraph, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tabs
  (of-object "GtkTextView")
  (prop-type "GParamBoxed")
  (docs "Custom tabs for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-visible
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "If the insertion cursor is shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property buffer
  (of-object "GtkTextView")
  (prop-type "GParamObject")
  (docs "The buffer which is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property overwrite
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether entered text overwrites existing contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accepts-tab
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether Tab will result in a tab character being entered")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToggleAction

(define-signal toggled
  (of-object "GtkToggleAction")
  (return-type "void")
  (when "first")
)

(define-property name
  (of-object "GtkToggleAction")
  (prop-type "GParamString")
  (docs "A unique name for the action.")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property label
  (of-object "GtkToggleAction")
  (prop-type "GParamString")
  (docs "The label used for menu items and buttons that activate this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property short-label
  (of-object "GtkToggleAction")
  (prop-type "GParamString")
  (docs "A shorter label that may be used on toolbar buttons.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip
  (of-object "GtkToggleAction")
  (prop-type "GParamString")
  (docs "A tooltip for this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkToggleAction")
  (prop-type "GParamString")
  (docs "The stock icon displayed in widgets representing this action.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkToggleAction")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-overflown
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, toolitem proxies for this action are represented in the toolbar overflow menu.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is considered important. When TRUE, toolitem proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hide-if-empty
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "When TRUE, empty menu proxies for this action are hidden.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "Whether the action is visible.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property action-group
  (of-object "GtkToggleAction")
  (prop-type "GParamObject")
  (docs "The GtkActionGroup this GtkAction is associated with, or NULL (for internal use).")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property draw-as-radio
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "Whether the proxies for this action look like radio action proxies")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkToggleAction")
  (prop-type "GParamBoolean")
  (docs "If the toggle action should be active in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToggleToolButton

(define-signal toggled
  (of-object "GtkToggleToolButton")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkToggleToolButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkToggleToolButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkToggleToolButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkToggleToolButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkToggleToolButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkToggleToolButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkToggleToolButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkToggleToolButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkToggleToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkToggleToolButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkToggleToolButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkToggleToolButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkToggleToolButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property visible-horizontal
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a horizontal orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-vertical
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is visible when the toolbar is in a vertical orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-important
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "Whether the toolbar item is considered important. When TRUE, toolbar buttons show text in GTK_TOOLBAR_BOTH_HORIZ mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkToggleToolButton")
  (prop-type "GParamString")
  (docs "Text to show in the item.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property label-widget
  (of-object "GtkToggleToolButton")
  (prop-type "GParamObject")
  (docs "Widget to use as the item label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property stock-id
  (of-object "GtkToggleToolButton")
  (prop-type "GParamString")
  (docs "The stock icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkToggleToolButton")
  (prop-type "GParamString")
  (docs "The name of the themed icon displayed on the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-widget
  (of-object "GtkToggleToolButton")
  (prop-type "GParamObject")
  (docs "Icon widget to display in the item")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkToggleToolButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTooltip

;; From GtkTooltips

(define-property user-data
  (of-object "GtkTooltips")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTreeSelection

(define-signal changed
  (of-object "GtkTreeSelection")
  (return-type "void")
  (when "first")
)

;; From GtkTreeModelFilter

(define-property child-model
  (of-object "GtkTreeModelFilter")
  (prop-type "GParamObject")
  (docs "The model for the filtermodel to filter")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property virtual-root
  (of-object "GtkTreeModelFilter")
  (prop-type "GParamBoxed")
  (docs "The virtual root (relative to the child model) for this filtermodel")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkTreeStore

;; From GtkTreeView

(define-signal set-scroll-adjustments
  (of-object "GtkTreeView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkAdjustment*" "p0")
    '("GtkAdjustment*" "p1")
  )
)

(define-signal row-activated
  (of-object "GtkTreeView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTreePath*" "p0")
    '("GtkTreeViewColumn*" "p1")
  )
)

(define-signal test-expand-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal test-collapse-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal row-expanded
  (of-object "GtkTreeView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal row-collapsed
  (of-object "GtkTreeView")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal columns-changed
  (of-object "GtkTreeView")
  (return-type "void")
  (when "last")
)

(define-signal cursor-changed
  (of-object "GtkTreeView")
  (return-type "void")
  (when "last")
)

(define-signal move-cursor
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
  )
)

(define-signal select-all
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
)

(define-signal unselect-all
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
)

(define-signal select-cursor-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal toggle-cursor-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
)

(define-signal expand-collapse-cursor-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
    '("gboolean" "p1")
    '("gboolean" "p2")
  )
)

(define-signal select-cursor-parent
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
)

(define-signal start-interactive-search
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (when "last")
)

(define-property user-data
  (of-object "GtkTreeView")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkTreeView")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkTreeView")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkTreeView")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkTreeView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkTreeView")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkTreeView")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkTreeView")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "The model for the tree view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hadjustment
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "Horizontal Adjustment for the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vadjustment
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "Vertical Adjustment for the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property headers-visible
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Show the column header buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property headers-clickable
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Column headers respond to click events")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property expander-column
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "Set the column for the expander column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reorderable
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "View is reorderable")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rules-hint
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Set a hint to the theme engine to draw rows in alternating colors")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-search
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "View allows user to search through columns interactively")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property search-column
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "Model column to search through when searching through code")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fixed-height-mode
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Speeds up GtkTreeView by assuming that all rows have the same height")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hover-selection
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the selection should follow the pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hover-expand
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether rows should be expanded/collapsed when the pointer moves over them")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-expanders
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "View has expanders")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property level-indentation
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "Extra indentation for each level")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rubber-banding
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether to enable selection of multiple items by dragging the mouse pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-grid-lines
  (of-object "GtkTreeView")
  (prop-type "GParamEnum")
  (docs "Whether grid lines should be drawn in the tree view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-tree-lines
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether tree lines should be drawn in the tree view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTreeViewColumn

(define-signal clicked
  (of-object "GtkTreeViewColumn")
  (return-type "void")
  (when "last")
)

(define-property user-data
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether to display the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Column is user-resizable")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Current width of the column")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property spacing
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Space which is inserted between cells")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sizing
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamEnum")
  (docs "Resize mode of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fixed-width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Current fixed width of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property min-width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Minimum allowed width of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Maximum allowed width of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamString")
  (docs "Title to appear in column header")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property expand
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Column gets share of extra width allocated to the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property clickable
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether the header can be clicked")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property widget
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamObject")
  (docs "Widget to put in column header button instead of column title")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamFloat")
  (docs "X Alignment of the column header text or widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reorderable
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether the column can be reordered around the headers")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-indicator
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether to show a sort indicator")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-order
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamEnum")
  (docs "Sort direction the sort indicator should indicate")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkUIManager

(define-signal add-widget
  (of-object "GtkUIManager")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal actions-changed
  (of-object "GtkUIManager")
  (return-type "void")
  (when "first")
)

(define-signal connect-proxy
  (of-object "GtkUIManager")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkAction*" "p0")
    '("GtkWidget*" "p1")
  )
)

(define-signal disconnect-proxy
  (of-object "GtkUIManager")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkAction*" "p0")
    '("GtkWidget*" "p1")
  )
)

(define-signal pre-activate
  (of-object "GtkUIManager")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkAction*" "p0")
  )
)

(define-signal post-activate
  (of-object "GtkUIManager")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkAction*" "p0")
  )
)

(define-property add-tearoffs
  (of-object "GtkUIManager")
  (prop-type "GParamBoolean")
  (docs "Whether tearoff menu items should be added to menus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ui
  (of-object "GtkUIManager")
  (prop-type "GParamString")
  (docs "An XML string describing the merged UI")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkViewport

(define-signal set-scroll-adjustments
  (of-object "GtkViewport")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkAdjustment*" "p0")
    '("GtkAdjustment*" "p1")
  )
)

(define-property user-data
  (of-object "GtkViewport")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkViewport")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkViewport")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkViewport")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkViewport")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkViewport")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkViewport")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkViewport")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkViewport")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkViewport")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkViewport")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkViewport")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkViewport")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property hadjustment
  (of-object "GtkViewport")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that determines the values of the horizontal position for this viewport")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vadjustment
  (of-object "GtkViewport")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that determines the values of the vertical position for this viewport")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property shadow-type
  (of-object "GtkViewport")
  (prop-type "GParamEnum")
  (docs "Determines how the shadowed box around the viewport is drawn")
  (readable #t)
  (writable #t)
  (construct-only #f)
)


;; From GtkVolumeButton

(define-property user-data
  (of-object "GtkVolumeButton")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkVolumeButton")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkVolumeButton")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkVolumeButton")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkVolumeButton")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkVolumeButton")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkVolumeButton")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkVolumeButton")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkVolumeButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkVolumeButton")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkVolumeButton")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkVolumeButton")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkVolumeButton")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkVolumeButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image
  (of-object "GtkVolumeButton")
  (prop-type "GParamObject")
  (docs "Child widget to appear next to the button text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property relief
  (of-object "GtkVolumeButton")
  (prop-type "GParamEnum")
  (docs "The border relief style")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-underline
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-stock
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "If set, the label is used to pick a stock item instead of being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-click
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button grabs focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property xalign
  (of-object "GtkVolumeButton")
  (prop-type "GParamFloat")
  (docs "Horizontal position of child in available space. 0.0 is left aligned, 1.0 is right aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property yalign
  (of-object "GtkVolumeButton")
  (prop-type "GParamFloat")
  (docs "Vertical position of child in available space. 0.0 is top aligned, 1.0 is bottom aligned")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property image-position
  (of-object "GtkVolumeButton")
  (prop-type "GParamEnum")
  (docs "The position of the image relative to the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property value
  (of-object "GtkVolumeButton")
  (prop-type "GParamDouble")
  (docs "The value of the scale")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property size
  (of-object "GtkVolumeButton")
  (prop-type "GParamEnum")
  (docs "The icon size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property adjustment
  (of-object "GtkVolumeButton")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this scale button object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icons
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoxed")
  (docs "List of icon names")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkWidget

(define-signal composited-changed
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
)

(define-signal show
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
)

(define-signal hide
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
)

(define-signal map
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
)

(define-signal unmap
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
)

(define-signal realize
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
)

(define-signal unrealize
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
)

(define-signal size-request
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkRequisition*" "p0")
  )
)

(define-signal size-allocate
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkAllocation*" "p0")
  )
)

(define-signal state-changed
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkStateType" "p0")
  )
)

(define-signal parent-set
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal hierarchy-changed
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal style-set
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkStyle*" "p0")
  )
)

(define-signal direction-changed
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GtkTextDirection" "p0")
  )
)

(define-signal grab-notify
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal child-notify
  (of-object "GtkWidget")
  (return-type "void")
  (when "first")
  (parameters
    '("GParamSpec*" "p0")
  )
)

(define-signal mnemonic-activate
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal grab-focus
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
)

(define-signal focus
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal move-focus
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEvent*" "p0")
  )
)

(define-signal event-after
  (of-object "GtkWidget")
  (return-type "void")
  (when "unknown")
  (parameters
    '("GdkEvent*" "p0")
  )
)

(define-signal button-press-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventButton*" "p0")
  )
)

(define-signal button-release-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventButton*" "p0")
  )
)

(define-signal scroll-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventScroll*" "p0")
  )
)

(define-signal motion-notify-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventMotion*" "p0")
  )
)

(define-signal keynav-failed
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal delete-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventAny*" "p0")
  )
)

(define-signal destroy-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEvent*" "p0")
  )
)

(define-signal expose-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventExpose*" "p0")
  )
)

(define-signal key-press-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventKey*" "p0")
  )
)

(define-signal key-release-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventKey*" "p0")
  )
)

(define-signal enter-notify-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventCrossing*" "p0")
  )
)

(define-signal leave-notify-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventCrossing*" "p0")
  )
)

(define-signal configure-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventConfigure*" "p0")
  )
)

(define-signal focus-in-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventFocus*" "p0")
  )
)

(define-signal focus-out-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventFocus*" "p0")
  )
)

(define-signal map-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventAny*" "p0")
  )
)

(define-signal unmap-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventAny*" "p0")
  )
)

(define-signal property-notify-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventProperty*" "p0")
  )
)

(define-signal selection-clear-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventSelection*" "p0")
  )
)

(define-signal selection-request-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventSelection*" "p0")
  )
)

(define-signal selection-notify-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventSelection*" "p0")
  )
)

(define-signal selection-received
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkSelectionData*" "p0")
    '("guint" "p1")
  )
)

(define-signal selection-get
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkSelectionData*" "p0")
    '("guint" "p1")
    '("guint" "p2")
  )
)

(define-signal proximity-in-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventProximity*" "p0")
  )
)

(define-signal proximity-out-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventProximity*" "p0")
  )
)

(define-signal drag-leave
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
    '("guint" "p1")
  )
)

(define-signal drag-begin
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
  )
)

(define-signal drag-end
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
  )
)

(define-signal drag-data-delete
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
  )
)

(define-signal drag-failed
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
    '("GtkDragResult" "p1")
  )
)

(define-signal drag-motion
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
    '("gint" "p1")
    '("gint" "p2")
    '("guint" "p3")
  )
)

(define-signal drag-drop
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
    '("gint" "p1")
    '("gint" "p2")
    '("guint" "p3")
  )
)

(define-signal drag-data-get
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
    '("GtkSelectionData*" "p1")
    '("guint" "p2")
    '("guint" "p3")
  )
)

(define-signal drag-data-received
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkDragContext*" "p0")
    '("gint" "p1")
    '("gint" "p2")
    '("GtkSelectionData*" "p3")
    '("guint" "p4")
    '("guint" "p5")
  )
)

(define-signal visibility-notify-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventVisibility*" "p0")
  )
)

(define-signal client-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventClient*" "p0")
  )
)

(define-signal no-expose-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventAny*" "p0")
  )
)

(define-signal window-state-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEventWindowState*" "p0")
  )
)

(define-signal grab-broken-event
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEvent*" "p0")
  )
)

(define-signal query-tooltip
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
    '("GtkTooltip*" "p3")
  )
)

(define-signal popup-menu
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
)

(define-signal show-help
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GtkWidgetHelpType" "p0")
  )
)

(define-signal accel-closures-changed
  (of-object "GtkWidget")
  (return-type "void")
  (when "unknown")
)

(define-signal screen-changed
  (of-object "GtkWidget")
  (return-type "void")
  (when "last")
  (parameters
    '("GdkScreen*" "p0")
  )
)

(define-signal can-activate-accel
  (of-object "GtkWidget")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("guint" "p0")
  )
)

(define-property user-data
  (of-object "GtkWidget")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkWidget")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkWidget")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkWidget")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkWidget")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkWindow

(define-signal set-focus
  (of-object "GtkWindow")
  (return-type "void")
  (when "last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal frame-event
  (of-object "GtkWindow")
  (return-type "gboolean")
  (when "last")
  (parameters
    '("GdkEvent*" "p0")
  )
)

(define-signal activate-focus
  (of-object "GtkWindow")
  (return-type "void")
  (when "last")
)

(define-signal activate-default
  (of-object "GtkWindow")
  (return-type "void")
  (when "last")
)

(define-signal keys-changed
  (of-object "GtkWindow")
  (return-type "void")
  (when "first")
)

(define-property user-data
  (of-object "GtkWindow")
  (prop-type "GParamPointer")
  (docs "Anonymous User Data Pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property name
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property parent
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget. Must be a Container widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkWindow")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property height-request
  (of-object "GtkWindow")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sensitive
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property app-paintable
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the application will paint directly on the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-focus
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-focus
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-focus
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the focus widget within the toplevel")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property can-default
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can be the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-default
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property receives-default
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property composite-child
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is part of a composite widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property style
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The style of the widget, which contains information about how it will look (colors etc)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property events
  (of-object "GtkWindow")
  (prop-type "GParamFlags")
  (docs "The event mask that decides what kind of GdkEvents this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extension-events
  (of-object "GtkWindow")
  (prop-type "GParamEnum")
  (docs "The mask that decides what kind of extension events this widget gets")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property no-show-all
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether gtk_widget_show_all() should not affect this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-markup
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tooltip-text
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property border-width
  (of-object "GtkWindow")
  (prop-type "GParamUInt")
  (docs "The width of the empty border outside the containers children")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-mode
  (of-object "GtkWindow")
  (prop-type "GParamEnum")
  (docs "Specify how resize events are handled")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "Can be used to add a new child to the container")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property type
  (of-object "GtkWindow")
  (prop-type "GParamEnum")
  (docs "The type of the window")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property title
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property startup-id
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property role
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "Unique identifier for the window to be used when restoring a session")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-shrink
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window has no mimimum size. Setting this to TRUE is 99% of the time a bad idea")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property allow-grow
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can expand the window beyond its minimum size")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property modal
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property window-position
  (of-object "GtkWindow")
  (prop-type "GParamEnum")
  (docs "The initial position of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-width
  (of-object "GtkWindow")
  (prop-type "GParamInt")
  (docs "The default width of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-height
  (of-object "GtkWindow")
  (prop-type "GParamInt")
  (docs "The default height of the window, used when initially showing the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property destroy-with-parent
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "Icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property screen
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The screen where this window will be displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property type-hint
  (of-object "GtkWindow")
  (prop-type "GParamEnum")
  (docs "Hint to help the desktop environment understand what kind of window this is and how to treat it.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-taskbar-hint
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the task bar.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property skip-pager-hint
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should not be in the pager.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property urgency-hint
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should be brought to the user's attention.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property accept-focus
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-on-map
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should receive the input focus when mapped.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property deletable
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property gravity
  (of-object "GtkWindow")
  (prop-type "GParamEnum")
  (docs "The window gravity of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property transient-for
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property opacity
  (of-object "GtkWindow")
  (prop-type "GParamDouble")
  (docs "The opacity of the window, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-toplevel-focus
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the input focus is within this GtkWindow")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

