<root>
<function name="gtk_tree_view_get_enable_search">
<description>
Return value: whether or not to let the user search interactively

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> whether or not to let the user search interactively
</return>
</function>

<function name="gtk_page_setup_get_paper_height">
<description>
Return value: the paper height.

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the paper height.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_set_tooltip_row">
<description>
Sets the tip area of @tooltip to be the area covered by the row at @path.
See also gtk_tooltip_set_tip_area().

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_has_icon">
<description>
Checks whether an icon theme includes an icon
for a particular name.


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the name of an icon
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @icon_theme includes an
icon for @icon_name.

Since: 2.4
</return>
</function>

<function name="gtk_action_group_add_radio_actions">
<description>
This is a convenience routine to create a group of radio actions and
add them to the action group. 

The &quot;changed&quot; signal of the first radio action is connected to the 
@on_change callback and the accel paths of the actions are set to 
&amp;lt;literal&amp;gt;&amp;lt;Actions&amp;gt;/&amp;lt;replaceable&amp;gt;group-name&amp;lt;/replaceable&amp;gt;/&amp;lt;replaceable&amp;gt;action-name&amp;lt;/replaceable&amp;gt;&amp;lt;/literal&amp;gt;.  

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of radio action descriptions
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the number of entries
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the action to activate initially, or -1 if
no action should be activated
</parameter_description>
</parameter>
<parameter name="on_change">
<parameter_description> the callback to connect to the changed signal
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the action callbacks
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_set_with_owner">
<description>
Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.

The difference between this function and gtk_clipboard_set_with_data()
is that instead of an generic @user_data pointer, a #GObject is passed
in. 


</description>
<parameters>
<parameter name="clipboard">
<parameter_description>  a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description>    array containing information about the available forms for the
clipboard data
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description>  number of elements in @targets
</parameter_description>
</parameter>
<parameter name="get_func">
<parameter_description>   function to call to get the actual clipboard data
</parameter_description>
</parameter>
<parameter name="clear_func">
<parameter_description> when the clipboard contents are set again, this function will
be called, and @get_func will not be subsequently called.
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description>      an object that &quot;owns&quot; the data. This object will be passed
to the callbacks when called. 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the clipboard data succeeded. If setting
the clipboard data failed the provided callback functions
will be ignored.
</return>
</function>

<function name="gtk_combo_box_entry_new">
<description>
Creates a new #GtkComboBoxEntry which has a #GtkEntry as child. After
construction, you should set a model using gtk_combo_box_set_model() and a
text_column * using gtk_combo_box_entry_set_text_column().


</description>
<parameters>
</parameters>
<return> A new #GtkComboBoxEntry.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_forward_sentence_end">
<description>
Moves forward to the next sentence end. (If @iter is at the end of
a sentence, moves to the next end of sentence.)  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_entry_get_has_frame">
<description>
Gets the value set by gtk_entry_set_has_frame().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> whether the entry has a beveled frame
</return>
</function>

<function name="gtk_button_new_with_mnemonic">
<description>
Creates a new #GtkButton containing a label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use &apos;__&apos; (two 
underscores). The first underlined character represents a keyboard 
accelerator called a mnemonic.
Pressing Alt and that key activates the button.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkButton
</return>
</function>

<function name="GtkRadioMenuItem">
<description>
The radio menu item whose group this widget belongs to.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_text">
<description>
Fetches the text from a label widget, as displayed on the
screen. This does not include any embedded underlines
indicating mnemonics or Pango markup. (See gtk_label_get_label())


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the text in the label widget. This is the internal
string used by the label, and must not be modified.
</return>
</function>

<function name="gtk_recent_manager_lookup_item">
<description>
Searches for a URI inside the recently used resources list, and
Return value: a #GtkRecentInfo structure containing information

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GtkRecentInfo structure containing information
about the resource pointed by @uri, or %NULL if the URI was
not registered in the recently used resources list.  Free with
gtk_recent_info_unref().

Since: 2.10
</return>
</function>

<function name="gtk_dialog_set_default_response">
<description>
Sets the last widget in the dialog&apos;s action area with the given @response_id
as the default widget for the dialog. Pressing &quot;Enter&quot; normally activates
the default widget.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> a response ID
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_set_property">
<description>
Sets a child property for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set the property to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_colormap">
<description>
Gets the colormap that will be used to render @widget. No reference will
be added to the returned colormap; it should not be unreferenced.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the colormap used by @widget
</return>
</function>

<function name="gtk_color_selection_get_current_alpha">
<description>
Return value: an integer between 0 and 65535.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> an integer between 0 and 65535.
</return>
</function>

<function name="gtk_ui_manager_insert_action_group">
<description>
Inserts an action group into the list of action groups associated 
with @self. Actions in earlier groups hide actions with the same 
name in later groups. 

Since: 2.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
<parameter name="action_group">
<parameter_description> the action group to be inserted
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position at which the group will be inserted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_preview_widget">
<description>
Gets the current preview widget; see
gtk_file_chooser_set_preview_widget().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the current preview widget, or %NULL

Since: 2.4
</return>
</function>

<function name="gtk_text_view_get_accepts_tab">
<description>
Return value: %TRUE if pressing the Tab key inserts a tab character, 

</description>
<parameters>
<parameter name="text_view">
<parameter_description> A #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pressing the Tab key inserts a tab character, 
%FALSE if pressing the Tab key moves the keyboard focus.

Since: 2.4
</return>
</function>

<function name="gtk_window_set_geometry_hints">
<description>
This function sets up hints about how a window can be resized by
the user.  You can set a minimum and maximum size; allowed resize
increments (e.g. for xterm, you can only resize by the size of a
character); aspect ratios; and more. See the #GdkGeometry struct.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="geometry_widget">
<parameter_description> widget the geometry hints will be applied to
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> struct containing geometry information
</parameter_description>
</parameter>
<parameter name="geom_mask">
<parameter_description> mask indicating which struct fields should be paid attention to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_reorderable">
<description>
Sets whether the notebook tab can be reordered
via drag and drop or not.

Since: 2.10

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child #GtkWidget
</parameter_description>
</parameter>
<parameter name="reorderable">
<parameter_description> whether the tab is reorderable or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkTextBuffer">
<description>
The end_user_action signal is emitted at the end of a single
user-visible operation #GtkTextBuffer.

See also: 
gtk_text_buffer_end_user_action(),
gtk_text_buffer_insert_interactive(),
gtk_text_buffer_insert_range_interactive(),
gtk_text_buffer_delete_interactive(),
gtk_text_buffer_backspace(),
gtk_text_buffer_delete_selection(),
gtk_text_buffer_backspace().

</description>
<parameters>
<parameter name="textbuffer">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_size">
<description>
Sets the default size of a window. If the window&apos;s &quot;natural&quot; size
(its size request) is larger than the default, the default will be
ignored. More generally, if the default size does not obey the
geometry hints for the window (gtk_window_set_geometry_hints() can
be used to set these explicitly), the default size will be clamped
to the nearest permitted size.

Unlike gtk_widget_set_size_request(), which sets a size request for
a widget and thus would keep users from shrinking the window, this
function only sets the initial size, just as if the user had
resized the window themselves. Users can still shrink the window
again as they normally would. Setting a default size of -1 means to
use the &quot;natural&quot; default size (the size request of the window).

For more control over a window&apos;s initial size and how resizing works,
investigate gtk_window_set_geometry_hints().

For some uses, gtk_window_resize() is a more appropriate function.
gtk_window_resize() changes the current size of the window, rather
than the size to be used on initial display. gtk_window_resize() always
affects the window itself, not the geometry widget.

The default size of a window only affects the first time a window is
shown; if a window is hidden and re-shown, it will remember the size
it had prior to hiding, rather than using the default size.

Windows can&apos;t actually be 0x0 in size, they must be at least 1x1, but
passing 0 for @width and @height is OK, resulting in a 1x1 default size.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width in pixels, or -1 to unset the default width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height in pixels, or -1 to unset the default height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkCellRendererCombo">
<description>
If %TRUE, the cell renderer will include an entry and allow to enter 
values other than the ones in the popup list. 

Since: 2.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_set_mark">
<description>
Move the mark to the given position, if not @should_exist, 
create the mark.


</description>
<parameters>
<parameter name="buffer">
<parameter_description>       a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark_name">
<parameter_description>    name of the mark
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>         location for the mark
</parameter_description>
</parameter>
<parameter name="left_gravity">
<parameter_description> if the mark is created by this function, gravity for 
the new mark
</parameter_description>
</parameter>
<parameter name="should_exist">
<parameter_description> if %TRUE, warn if the mark does not exist, and return
immediately
</parameter_description>
</parameter>
</parameters>
<return> mark
</return>
</function>

<function name="gtk_dialog_run">
<description>
Blocks in a recursive main loop until the @dialog either emits the
#GtkDialog::response signal, or is destroyed. If the dialog is 
destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns 
#GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the 
::response signal emission.

Before entering the recursive main loop, gtk_dialog_run() calls
gtk_widget_show() on the dialog for you. Note that you still
need to show any children of the dialog yourself.

During gtk_dialog_run(), the default behavior of #GtkWidget::delete-event 
is disabled; if the dialog receives ::delete_event, it will not be
destroyed as windows usually are, and gtk_dialog_run() will return
#GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog 
will be modal. You can force gtk_dialog_run() to return at any time by
calling gtk_dialog_response() to emit the ::response signal. Destroying 
the dialog during gtk_dialog_run() is a very bad idea, because your 
post-run code won&apos;t know whether the dialog was destroyed or not.

After gtk_dialog_run() returns, you are responsible for hiding or
destroying the dialog if you wish to do so.

Typical usage of this function might be:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gint result = gtk_dialog_run (GTK_DIALOG (dialog));
switch (result)
{
case GTK_RESPONSE_ACCEPT:
do_application_specific_something (&amp;lt;!-- --&amp;gt;);
break;
default:
do_nothing_since_dialog_was_cancelled (&amp;lt;!-- --&amp;gt;);
break;
}
gtk_widget_destroy (dialog);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Note that even though the recursive main loop gives the effect of a
modal dialog (it prevents the user from interacting with other 
windows in the same window group while the dialog is run), callbacks 
such as timeouts, IO channel watches, DND drops, etc, &amp;lt;emphasis&amp;gt;will&amp;lt;/emphasis&amp;gt; 
be triggered during a gtk_dialog_run() call.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
</parameters>
<return> response ID
</return>
</function>

<function name="gtk_accel_group_new">
<description>
Creates a new #GtkAccelGroup. 

</description>
<parameters>
</parameters>
<return> a new #GtkAccelGroup object
</return>
</function>

<function name="gtk_notebook_remove_page">
<description>
Removes a page from the notebook given its index
in the notebook.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook.
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> the index of a notebook page, starting
from 0. If -1, the last page will
be removed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scale_button_new">
<description>
Creates a #GtkScaleButton, with a range between @min and @max, with
a stepping of @step.


</description>
<parameters>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> the minimum value of the scale (usually 0)
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum value of the scale (usually 100)
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> the stepping of value when a scroll-wheel event,
or up/down arrow event occurs (usually 2)
</parameter_description>
</parameter>
<parameter name="icons">
<parameter_description> a %NULL-terminated array of icon names, or %NULL if
you want to set the list later with gtk_scale_button_set_icons()
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkScaleButton

Since: 2.12
</return>
</function>

<function name="gtk_recent_chooser_get_items">
<description>
Gets the list of recently used resources in form of #GtkRecentInfo objects.

The return value of this function is affected by the &quot;sort-type&quot; and
&quot;limit&quot; properties of @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated list of #GtkRecentInfo objects.  You should
use gtk_recent_info_unref() on every item of the list, and then free
the list itself using g_list_free().

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_set_orientation">
<description>
Sets the ::orientation property which determines whether the labels 
are drawn beside the icons instead of below.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the relative position of texts and icons 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_window_set_has_toplevel_focus">
<description>
Internal function that sets whether the keyboard focus for the
toplevel window (taking into account inter-process embedding.)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="has_toplevel_focus">
<parameter_description> %TRUE if the in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete_interactive">
<description>
Deletes all &amp;lt;emphasis&amp;gt;editable&amp;lt;/emphasis&amp;gt; text in the given range.
Calls gtk_text_buffer_delete() for each editable sub-range of
[@start,@end). @start and @end are revalidated to point to
the location of the last deleted range, or left untouched if
no text was deleted.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start_iter">
<parameter_description> start of range to delete
</parameter_description>
</parameter>
<parameter name="end_iter">
<parameter_description> end of range
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether some text was actually deleted
</return>
</function>

<function name="gtk_tree_view_get_columns">
<description>
Return value: A list of #GtkTreeViewColumn s

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkTreeViewColumn s
</return>
</function>

<function name="gtk_text_buffer_select_range">
<description>
This function moves the &quot;insert&quot; and &quot;selection_bound&quot; marks
simultaneously.  If you move them in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.

Since: 2.4

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="ins">
<parameter_description> where to put the &quot;insert&quot; mark
</parameter_description>
</parameter>
<parameter name="bound">
<parameter_description> where to put the &quot;selection_bound&quot; mark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_get_item">
<description>
Obtains the menu item which corresponds to @path. 

If the widget corresponding to @path is a menu item which opens a 
submenu, then the item is returned. If you are interested in the submenu, 
use gtk_item_factory_get_widget() instead.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to the menu item
</parameter_description>
</parameter>
</parameters>
<return> the menu item for the given path, or %NULL if @path doesn&apos;t
lead to a menu item
</return>
</function>

<function name="gtk_recent_info_get_uri">
<description>
Gets the URI of the resource.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the URI of the resource.  The returned string is
owned by the recent manager, and should not be freed.

Since: 2.10
</return>
</function>

<function name="gtk_file_system_win32_new">
<description>
Creates a new #GtkFileSystemWin32 object. #GtkFileSystemWin32
implements the #GtkFileSystem interface with direct access to
the filesystem using Windows API calls


</description>
<parameters>
</parameters>
<return> the new #GtkFileSystemWin32 object
</return>
</function>

<function name="gtk_container_get_focus_chain">
<description>
Retrieves the focus chain of the container, if one has been
set explicitly. If no focus chain has been explicitly
set, GTK+ computes the focus chain based on the positions
of the children. In that case, GTK+ stores %NULL in
@focusable_widgets and returns %FALSE.


</description>
<parameters>
<parameter name="container">
<parameter_description>         a #GtkContainer
</parameter_description>
</parameter>
<parameter name="focusable_widgets">
<parameter_description> location to store the focus chain of the
container, or %NULL. You should free this list
using g_list_free() when you are done with it, however
no additional reference count is added to the
individual widgets in the focus chain.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the focus chain of the container 
has been set explicitly.
</return>
</function>

<function name="gtk_tree_selection_select_all">
<description>
Selects all the nodes. @selection must be set to #GTK_SELECTION_MULTIPLE
mode.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_button_set_focus_on_click">
<description>
Sets whether the button will grab focus when it is clicked with the mouse.
Making mouse clicks not grab focus is useful in places like toolbars where
you don&apos;t want the keyboard focus removed from the main area of the
application.

Since: 2.10

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkFileChooserButton
</parameter_description>
</parameter>
<parameter name="focus_on_click">
<parameter_description> whether the button grabs focus when clicked with the mouse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_tree_view">
<description>
Return value: The tree view wherein @column has been inserted if any,

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> The tree view wherein @column has been inserted if any,
%NULL otherwise.

Since: 2.12
</return>
</function>

<function name="gtk_paint_expander">
<description>
Draws an expander as used in #GtkTreeView. @x and @y specify the
center the expander. The size of the expander is determined by the
&quot;expander-size&quot; style property of @widget.  (If widget is not
specified or doesn&apos;t have an &quot;expander-size&quot; property, an
unspecified default size will be used, since the caller doesn&apos;t
have sufficient information to position the expander, this is
likely not useful.) The expander is expander_size pixels tall
in the collapsed position and expander_size pixels wide in the
expanded position.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x position to draw the expander at
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y position to draw the expander at
</parameter_description>
</parameter>
<parameter name="expander_style">
<parameter_description> the style to draw the expander in; determines
whether the expander is collapsed, expanded, or in an
intermediate state.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_inside_word">
<description>
Determines whether @iter is inside a natural-language word (as
opposed to say inside some whitespace).  Word breaks are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango word break algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is inside a word
</return>
</function>

<function name="gtk_assistant_set_page_complete">
<description>
Sets whether @page contents are complete. This will make
@assistant update the buttons state to be able to continue the task.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
<parameter name="complete">
<parameter_description> the completeness status of the page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_get_property">
<description>
Gets the value of a child property for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a location to return the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_get_path">
<description>
Return value: A current path, or %NULL.

</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference
</parameter_description>
</parameter>
</parameters>
<return> A current path, or %NULL.
</return>
</function>

<function name="gtk_tree_view_convert_widget_to_bin_window_coords">
<description>
Converts widget coordinates to coordinates for the bin_window
(see gtk_tree_view_get_bin_window()).

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> X coordinate relative to the widget
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> Y coordinate relative to the widget
</parameter_description>
</parameter>
<parameter name="bx">
<parameter_description> return location for bin_window X coordinate
</parameter_description>
</parameter>
<parameter name="by">
<parameter_description> return location for bin_window Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_wrap_mode">
<description>
Gets the line wrapping for the view.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> the line wrap setting
</return>
</function>

<function name="gtk_window_mnemonic_activate">
<description>
Activates the targets associated with the mnemonic.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the mnemonic
</parameter_description>
</parameter>
<parameter name="modifier">
<parameter_description> the modifiers 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the activation is done. 
</return>
</function>

<function name="gtk_print_settings_get_use_color">
<description>
Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> whether to use color

Since: 2.10
</return>
</function>

<function name="gtk_draw_vline">
<description>
Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @window
using the given style and state.

Deprecated: Use gtk_paint_vline() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> the starting y coordinate
</parameter_description>
</parameter>
<parameter name="y2_">
<parameter_description> the ending y coordinate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_get_use_size">
<description>
Returns: whether the selected size is used in the label.

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
</parameters>
<return> whether the selected size is used in the label.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_get_search_position_func">
<description>
Return value: the currently used function for positioning the search dialog.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the currently used function for positioning the search dialog.

Since: 2.10
</return>
</function>

<function name="_gtk_file_chooser_install_properties">
<description>
Installs the necessary properties for a class implementing
#GtkFileChooser. A #GtkParamSpecOverride property is installed
for each property, using the values from the #GtkFileChooserProp
enumeration. The caller must make sure itself that the enumeration
values don&apos;t collide with some other property values they
are using.

</description>
<parameters>
<parameter name="klass">
<parameter_description> the class structure for a type deriving from #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_remove_action_group">
<description>
Removes an action group from the list of action groups associated 
with @self.

Since: 2.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
<parameter name="action_group">
<parameter_description> the action group to be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert_before">
<description>
Inserts a new row before @sibling. If @sibling is %NULL, then the row will 
be appended to the end of the list. @iter will be changed to point to this 
new row. The row will be empty after this function is called. To fill in 
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_map">
<description>
This function is only for use in widget implementations. Causes
a widget to be mapped if it isn&apos;t already.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_info_get_builtin_pixbuf">
<description>
Gets the built-in image for this icon, if any. To allow
GTK+ to use built in icon images, you must pass the
%GTK_ICON_LOOKUP_USE_BUILTIN to
gtk_icon_theme_lookup_icon().


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo structure
</parameter_description>
</parameter>
</parameters>
<return> the built-in image pixbuf, or %NULL. No
extra reference is added to the returned pixbuf, so if
you want to keep it around, you must use g_object_ref().
The returned image must not be modified.

Since: 2.4
</return>
</function>

<function name="gtk_menu_tool_button_new">
<description>
Creates a new #GtkMenuToolButton using @icon_widget as icon and
@label as label.


</description>
<parameters>
<parameter name="icon_widget">
<parameter_description> a widget that will be used as icon widget, or %NULL
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a string that will be used as label, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkMenuToolButton

Since: 2.6
</return>
</function>

<function name="gtk_widget_modify_cursor">
<description>
Sets the cursor color to use in a widget, overriding the
#GtkWidget:cursor-color and #GtkWidget:secondary-cursor-color
style properties. All other style values are left untouched. 
See also gtk_widget_modify_style().

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="primary">
<parameter_description> the color to use for primary cursor (does not need to be
allocated), or %NULL to undo the effect of previous calls to
of gtk_widget_modify_cursor().
</parameter_description>
</parameter>
<parameter name="secondary">
<parameter_description> the color to use for secondary cursor (does not need to be
allocated), or %NULL to undo the effect of previous calls to
of gtk_widget_modify_cursor().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_set_name">
<description>
Sets the human-readable name of the filter; this is the string
that will be displayed in the recently used resources selector
user interface if there is a selectable list of filters.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> then human readable name of @filter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_add_shortcut_folder">
<description>
Adds a folder to be displayed with the shortcut folders in a file chooser.
Note that shortcut folders do not get saved, as they are provided by the
application.  For example, you can use this to add a
&quot;/usr/share/mydrawprogram/Clipart&quot; folder to the volume list.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="folder">
<parameter_description> filename of the folder to add
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be added successfully, %FALSE
otherwise.  In the latter case, the @error will be set as appropriate.

Since: 2.4
</return>
</function>

<function name="gtk_selection_data_set_uris">
<description>
Sets the contents of the selection from a list of URIs.
The string is converted to the form determined by
@selection_data-&amp;gt;target.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="uris">
<parameter_description> a %NULL-terminated array of strings hilding URIs
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection was successfully set,
otherwise %FALSE.

Since: 2.6
</return>
</function>

<function name="gtk_tool_item_get_visible_vertical">
<description>
Return value: Whether @tool_item is visible when the toolbar is docked vertically

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem 
</parameter_description>
</parameter>
</parameters>
<return> Whether @tool_item is visible when the toolbar is docked vertically

Since: 2.4
</return>
</function>

<function name="gtk_paper_size_new">
<description>
Creates a new #GtkPaperSize object by parsing a 
&amp;lt;ulink url=&quot;ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf&quot;&amp;gt;PWG 5101.1-2002&amp;lt;/ulink&amp;gt;
paper name. 

If @name is %NULL, the default paper size is returned,
see gtk_paper_size_get_default().


</description>
<parameters>
<parameter name="name">
<parameter_description> a paper size name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPaperSize, use gtk_paper_size_free()
to free it

Since: 2.10
</return>
</function>

<function name="gtk_spin_button_set_numeric">
<description>
Sets the flag that determines if non-numeric text can be typed into
the spin button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="numeric">
<parameter_description> flag indicating if only numeric entry is allowed. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_set_spacing">
<description>
Sets the spacing field of @expander, which is the number of pixels to
place between expander and the child.

Since: 2.4

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> distance between the expander and child in pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_relief_style">
<description>
Return value: The relief style of buttons on @toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> The relief style of buttons on @toolbar.

Since: 2.4
</return>
</function>

<function name="gtk_draw_box">
<description>
Draws a box on @window with the given parameters.

Deprecated: Use gtk_paint_box() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_insert_with_values">
<description>
Creates a new row at @position.  @iter will be changed to point to this
new row.  If @position is larger than the number of rows on the list, then
the new row will be appended to the list.  The row will be filled with
the values given to this function.

Calling
&amp;lt;literal&amp;gt;gtk_tree_store_insert_with_values (tree_store, iter, position, ...)&amp;lt;/literal&amp;gt;
has the same effect as calling
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_tree_store_insert (tree_store, iter, position);
gtk_tree_store_set (tree_store, iter, ...);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;
with the different that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and if the tree store
is sorted, rows_reordered.  Since emitting the rows_reordered signal
repeatedly can affect the performance of the program,
gtk_tree_store_insert_with_values() should generally be preferred when
inserting rows in a sorted tree store.

Since: 2.10

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set the new row, or %NULL.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_window_type">
<description>
Usually used to find out which window an event corresponds to.
If you connect to an event signal on @text_view, this function
should be called on &amp;lt;literal&amp;gt;event-&amp;gt;window&amp;lt;/literal&amp;gt; to
see which window it was.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a window type
</parameter_description>
</parameter>
</parameters>
<return> the window type.
</return>
</function>

<function name="gtk_accel_map_load_fd">
<description>
Filedescriptor variant of gtk_accel_map_load().

Note that the file descriptor will not be closed by this function.

</description>
<parameters>
<parameter name="fd">
<parameter_description> a valid readable file descriptor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_indent">
<description>
Gets the default indentation of paragraphs in @text_view.
Tags in the view&apos;s buffer may override the default.
The indentation may be negative.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> number of pixels of indentation
</return>
</function>

<function name="gtk_action_is_visible">
<description>
Return value: %TRUE if the action and its associated action group 

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the action and its associated action group 
are both visible.

Since: 2.4
</return>
</function>

<function name="gtk_print_context_create_pango_layout">
<description>
Creates a new #PangoLayout that is suitable for use
with the #GtkPrintContext.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> a new Pango layout for @context

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_backward_visible_lines">
<description>
Moves @count visible lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of lines to move backward
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable

Since: 2.8
</return>
</function>

<function name="gtk_style_set_background">
<description>
Sets the background of @window to the background color or pixmap
specified by @style for the given state.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert">
<description>
Creates a new row at @position.  @iter will be changed to point to this new
row.  If @position is larger than the number of rows on the list, then the
new row will be appended to the list. The row will be empty after this
function is called.  To fill in values, you need to call 
gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_settings_get_for_screen">
<description>
Gets the #GtkSettings object for @screen, creating it if necessary.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> a #GtkSettings object.

Since: 2.2
</return>
</function>

<function name="gtk_color_selection_set_has_opacity_control">
<description>
Sets the @colorsel to use or not use opacity.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="has_opacity">
<parameter_description> %TRUE if @colorsel can set the opacity, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unmap">
<description>
This function is only for use in widget implementations. Causes
a widget to be unmapped if it&apos;s currently mapped.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_new_with_mnemonic">
<description>
Creates a new #GtkToggleButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.

</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkToggleButton
</return>
</function>

<function name="gtk_image_get_pixmap">
<description>
Gets the pixmap and mask being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXMAP (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixmap and mask.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> location to store the pixmap, or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store the mask, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_arrow">
<description>
Draws an arrow in the given rectangle on @window using the given 
parameters. @arrow_type determines the direction of the arrow.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="arrow_type">
<parameter_description> the type of arrow to draw
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if the arrow tip should be filled
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle to draw the arrow in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set_valuesv">
<description>
A variant of gtk_list_store_set_valist() which
takes the columns and values as two arrays, instead of
varargs. This function is mainly intended for 
language-bindings and in case the number of columns to
change is not known until run-time.

Since: 2.12

</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> an array of column numbers
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> an array of GValues 
</parameter_description>
</parameter>
<parameter name="n_values">
<parameter_description> the length of the @columns and @values arrays
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_deleted">
<description>
Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the &quot;row_deleted&quot; signal.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GObject
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path position that was deleted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_view_new_with_markup">
<description>
Creates a new #GtkCellView widget, adds a #GtkCellRendererText 
to it, and makes its show @markup. The text can text can be
marked up with the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text 
markup language&amp;lt;/link&amp;gt;.


</description>
<parameters>
<parameter name="markup">
<parameter_description> the text to display in the cell view
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkCellView widget.

Since: 2.6
</return>
</function>

<function name="gtk_tree_view_set_enable_search">
<description>
If @enable_search is set, then the user can type in text to search through
the tree interactively (this is sometimes called &quot;typeahead find&quot;).

Note that even if this is %FALSE, the user can still initiate a search 
using the &quot;start-interactive-search&quot; key binding.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="enable_search">
<parameter_description> %TRUE, if the user can search interactively
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_model">
<description>
Return value: A #GtkTreeModel, or %NULL if none is currently being used.

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeModel, or %NULL if none is currently being used.

Since: 2.6 
</return>
</function>

<function name="gtk_rc_reparse_all_for_settings">
<description>
If the modification time on any previously read file
for the given #GtkSettings has changed, discard all style information
and then reread all previously read RC files.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
<parameter name="force_load">
<parameter_description> load whether or not anything changed
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the files were reread.
</return>
</function>

<function name="gtk_tree_sortable_set_sort_func">
<description>
Sets the comparison function used when sorting to be @sort_func.  If the
current sort column id of @sortable is the same as @sort_column_id, then the
model will sort using this function.

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> the sort column id to set the function for
</parameter_description>
</parameter>
<parameter name="sort_func">
<parameter_description> The comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to @sort_func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier of @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_proxy_menu_item">
<description>
Sets the #GtkMenuItem used in the toolbar overflow menu. The
@menu_item_id is used to identify the caller of this function and
should also be used with gtk_tool_item_get_proxy_menu_item().

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem:
</parameter_description>
</parameter>
<parameter name="menu_item_id">
<parameter_description> a string used to identify @menu_item
</parameter_description>
</parameter>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem to be used in the overflow menu
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_usize">
<description>
Sets the minimum size of a widget; that is, the widget&apos;s size
request will be @width by @height. You can use this function to
force a widget to be either larger or smaller than it is. The
strange &quot;usize&quot; name dates from the early days of GTK+, and derives
from X Window System terminology. In many cases,
gtk_window_set_default_size() is a better choice for toplevel
windows than this function; setting the default size will still
allow users to shrink the window. Setting the usize will force them
to leave the window at least as large as the usize. When dealing
with window sizes, gtk_window_set_geometry_hints() can be a useful
function as well.

Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it&apos;s
basically impossible to hardcode a size that will always be
correct.

Deprecated: Use gtk_widget_set_size_request() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> minimum width, or -1 to unset
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> minimum height, or -1 to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_menu_label">
<description>
Retrieves the menu label widget of the page containing @child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget contained in a page of @notebook
</parameter_description>
</parameter>
</parameters>
<return> the menu label, or %NULL if the
notebook page does not have a menu label other
than the default (the tab label).
</return>
</function>

<function name="gtk_recent_chooser_menu_new">
<description>
Creates a new #GtkRecentChooserMenu widget.

This kind of widget shows the list of recently used resources as
a menu, each item as a menu item.  Each item inside the menu might
have an icon, representing its MIME type, and a number, for mnemonic
access.

This widget implements the #GtkRecentChooser interface.

This widget creates its own #GtkRecentManager object.  See the
gtk_recent_chooser_menu_new_for_manager() function to know how to create
a #GtkRecentChooserMenu widget bound to another #GtkRecentManager object.


</description>
<parameters>
</parameters>
<return> a new #GtkRecentChooserMenu

Since: 2.10
</return>
</function>

<function name="gtk_cell_layout_reorder">
<description>
Re-inserts @cell at @position. Note that @cell has already to be packed
into @cell_layout for this to function properly.

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer to reorder.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> New position to insert @cell at.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_new_with_mnemonic">
<description>
Creates a new expander using @label as the text of the label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use &apos;__&apos; (two 
underscores). The first underlined character represents a keyboard 
accelerator called a mnemonic.
Pressing Alt and that key activates the button.


</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the label with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkExpander widget.

Since: 2.4
</return>
</function>

<function name="gtk_image_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkImageMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the menu item, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImageMenuItem
</return>
</function>

<function name="gtk_tool_button_set_label_widget">
<description>
Sets @label_widget as the widget that will be used as the label
for @button. If @label_widget is %NULL the &quot;label&quot; property is used
as label. If &quot;label&quot; is also %NULL, the label in the stock item
determined by the &quot;stock_id&quot; property is used as label. If
&quot;stock_id&quot; is also %NULL, @button does not have a label.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
<parameter name="label_widget">
<parameter_description> the widget used as label, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_attributes">
<description>
Gets the attribute list that was set on the label using
gtk_label_set_attributes(), if any. This function does
not reflect attributes that come from the labels markup
(see gtk_label_set_markup()). If you want to get the
effective attributes for the label, use
pango_layout_get_attribute (gtk_label_get_layout (label)).


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the attribute list, or %NULL if none was set.
</return>
</function>

<function name="gtk_about_dialog_set_website_label">
<description>
Sets the label to be used for the website link.
It defaults to the website URL.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="website_label">
<parameter_description> the label used for the website link
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_create_item">
<description>
Creates an item for @entry.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="entry">
<parameter_description> the #GtkItemFactoryEntry to create an item for
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> data passed to the callback function of @entry
</parameter_description>
</parameter>
<parameter name="callback_type">
<parameter_description> 1 if the callback function of @entry is of type
#GtkItemFactoryCallback1, 2 if it is of type #GtkItemFactoryCallback2 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_left_margin">
<description>
Gets the default left margin size of paragraphs in the @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> left margin in pixels
</return>
</function>

<function name="gtk_action_group_set_translation_domain">
<description>
Sets the translation domain and uses dgettext() for translating the 
@label and @tooltip of #GtkActionEntry&amp;lt;!-- --&amp;gt;s added by 
gtk_action_group_add_actions().

If you&apos;re not using gettext() for localization, see 
gtk_action_group_set_translate_func().

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GtkActionGroup
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the translation domain to use for dgettext() calls
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_get_geometry">
<description>
Obtains information about the location of the status icon
on screen. This information can be used to e.g. position 
popups like notification bubbles. 

See gtk_status_icon_position_menu() for a more convenient 
alternative for positioning menus.

Note that some platforms do not allow GTK+ to provide 
this information, and even on platforms that do allow it,
the information is not reliable unless the status icon
is embedded in a notification area, see
gtk_status_icon_is_embedded().


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> return location for the screen, or %NULL if the
information is not needed 
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> return location for the area occupied by the status 
icon, or %NULL
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> return location for the orientation of the panel 
in which the status icon is embedded, or %NULL. A panel 
at the top or bottom of the screen is horizontal, a panel 
at the left or right is vertical.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the location information has 
been filled in

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_get_vadjustment">
<description>
Gets the #GtkAdjustment currently being used for the vertical aspect.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkAdjustment object, or %NULL if none is currently being
used.
</return>
</function>

<function name="gtk_tree_view_set_rules_hint">
<description>
This function tells GTK+ that the user interface for your
application requires users to read across tree rows and associate
cells with one another. By default, GTK+ will then render the tree
with alternating row colors. Do &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; use it
just because you prefer the appearance of the ruled tree; that&apos;s a
question for the theme. Some themes will draw tree rows in
alternating colors even when rules are turned off, and users who
prefer that appearance all the time can choose those themes. You
should call this function only as a &amp;lt;emphasis&amp;gt;semantic&amp;lt;/emphasis&amp;gt;
hint to the theme engine that your tree makes alternating colors
useful from a functional standpoint (since it has lots of columns,
generally).


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the tree requires reading across rows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_default_icon_list">
<description>
Gets the value set by gtk_window_set_default_icon_list().
The list is a copy and should be freed with g_list_free(),
but the pixbufs in the list have not had their reference count
incremented.


</description>
<parameters>
</parameters>
<return> copy of default icon list 
</return>
</function>

<function name="gtk_label_set_use_markup">
<description>
Sets whether the text of the label contains markup in &amp;lt;link
linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango&apos;s text markup
language&amp;lt;/link&amp;gt;. See gtk_label_set_markup().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the label&apos;s text should be parsed for markup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_enable_tree_lines">
<description>
Return value: %TRUE if tree lines are drawn in @tree_view, %FALSE

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if tree lines are drawn in @tree_view, %FALSE
otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_widget_set_events">
<description>
Sets the event mask (see #GdkEventMask) for a widget. The event
mask determines which events a widget will receive. Keep in mind
that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget&apos;s functionality,
so be careful. This function must be called while a widget is
unrealized. Consider gtk_widget_add_events() for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can&apos;t be used with #GTK_NO_WINDOW widgets;
to get events on those widgets, place them inside a #GtkEventBox
and receive events on the event box.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> event mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete_selection">
<description>
Deletes the range between the &quot;insert&quot; and &quot;selection_bound&quot; marks,
that is, the currently-selected text. If @interactive is %TRUE,
the editability of the selection will be considered (users can&apos;t delete
uneditable text).


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="interactive">
<parameter_description> whether the deletion is caused by user interaction
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether there was a non-empty selection to delete
</return>
</function>

<function name="gtk_text_iter_starts_word">
<description>
Determines whether @iter begins a natural-language word.  Word
breaks are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the start of a word
</return>
</function>

<function name="gtk_tree_view_column_set_sizing">
<description>
Sets the growth behavior of @tree_column to @type.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The #GtkTreeViewColumnSizing.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_update_buttons_state">
<description>
Forces @assistant to recompute the buttons state.

GTK+ automatically takes care of this in most situations, 
e.g. when the user goes to a different page, or when the
visibility or completeness of a page changes.

One situation where it can be necessary to call this
function is when changing a value on the current page
affects the future page flow of the assistant.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_widget">
<description>
Changes the icon for a widget to a given widget. GTK+
will not destroy the icon, so if you don&apos;t want
it to persist, you should connect to the &quot;drag_end&quot; 
signal and destroy it yourself.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
          with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a toplevel window to use as an icon.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within @widget of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within @widget of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_info_get_filename">
<description>
Gets the filename for the icon. If the
%GTK_ICON_LOOKUP_USE_BUILTIN flag was passed
to gtk_icon_theme_lookup_icon(), there may be
no filename if a builtin icon is returned; in this
case, you should use gtk_icon_info_get_builtin_pixbuf().


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
</parameters>
<return> the filename for the icon, or %NULL
if gtk_icon_info_get_builtin_pixbuf() should
be used instead. The return value is owned by
GTK+ and should not be modified or freed.

Since: 2.4
</return>
</function>

<function name="gtk_buildable_custom_tag_start">
<description>
This is called for each unknown element under &amp;lt;child&amp;gt;.


</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> a #GtkBuilder used to construct this object
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> child object or %NULL for non-child tags
</parameter_description>
</parameter>
<parameter name="tagname">
<parameter_description> name of tag
</parameter_description>
</parameter>
<parameter name="parser">
<parameter_description> a #GMarkupParser structure to fill in
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> return location for user data that will be passed in 
to parser functions
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a object has a custom implementation, %FALSE
if it doesn&apos;t.

Since: 2.12
</return>
</function>

<function name="gtk_widget_set_has_tooltip">
<description>
Sets the has-tooltip property on @widget to @has_tooltip.  See
GtkWidget:has-tooltip for more information.

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="has_tooltip">
<parameter_description> whether or not @widget has a tooltip.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_remove_mnemonic">
<description>
Removes a mnemonic from this window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the mnemonic
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the widget that gets activated by the mnemonic
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_accel_path">
<description>
Given an accelerator group, @accel_group, and an accelerator path,
@accel_path, sets up an accelerator in @accel_group so whenever the
key binding that is defined for @accel_path is pressed, @widget
will be activated.  This removes any accelerators (for any
accelerator group) installed by previous calls to
gtk_widget_set_accel_path(). Associating accelerators with
paths allows them to be modified by the user and the modifications
to be saved for future use. (See gtk_accel_map_save().)

This function is a low level function that would most likely
be used by a menu creation system like #GtkUIManager. If you
use #GtkUIManager, setting up accelerator paths will be done
automatically.

Even when you you aren&apos;t using #GtkUIManager, if you only want to
set up accelerators on menu items gtk_menu_item_set_accel_path()
provides a somewhat more convenient interface.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> path used to look up the accelerator
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_set_screen">
<description>
Sets the screen for an icon theme; the screen is used
to track the user&apos;s currently configured icon theme,
which might be different for different screens.

Since: 2.4

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_create_icon">
<description>
This function is intended for use by action implementations to
create icons displayed in the proxy widgets.


</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="icon_size">
<parameter_description> the size of the icon that should be created.
</parameter_description>
</parameter>
</parameters>
<return> a widget that displays the icon for this action.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_column_set_reorderable">
<description>
If @reorderable is %TRUE, then the column can be reordered by the end user
dragging the header.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="reorderable">
<parameter_description> %TRUE, if the column can be reordered.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_item_get_submenu">
<description>
Gets the submenu underneath this menu item, if any. See
gtk_menu_item_set_submenu().


</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem
</parameter_description>
</parameter>
</parameters>
<return> submenu for this menu item, or %NULL if none.
</return>
</function>

<function name="_gtk_file_system_model_set_show_hidden">
<description>
Sets whether hidden files should be included in the #GtkTreeModel
for display.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="show_hidden">
<parameter_description> whether hidden files should be displayed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_extension">
<description>
Draws an extension, i.e. a notebook tab.

Deprecated: Use gtk_paint_extension() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the extension
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the extension
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the extension 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the extension 
</parameter_description>
</parameter>
<parameter name="gap_side">
<parameter_description> the side on to which the extension is attached
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_state">
<description>
Sets the widget state this icon source is intended to be used
with.

Setting the widget state on an icon source makes no difference
if the state is wildcarded. Therefore, you should usually
call gtk_icon_source_set_state_wildcarded() to un-wildcard it
in addition to calling this function.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> widget state this source applies to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_is_start">
<description>
Return value: whether @iter is the first in the buffer

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the first in the buffer
</return>
</function>

<function name="gtk_text_view_set_justification">
<description>
Sets the default justification of text in @text_view.
Tags in the view&apos;s buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="justification">
<parameter_description> justification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scale_button_get_adjustment">
<description>
Gets the #GtkAdjustment associated with the #GtkScaleButton&apos;s scale.
See gtk_range_get_adjustment() for details.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkScaleButton
</parameter_description>
</parameter>
</parameters>
<return> the adjustment associated with the scale

Since: 2.12
</return>
</function>

<function name="GtkSizeGroup">
<description>
If %TRUE, unmapped widgets are ignored when determining 
the size of the group.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="GtkButton">
<description>
Spacing in pixels between the image and label.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_new">
<description>
Creates a new GtkColorSelection.


</description>
<parameters>
</parameters>
<return> a new #GtkColorSelection
</return>
</function>

<function name="gtk_print_operation_set_n_pages">
<description>
Sets the number of pages in the document. 

This &amp;lt;emphasis&amp;gt;must&amp;lt;/emphasis&amp;gt; be set to a positive number
before the rendering starts. It may be set in a 
#GtkPrintOperation::begin-print signal hander.

Note that the page numbers passed to the 
#GtkPrintOperation::request-page-setup 
and #GtkPrintOperation::draw-page signals are 0-based, i.e. if 
the user chooses to print all pages, the last ::draw-page signal 
will be for page @n_pages - 1.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="n_pages">
<parameter_description> the number of pages
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_unmaximize">
<description>
Asks to unmaximize @window. Note that you shouldn&apos;t assume the
window is definitely unmaximized afterward, because other entities
(e.g. the user or &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
manager&amp;lt;/link&amp;gt;) could maximize it again, and not all window
managers honor requests to unmaximize. But normally the window will
end up unmaximized. Just don&apos;t write code that crashes if not.

You can track maximization via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_select_iter">
<description>
Selects the specified iterator.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to be selected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_get_fraction">
<description>
Return value: a fraction from 0.0 to 1.0

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> a fraction from 0.0 to 1.0
</return>
</function>

<function name="gtk_text_buffer_get_end_iter">
<description>
Initializes @iter with the &quot;end iterator,&quot; one past the last valid
character in the text buffer. If dereferenced with
gtk_text_iter_get_char(), the end iterator has a character value of
0. The entire buffer lies in the range from the first position in
the buffer (call gtk_text_buffer_get_start_iter() to get
character position 0) to the end iterator.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_invisible_new_for_screen">
<description>
Creates a new #GtkInvisible object for a specified screen


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen which identifies on which
the new #GtkInvisible will be created.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GtkInvisible object

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_convert_bin_window_to_widget_coords">
<description>
Converts bin_window coordinates (see gtk_tree_view_get_bin_window())
to widget relative coordinates.

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="bx">
<parameter_description> bin_window X coordinate
</parameter_description>
</parameter>
<parameter name="by">
<parameter_description> bin_window Y coordinate
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> return location for widget X coordinate
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> return location for widget Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_child_visible">
<description>
Gets the value set with gtk_widget_set_child_visible().
If you feel a need to use this function, your code probably
needs reorganization. 

This function is only useful for container implementations and
never should be called by an application.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget is mapped with the parent.
</return>
</function>

<function name="GtkEntryCompletion">
<description>
Determines whether the possible completions on the popup
will appear in the entry as you navigate through them.
   
Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_set_inconsistent">
<description>
If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a boolean setting, and the
current values in that range are inconsistent, you may want to
display the check in an &quot;in between&quot; state. This function turns on
&quot;in between&quot; display.  Normally you would turn off the inconsistent
state again if the user explicitly selects a setting. This has to be
done manually, gtk_check_menu_item_set_inconsistent() only affects
visual appearance, it doesn&apos;t affect the semantics of the widget.


</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to display an &quot;inconsistent&quot; third state check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_select_month">
<description>
Shifts the calendar to a different month.


</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> a month number between 0 and 11.
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> the year the month is in.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, always
</return>
</function>

<function name="gtk_icon_set_ref">
<description>
Increments the reference count on @icon_set.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet.
</parameter_description>
</parameter>
</parameters>
<return> @icon_set.
</return>
</function>

<function name="gtk_recent_info_get_mime_type">
<description>
Gets the MIME type of the resource.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the MIME type of the resource.  The returned string
is owned by the recent manager, and should not be freed.

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_select_all">
<description>
Selects all the icons. @icon_view must has its selection mode set
to #GTK_SELECTION_MULTIPLE.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_get_text">
<description>
Retrieves the text displayed superimposed on the progress bar,
if any, otherwise %NULL. The return value is a reference
to the text, not a copy of it, so will become invalid
if you change the text in the progress bar.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> text, or %NULL; this string is owned by the widget
and should not be modified or freed.
</return>
</function>

<function name="gtk_text_iter_get_line_offset">
<description>
Return value: offset from start of line

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> offset from start of line
</return>
</function>

<function name="gtk_target_list_find">
<description>
Looks up a given target in a #GtkTargetList.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an interned atom representing the target to search for
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a pointer to the location to store application info for target
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the target was found, otherwise %FALSE
</return>
</function>

<function name="gtk_widget_freeze_child_notify">
<description>
Stops emission of #GtkWidget::child-notify signals on @widget. The 
signals are queued until gtk_widget_thaw_child_notify() is called 
on @widget. 

This is the analogue of g_object_freeze_notify() for child properties.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_remove_action">
<description>
Removes an action object from the action group.

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> an action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_wrap_license">
<description>
Sets whether the license text in @about is 
automatically wrapped.

Since: 2.8

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="wrap_license">
<parameter_description> whether to wrap the license
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkAdjustment">
<description>
The page size of the adjustment. 
Note that the page-size is irrelevant and should be set to zero
if the adjustment is used for a simple scalar value, e.g. in a 
#GtkSpinButton.

Since: 2.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_type_hint">
<description>
Gets the type hint for this window. See gtk_window_set_type_hint().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the type hint for @window.
</return>
</function>

<function name="gtk_paper_size_new_custom">
<description>
Creates a new #GtkPaperSize object with the
given parameters.


</description>
<parameters>
<parameter name="name">
<parameter_description> the paper name 
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> the human-readable name
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the paper width, in units of @unit
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the paper height, in units of @unit
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for @width and @height
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPaperSize object, use gtk_paper_size_free()
to free it

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_is_embedded">
<description>
Return value: %TRUE if the status icon is embedded in

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the status icon is embedded in
a notification area.

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_new_from_stock">
<description>
Creates a status icon displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. You can register your 
own stock icon names, see gtk_icon_factory_add_default() and 
gtk_icon_factory_add(). 


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> a stock icon id
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkStatusIcon

Since: 2.10
</return>
</function>

<function name="gtk_cell_renderer_text_set_fixed_height_from_font">
<description>
Sets the height of a renderer to explicitly be determined by the &quot;font&quot; and
&quot;y_pad&quot; property set on it.  Further changes in these properties do not
affect the height, so they must be accompanied by a subsequent call to this
function.  Using this function is unflexible, and should really only be used
if calculating the size of a cell is too slow (ie, a massive number of cells
displayed).  If @number_of_rows is -1, then the fixed height is unset, and
the height is determined by the properties again.

</description>
<parameters>
<parameter name="renderer">
<parameter_description> A #GtkCellRendererText
</parameter_description>
</parameter>
<parameter name="number_of_rows">
<parameter_description> Number of rows of text each cell renderer is allocated, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_find_target">
<description>
Looks for a match between @context-&amp;gt;targets and the
@dest_target_list, returning the first matching target, otherwise
returning %GDK_NONE. @dest_target_list should usually be the return
value from gtk_drag_dest_get_target_list(), but some widgets may
have different valid targets for different parts of the widget; in
that case, they will have to implement a drag_motion handler that
passes the correct target list to this function.


</description>
<parameters>
<parameter name="widget">
<parameter_description> drag destination widget
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> drag context
</parameter_description>
</parameter>
<parameter name="target_list">
<parameter_description> list of droppable targets, or %NULL to use
gtk_drag_dest_get_target_list (@widget).
</parameter_description>
</parameter>
</parameters>
<return> first target that the source offers and the dest can accept, or %GDK_NONE
</return>
</function>

<function name="gtk_entry_set_has_frame">
<description>
Sets whether the entry has a beveled frame around it.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_visible_horizontal">
<description>
Return value: %TRUE if @tool_item is visible on toolbars that are

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tool_item is visible on toolbars that are
docked horizontally.

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_get_resolution">
<description>
Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the resolution in dpi

Since: 2.10
</return>
</function>

<function name="gtk_text_buffer_get_slice">
<description>
Return value: an allocated UTF-8 string

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of a range
</parameter_description>
</parameter>
<parameter name="include_hidden_chars">
<parameter_description> whether to include invisible text
</parameter_description>
</parameter>
</parameters>
<return> an allocated UTF-8 string
</return>
</function>

<function name="gtk_entry_get_max_length">
<description>
Retrieves the maximum allowed length of the text in
@entry. See gtk_entry_set_max_length().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the maximum allowed number of characters
in #GtkEntry, or 0 if there is no maximum.
</return>
</function>

<function name="gtk_combo_box_entry_set_text_column">
<description>
Sets the model column which @entry_box should use to get strings from
to be @text_column.

Since: 2.4

</description>
<parameters>
<parameter name="entry_box">
<parameter_description> A #GtkComboBoxEntry.
</parameter_description>
</parameter>
<parameter name="text_column">
<parameter_description> A column in @model to get the strings from.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_default_top_margin">
<description>
Gets the default top margin for the #GtkPaperSize.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the default top margin

Since: 2.10
</return>
</function>

<function name="gtk_entry_completion_set_popup_set_width">
<description>
Sets whether the completion popup window will be resized to be the same
width as the entry.

Since: 2.8

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
<parameter name="popup_set_width">
<parameter_description> %TRUE to make the width of the popup the same as the entry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_set_shadow_type">
<description>
Changes the type of shadow drawn around the contents of
@scrolled_window.


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> kind of shadow to draw around scrolled window contents
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_iter_has_child">
<description>
Return value: %TRUE if @iter has children.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to test for children.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter has children.
</return>
</function>

<function name="gtk_stock_add">
<description>
Registers each of the stock items in @items. If an item already
exists with the same stock ID as one of the @items, the old item
gets replaced. The stock items are copied, so GTK+ does not hold
any pointer into @items and @items can be freed. Use
gtk_stock_add_static() if @items is persistent and GTK+ need not
copy the array.


</description>
<parameters>
<parameter name="items">
<parameter_description> a #GtkStockItem or array of items
</parameter_description>
</parameter>
<parameter name="n_items">
<parameter_description> number of #GtkStockItem in @items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_has_palette">
<description>
Shows and hides the palette based upon the value of @has_palette.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="has_palette">
<parameter_description> %TRUE if palette is to be visible, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_layout_clear_attributes">
<description>
Clears all existing attributes previously set with
gtk_cell_layout_set_attributes().

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer to clear the attribute mapping on.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_output_bin">
<description>
Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the output bin

Since: 2.10
</return>
</function>

<function name="gtk_draw_focus">
<description>
Draws a focus indicator around the given rectangle on @window using the
given style.

Deprecated: Use gtk_paint_focus() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_groups_activate">
<description>
Finds the first accelerator in any #GtkAccelGroup attached
to @object that matches @accel_key and @accel_mods, and
activates that accelerator.
If an accelerator was activated and handled this keypress, %TRUE
is returned.

</description>
<parameters>
<parameter name="object">
<parameter_description>        the #GObject, usually a #GtkWindow, on which
to activate the accelerator.
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>     accelerator keyval from a key event
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>    keyboard state mask from a key event
</parameter_description>
</parameter>
</parameters>
<return>       %TRUE if the accelerator was handled, %FALSE otherwise
</return>
</function>

<function name="gtk_print_operation_set_unit">
<description>
Sets up the transformation for the cairo context obtained from
#GtkPrintContext in such a way that distances are measured in 
units of @unit.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_set_placement">
<description>
Sets the placement of the contents with respect to the scrollbars
for the scrolled window.
The default is %GTK_CORNER_TOP_LEFT, meaning the child is
in the top left, with the scrollbars underneath and to the right.
Other values in #GtkCornerType are %GTK_CORNER_TOP_RIGHT,
%GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.

See also gtk_scrolled_window_get_placement() and
gtk_scrolled_window_unset_placement().

</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
<parameter name="window_placement">
<parameter_description> position of the child window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_get_event_widget">
<description>
If @event is %NULL or the event was not associated with any widget,
Return value: the widget that originally received @event, or %NULL

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the widget that originally received @event, or %NULL
</return>
</function>

<function name="gtk_rc_get_default_files">
<description>
Retrieves the current list of RC files that will be parsed
at the end of gtk_init().


</description>
<parameters>
</parameters>
<return> A %NULL-terminated array of filenames. This memory
is owned by GTK+ and must not be freed by the application.
If you want to store this information, you should make a copy.
</return>
</function>

<function name="_gtk_file_system_model_add_editable">
<description>
Adds an &quot;empty&quot; row at the beginning of the model.  This does not refer to
any file, but is a temporary placeholder for a file name that the user will
type when a corresponding cell is made editable.  When your code is done
using this temporary row, call _gtk_file_system_model_remove_editable().

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> Location to return the iter corresponding to the editable row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_pos">
<description>
Sets the edge at which the tabs for switching pages in the
notebook are drawn.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the edge to draw the tabs at.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_app_paintable">
<description>
Sets whether the application intends to draw on the widget in
an #GtkWidget::expose-event handler. 

This is a hint to the widget and does not affect the behavior of 
the GTK+ core; many widgets ignore this flag entirely. For widgets 
that do pay attention to the flag, such as #GtkEventBox and #GtkWindow, 
the effect is to suppress default themed drawing of the widget&apos;s 
background. (Children of the widget will still be drawn.) The application 
is then entirely responsible for drawing the widget background.

Note that the background is still drawn when the widget is mapped.
If this is not suitable (e.g. because you want to make a transparent
window using an RGBA visual), you can work around this by doing:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_widget_realize (window);
gdk_window_set_back_pixmap (window-&amp;gt;window, NULL, FALSE);
gtk_widget_show (window);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt; 

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="app_paintable">
<parameter_description> %TRUE if the application will paint on the widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_move_mark_by_name">
<description>
Moves the mark named @name (which must exist) to location @where.
See gtk_text_buffer_move_mark() for details.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a mark
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> new location for mark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_button_set_title">
<description>
Modifies the @title of the browse dialog used by @button.

Since: 2.6

</description>
<parameters>
<parameter name="button">
<parameter_description> the button widget to modify.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the new browse dialog title.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_new">
<description>
Creates a new icon theme object. Icon theme objects are used
to lookup up an icon by name in a particular icon theme.
Usually, you&apos;ll want to use gtk_icon_theme_get_default()
or gtk_icon_theme_get_for_screen() rather than creating
a new icon theme object for scratch.


</description>
<parameters>
</parameters>
<return> the newly created #GtkIconTheme object.

Since: 2.4
</return>
</function>

<function name="GtkMessageDialog">
<description>
The image for this dialog.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_set_color">
<description>
Sets the current color in an HSV color selector.  Color component values must
be in the [0.0, 1.0] range.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="h">
<parameter_description> Hue.
</parameter_description>
</parameter>
<parameter name="s">
<parameter_description> Saturation.
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> Value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_handle">
<description>
Draws a handle as used in #GtkHandleBox and #GtkPaned.

Deprecated: Use gtk_paint_handle() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the handle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the handle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> with of the handle
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the handle
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation of the handle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_clear">
<description>
The default handler for the GtkWidget::selection_clear_event
signal. 


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was handled, otherwise false

Since: 2.2

Deprecated: 2.4: Instead of calling this function, chain up from
your selection_clear_event handler. Calling this function
from any other context is illegal. 
</return>
</function>

<function name="gtk_tooltip_set_markup">
<description>
Sets the text of the tooltip to be @markup, which is marked up
with the &amp;lt;link
linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;.
If @markup is %NULL, the label will be hidden.

Since: 2.12

</description>
<parameters>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> a markup string (see &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;) or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_get_font">
<description>
Gets the #GdkFont to use for the given style. This is
meant only as a replacement for direct access to @style-&amp;gt;font
and should not be used in new code. New code should
use @style-&amp;gt;font_desc instead.


</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
</parameters>
<return> the #GdkFont for the style. This font is owned
by the style; if you want to keep around a copy, you must
call gdk_font_ref().
</return>
</function>

<function name="gtk_tree_store_newv">
<description>
Non vararg creation function.  Used primarily by language bindings.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the tree store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTreeStore
</return>
</function>

<function name="gtk_check_version">
<description>
Checks that the GTK+ library in use is compatible with the
given version. Generally you would pass in the constants
#GTK_MAJOR_VERSION, #GTK_MINOR_VERSION, #GTK_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GTK+ the application or module was compiled
against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)

This function is primarily for GTK+ modules; the module
can call this function to check that it wasn&apos;t loaded
into an incompatible version of GTK+. However, such a
a check isn&apos;t completely reliable, since the module may be
linked against an old version of GTK+ and calling the
old version of gtk_check_version(), but still get loaded
into an application using a newer version of GTK+.


</description>
<parameters>
<parameter name="required_major">
<parameter_description> the required major version.
</parameter_description>
</parameter>
<parameter name="required_minor">
<parameter_description> the required minor version.
</parameter_description>
</parameter>
<parameter name="required_micro">
<parameter_description> the required micro version.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if the GTK+ library is compatible with the
given version, or a string describing the version mismatch.
The returned string is owned by GTK+ and should not be modified
or freed.
</return>
</function>

<function name="gtk_drag_dest_get_track_motion">
<description>
Return Value: %TRUE if the widget always emits ::drag-motion events

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget always emits ::drag-motion events

Since: 2.10
</return>
</function>

<function name="gtk_ui_manager_get_ui">
<description>
Creates a &amp;lt;link linkend=&quot;XML-UI&quot;&amp;gt;UI definition&amp;lt;/link&amp;gt; of the merged UI.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string containing an XML representation of 
the merged UI.

Since: 2.4
</return>
</function>

<function name="GtkAboutDialog">
<description>
Whether to wrap the text in the license dialog.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_insert">
<description>
Insert a #GtkToolItem into the toolbar at position @pos. If @pos is
0 the item is prepended to the start of the toolbar. If @pos is
negative, the item is appended to the end of the toolbar.

Since: 2.4

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> a #GtkToolItem
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the position of the new item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_widget_propagate_screen_changed">
<description>
Propagates changes in the screen for a widget to all
children, emitting #GtkWidget::screen-changed.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="previous_screen">
<parameter_description> Previous screen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_remove_selection_clipboard">
<description>
Removes a #GtkClipboard added with 
gtk_text_buffer_add_selection_clipboard().

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard added to @buffer by 
gtk_text_buffer_add_selection_clipboard()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_insert_with_valuesv">
<description>
A variant of gtk_tree_store_insert_with_values() which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings.

Since: 2.10

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set the new row, or %NULL.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> an array of column numbers
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> an array of GValues
</parameter_description>
</parameter>
<parameter name="n_values">
<parameter_description> the length of the @columns and @values arrays
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_size_allocate">
<description>
This function is only used by #GtkContainer subclasses, to assign a size
and position to their child widgets. 

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="allocation">
<parameter_description> position and size to be allocated to @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert_with_valuesv">
<description>
A variant of gtk_list_store_insert_with_values() which
takes the columns and values as two arrays, instead of
varargs. This function is mainly intended for 
language-bindings.

Since: 2.6

</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row, or %NULL.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> an array of column numbers
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> an array of GValues 
</parameter_description>
</parameter>
<parameter name="n_values">
<parameter_description> the length of the @columns and @values arrays
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_action_set_draw_as_radio">
<description>
Sets whether the action should have proxies like a radio action.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="draw_as_radio">
<parameter_description> whether the action should have proxies like a radio 
action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_binding_set_add_path">
<description>
This function is used internally by the GtkRC parsing mechanism to
assign match patterns to #GtkBindingSet structures.

</description>
<parameters>
<parameter name="binding_set">
<parameter_description>  binding set to add a path to
</parameter_description>
</parameter>
<parameter name="path_type">
<parameter_description>    path type the pattern applies to
</parameter_description>
</parameter>
<parameter name="path_pattern">
<parameter_description> the actual match pattern
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description>     binding priority
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_mark">
<description>
Initializes @iter with the current position of @mark.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_lines">
<description>
Moves @count lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of lines to move backward
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_widget_send_expose">
<description>
Very rarely-used function. This function is used to emit
an expose event signals on a widget. This function is not
normally used directly. The only time it is used is when
propagating an expose event to a child %NO_WINDOW widget, and
that is normally done using gtk_container_propagate_expose().

If you want to force an area of a window to be redrawn, 
use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
To cause the redraw to be done immediately, follow that call
with a call to gdk_window_process_updates().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a expose #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> return from the event signal emission (%TRUE if 
the event was handled)
</return>
</function>

<function name="gtk_button_set_image">
<description>
Set the image of @button to the given widget. Note that
it depends on the #GtkSettings:gtk-button-images setting whether the
image will be displayed or not, you don&apos;t have to call
gtk_widget_show() on @image yourself.

Since: 2.6

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> a widget to set as the image for the button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_grid_lines">
<description>
Return value: a #GtkTreeViewGridLines value indicating which grid lines

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> a #GtkTreeViewGridLines value indicating which grid lines
are enabled.

Since: 2.10
</return>
</function>

<function name="_gtk_socket_get_private">
<description>
@socket: a #GtkSocket


</description>
<parameters>
</parameters>
<return>the private data associated with a GtkSocket, creating it
first if necessary.
</return>
</function>

<function name="gtk_print_settings_get_printer">
<description>
Convenience function to obtain the value of 
%GTK_PRINT_SETTINGS_PRINTER.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the printer name

Since: 2.10
</return>
</function>

<function name="gtk_handle_box_get_handle_position">
<description>
Gets the handle position of the handle box. See
gtk_handle_box_set_handle_position().


</description>
<parameters>
<parameter name="handle_box">
<parameter_description> a #GtkHandleBox
</parameter_description>
</parameter>
</parameters>
<return> the current handle position.
</return>
</function>

<function name="gtk_tree_store_insert_after">
<description>
Inserts a new row after @sibling.  If @sibling is %NULL, then the row will be
prepended to @parent &apos;s children.  If @parent and @sibling are %NULL, then
the row will be prepended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
@parent is optional.

@iter will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_visible_word_start">
<description>
Moves backward to the previous visible word start. (If @iter is currently 
on a word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 

Since: 2.4
</return>
</function>

<function name="gtk_image_set_pixel_size">
<description>
Sets the pixel size to use for named icons. If the pixel size is set
to a value != -1, it is used instead of the icon size set by
gtk_image_set_from_icon_name().

Since: 2.6

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixel_size">
<parameter_description> the new pixel size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_add_buttons">
<description>
Adds more buttons, same as calling gtk_dialog_add_button()
repeatedly.  The variable argument list should be %NULL-terminated
as with gtk_dialog_new_with_buttons(). Each button must have both
text and response ID.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> button text or stock ID
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for first button, then more text-response_id pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paned_get_child2">
<description>
Obtains the second child of the paned widget.


</description>
<parameters>
<parameter name="paned">
<parameter_description> a #GtkPaned widget
</parameter_description>
</parameter>
</parameters>
<return> second child, or %NULL if it is not set.

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_get_spacing">
<description>
Return value: the space between cells 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the space between cells 

Since: 2.6
</return>
</function>

<function name="gtk_tree_store_new">
<description>
Creates a new tree store as with @n_columns columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types 
are supported. 

As an example, &amp;lt;literal&amp;gt;gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);&amp;lt;/literal&amp;gt; will create a new #GtkTreeStore with three columns, of type
&amp;lt;type&amp;gt;int&amp;lt;/type&amp;gt;, &amp;lt;type&amp;gt;string&amp;lt;/type&amp;gt; and #GdkPixbuf respectively.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the tree store
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> all #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTreeStore
</return>
</function>

<function name="gtk_text_buffer_paste_clipboard">
<description>
Pastes the contents of a clipboard at the insertion point, or at 
@override_location. (Note: pasting is asynchronous, that is, we&apos;ll 
ask for the paste data and return, and at some point later after 
the main loop runs, the paste data will be inserted.)

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard to paste from
</parameter_description>
</parameter>
<parameter name="override_location">
<parameter_description> location to insert pasted text, or %NULL for 
at the cursor
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_get_owner">
<description>
If the clipboard contents callbacks were set with 
gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or 
gtk_clipboard_clear() has not subsequently called, returns the owner set 
by gtk_clipboard_set_with_owner().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> the owner of the clipboard, if any; otherwise %NULL.
</return>
</function>

<function name="gtk_window_begin_move_drag">
<description>
Starts moving a window. This function is used if an application has
window movement grips. When GDK can support it, the window movement
will be done using the standard mechanism for the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; or windowing
system. Otherwise, GDK will try to emulate window movement,
potentially not all that well, depending on the windowing system.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> mouse button that initiated the drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> X position where the user clicked to initiate the drag, in root window coordinates
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> Y position where the user clicked to initiate the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp from the click event that initiated the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_path_at_pos">
<description>
Finds the path at the point (@x, @y), relative to bin_window coordinates
(please see gtk_tree_view_get_bin_window()).
That is, @x and @y are relative to an events coordinates. @x and @y must
come from an event on the @tree_view only where &amp;lt;literal&amp;gt;event-&amp;gt;window ==
gtk_tree_view_get_bin_window (&amp;lt;!-- --&amp;gt;)&amp;lt;/literal&amp;gt;. It is primarily for
things like popup menus. If @path is non-%NULL, then it will be filled
with the #GtkTreePath at that point.  This path should be freed with
gtk_tree_path_free().  If @column is non-%NULL, then it will be filled
with the column at that point.  @cell_x and @cell_y return the coordinates
relative to the cell background (i.e. the @background_area passed to
gtk_cell_renderer_render()).  This function is only meaningful if
@tree_view is realized.

For converting widget coordinates (eg. the ones you get from
GtkWidget::query-tooltip), please see
gtk_tree_view_convert_widget_to_bin_window_coords().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The x position to be identified (relative to bin_window).
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The y position to be identified (relative to bin_window).
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A pointer to a #GtkTreePath pointer to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> A pointer to a #GtkTreeViewColumn pointer to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="cell_x">
<parameter_description> A pointer where the X coordinate relative to the cell can be placed, or %NULL
</parameter_description>
</parameter>
<parameter name="cell_y">
<parameter_description> A pointer where the Y coordinate relative to the cell can be placed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a row exists at that coordinate.
</return>
</function>

<function name="gtk_image_new">
<description>
Creates a new empty #GtkImage widget.


</description>
<parameters>
</parameters>
<return> a newly created #GtkImage widget. 
</return>
</function>

<function name="gtk_file_chooser_set_current_folder_uri">
<description>
Sets the current folder for @chooser from an URI.
The user will be shown the full contents of the current folder,
plus user interface elements for navigating to other folders.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI for the new current folder
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be changed successfully, %FALSE
otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_drag_source_set_icon_name">
<description>
Sets the icon that will be used for drags from a particular source
to a themed icon. See the docs for #GtkIconTheme for more details.

Since: 2.8

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> name of icon to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_description">
<description>
Gets the (short) description of the resource.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the description of the resource.  The returned string
is owned by the recent manager, and should not be freed.

Since: 2.10
</return>
</function>

<function name="_gtk_recent_chooser_get_recent_manager">
<description>
Gets the #GtkRecentManager used by @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> the recent manager for @chooser.

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_get_screen">
<description>
Return value: a #GdkScreen.

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> a #GdkScreen.

Since: 2.12
</return>
</function>

<function name="gtk_page_setup_new_from_key_file">
<description>
Reads the page setup from the group @group_name in the key file
@key_file. Returns a new #GtkPageSetup object with the restored
page setup, or %NULL if an error occurred.


</description>
<parameters>
<parameter name="key_file">
<parameter_description> the #GKeyFile to retrieve the page_setup from
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> the name of the group in the key_file to read, or %NULL
to use the default name &quot;Page Setup&quot;
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the restored #GtkPageSetup

Since: 2.12
</return>
</function>

<function name="_gtk_scrolled_window_get_spacing">
<description>
Gets the spacing between the scrolled window&apos;s scrollbars and
the scrolled widget. Used by GtkCombo


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a scrolled window
</parameter_description>
</parameter>
</parameters>
<return> the spacing, in pixels.
</return>
</function>

<function name="gtk_drag_dest_add_text_targets">
<description>
Add the text targets supported by #GtkSelection to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_text_targets() and
gtk_drag_dest_set_target_list().

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_set_text_column">
<description>
Convenience function for setting up the most used case of this code: a
completion list with just strings. This function will set up @completion
to have a list displaying all (and just) strings in the completion list,
and to get those strings from @column in the model of @completion.

This functions creates and adds a #GtkCellRendererText for the selected 
column. If you need to set the text column, but don&apos;t want the cell 
renderer, use g_object_set() to set the ::text_column property directly.

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The column in the model of @completion to get strings from.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_new_from_file">
<description>
Creates a status icon displaying the file @filename. 

The image will be scaled down to fit in the available 
space in the notification area, if necessary.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a filename
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkStatusIcon

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_set_model">
<description>
Sets the model for a #GtkIconView.  
If the @icon_view already has a model set, it will remove 
it before setting the new model.  If @model is %NULL, then
it will unset the old model.

Since: 2.6 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> The model.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_get_current_page">
<description>
Return value: The index (starting from 0) of the current page in

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
</parameters>
<return> The index (starting from 0) of the current page in
the @assistant, if the @assistant has no pages, -1 will be returned

Since: 2.10
</return>
</function>

<function name="gtk_combo_box_append_text">
<description>
Appends @string to the list of strings stored in @combo_box. Note that
you can only use this function with combo boxes constructed with
gtk_combo_box_new_text().

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox constructed using gtk_combo_box_new_text()
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> A string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_get_items">
<description>
Gets the list of recently used resources.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
</parameters>
<return> a list of newly allocated #GtkRecentInfo objects. Use
gtk_recent_info_unref() on each item inside the list, and then
free the list itself using g_list_free().

Since: 2.10
</return>
</function>

<function name="gtk_message_dialog_format_secondary_text">
<description>
Sets the secondary text of the message dialog to be @message_format 
(with printf()-style).

Note that setting a secondary text makes the primary text become
bold, unless you have provided explicit markup.

Since: 2.6

</description>
<parameters>
<parameter name="message_dialog">
<parameter_description> a #GtkMessageDialog
</parameter_description>
</parameter>
<parameter name="message_format">
<parameter_description> printf()-style format string, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments for @message_format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_insert_page">
<description>
Insert a page into @notebook at the given position.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page after all other pages.
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the inserted
page in the notebook, or -1 if function fails
</return>
</function>

<function name="gtk_widget_style_get_property">
<description>
Gets the value of a style property of @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a style property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to return the property value 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_get_program_name">
<description>
Return value: The program name. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The program name. The string is owned by the about
dialog and must not be modified.

Since: 2.12
</return>
</function>

<function name="gtk_print_operation_cancel">
<description>
Cancels a running print operation. This function may
be called from a #GtkPrintOperation::begin-print, 
#GtkPrintOperation::paginate or #GtkPrintOperation::draw-page
signal handler to stop the currently running print 
operation.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_for_text">
<description>
Requests the contents of the clipboard as text and converts
the result to UTF-8 if necessary. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated UTF-8 string which must
be freed with g_free(), or %NULL if retrieving
the selection data failed. (This could happen
for various reasons, in particular if the
clipboard was empty or if the contents of the
clipboard could not be converted into text form.)
</return>
</function>

<function name="gtk_file_system_get_parent">
<description>
Gets the name of the parent folder of a path.  If the path has no parent, as when
you request the parent of a file system root, then @parent will be set to %NULL.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> base path name
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> location to store parent path name
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful:  @parent will be set to
the name of the @path&apos;s parent, or to %NULL if @path is already a file system
root.  If the operation fails, this function returns %FALSE, sets @parent to
NULL, and sets the @error value if it is specified.
</return>
</function>

<function name="gtk_text_layout_set_overwrite_mode">
<description>
Sets overwrite mode

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="overwrite">
<parameter_description> overwrite mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_preview_render_page">
<description>
Renders a page to the preview, using the print context that
was passed to the #GtkPrintOperation::preview handler together
with @preview.

Note that this function requires a suitable cairo context to 
be associated with the print context. 

Since: 2.10 

</description>
<parameters>
<parameter name="preview">
<parameter_description> a #GtkPrintOperationPreview
</parameter_description>
</parameter>
<parameter name="page_nr">
<parameter_description> the page to render
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_action_toggled">
<description>
Emits the &quot;toggled&quot; signal on the toggle action.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_extension">
<description>
Draws an extension, i.e. a notebook tab.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the extension
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the extension
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the extension 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the extension 
</parameter_description>
</parameter>
<parameter name="gap_side">
<parameter_description> the side on to which the extension is attached
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_binding_entry_remove">
<description>
Remove a binding previously installed via
gtk_binding_entry_add_signal() on @binding_set.

</description>
<parameters>
<parameter name="binding_set">
<parameter_description> @binding_set to remove an entry of
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>      key value of binding to remove
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>   key modifier of binding to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_add_filter">
<description>
Adds a filter to the global list of accel path filters.

Accel map entries whose accel path matches one of the filters
are skipped by gtk_accel_map_foreach().

This function is intended for GTK+ modules that create their own
menus, but don&apos;t want them to be saved into the applications accelerator
map dump.

</description>
<parameters>
<parameter name="filter_pattern">
<parameter_description> a pattern (see #GPatternSpec)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_builder_set_translation_domain">
<description>
Sets the translation domain of @builder. 
See #GtkBuilder:translation-domain.

Since: 2.12

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the translation domain or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_deserialize_set_can_create_tags">
<description>
Use this function to allow a rich text deserialization function to
create new tags in the receiving buffer. Note that using this
function is almost always a bad idea, because the rich text
functions you register should know how to map the rich text format
they handler to your text buffers set of tags.

The ability of creating new (arbitrary!) tags in the receiving buffer
is meant for special rich text formats like the internal one that
is registered using gtk_text_buffer_register_deserialize_tagset(),
because that format is essentially a dump of the internal structure
of the source buffer, including its tag names.

You should allow creation of tags only if you know what you are
doing, e.g. if you defined a tagset name for your application
suite&apos;s text buffers and you know that it&apos;s fine to receive new
tags from these buffers, because you know that your application can
handle the newly created tags.

Since: 2.10

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GdkAtom representing a registered rich text format
</parameter_description>
</parameter>
<parameter name="can_create_tags">
<parameter_description> whether deserializing this format may create tags
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_menu_label">
<description>
Changes the menu label for the page containing @child. 

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the menu label, or NULL for default
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_register_serialize_tagset">
<description>
This function registers GTK+&apos;s internal rich text serialization
format with the passed @buffer. The internal format does not comply
to any standard rich text format and only works between #GtkTextBuffer
instances. It is capable of serializing all of a text buffer&apos;s tags
and embedded pixbufs.

This function is just a wrapper around
gtk_text_buffer_register_serialize_format(). The mime type used
for registering is &quot;application/x-gtk-text-buffer-rich-text&quot;, or
&quot;application/x-gtk-text-buffer-rich-text;format=@tagset_name&quot; if a
@tagset_name was passed.

The @tagset_name can be used to restrict the transfer of rich text
to buffers with compatible sets of tags, in order to avoid unknown
tags from being pasted. It is probably the common case to pass an
identifier != %NULL here, since the %NULL tagset requires the
receiving buffer to deal with with pasting of arbitrary tags.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tagset_name">
<parameter_description> an optional tagset name, on %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GdkAtom that corresponds to the newly registered
format&apos;s mime-type.

Since: 2.10
</return>
</function>

<function name="GtkFileChooserButton">
<description>
The width of the entry and label inside the button, in characters.

Since: 2.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_remove_filter">
<description>
Removes @filter from the list of #GtkRecentFilter objects held by @chooser.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_construct">
<description>
Initializes an item factory.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="container_type">
<parameter_description> the kind of menu to create; can be
#GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the factory path of @ifactory, a string of the form 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup to which the accelerators for the
menu items will be added, or %NULL to create a new one
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_new">
<description>
Creates a new #GtkPrintUnixDialog.


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPrintUnixDialog

Since: 2.10
</return>
</function>

<function name="gtk_widget_class_find_style_property">
<description>
Finds a style property of a widget class by name.

Since: 2.2

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GtkWidgetClass
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the style property to find
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec of the style property or %NULL if @class has no
style property with that name.
</return>
</function>

<function name="gtk_combo_box_popup">
<description>
Pops up the menu or dropdown list of @combo_box. 

This function is mostly intended for use by accessibility technologies;
applications should have little use for it.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_mark_get_deleted">
<description>
Return value: whether the mark is deleted

</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> whether the mark is deleted
</return>
</function>

<function name="gtk_cell_renderer_editing_canceled">
<description>
Causes the cell renderer to emit the #GtkCellRenderer::editing-canceled 
signal.  

This function is for use only by implementations of cell renderers that 
need to notify the client program that an editing process was canceled 
and the changes were not committed.

Since: 2.4
Deprecated: 2.6: Use gtk_cell_renderer_stop_editing() instead

</description>
<parameters>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_line_wrap">
<description>
Return value: %TRUE if the lines of the label are automatically wrapped.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lines of the label are automatically wrapped.
</return>
</function>

<function name="gtk_toolbar_prepend_item">
<description>
Adds a new button to the beginning (top or left edges) of the given toolbar.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> give your toolbar button a label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> a string that appears when the user holds the mouse over this item.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> use with #GtkTipsQuery.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that should be used as the button&apos;s icon.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a pointer to any data you wish to be passed to the callback.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar item as a #GtkWidget.
</return>
</function>

<function name="gtk_statusbar_new">
<description>
Creates a new #GtkStatusbar ready for messages.


</description>
<parameters>
</parameters>
<return> the new #GtkStatusbar
</return>
</function>

<function name="gtk_about_dialog_get_website_label">
<description>
Return value: The label used for the website link. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The label used for the website link. The string is owned by the about
dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_text_view_buffer_to_window_coords">
<description>
Converts coordinate (@buffer_x, @buffer_y) to coordinates for the window
@win, and stores the result in (@window_x, @window_y). 

Note that you can&apos;t convert coordinates for a nonexisting window (see 
gtk_text_view_set_border_window_size()).

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="win">
<parameter_description> a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
</parameter_description>
</parameter>
<parameter name="buffer_x">
<parameter_description> buffer x coordinate
</parameter_description>
</parameter>
<parameter name="buffer_y">
<parameter_description> buffer y coordinate
</parameter_description>
</parameter>
<parameter name="window_x">
<parameter_description> window x coordinate return location
</parameter_description>
</parameter>
<parameter name="window_y">
<parameter_description> window y coordinate return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_height">
<description>
Gets the paper height of the #GtkPaperSize, in 
units of @unit.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the paper height 

Since: 2.10
</return>
</function>

<function name="gtk_printer_is_default">
<description>
Return value: %TRUE if @printer is the default

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @printer is the default

Since: 2.10
</return>
</function>

<function name="gtk_window_set_title">
<description>
Sets the title of the #GtkWindow. The title of a window will be
displayed in its title bar; on the X Window System, the title bar
is rendered by the &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
manager&amp;lt;/link&amp;gt;, so exactly how the title appears to users may vary
according to a user&apos;s exact configuration. The title should help a
user distinguish this window from other windows they may have
open. A good title might include the application name and current
document filename, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_current_folder">
<description>
Sets the current folder for @chooser from a local filename.
The user will be shown the full contents of the current folder,
plus user interface elements for navigating to other folders.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the full path of the new current folder
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be changed successfully, %FALSE
otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_paint_shadow_gap">
<description>
Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type, leaving a 
gap in one side.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="gap_side">
<parameter_description> side in which to leave the gap
</parameter_description>
</parameter>
<parameter name="gap_x">
<parameter_description> starting position of the gap
</parameter_description>
</parameter>
<parameter name="gap_width">
<parameter_description> width of the gap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_get_image_position">
<description>
Gets the position of the image relative to the text 
inside the button.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> the position

Since: 2.10
</return>
</function>

<function name="gtk_file_chooser_get_show_hidden">
<description>
Gets whether hidden files and folders are displayed in the file selector.   
See gtk_file_chooser_set_show_hidden().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if hidden files and folders are displayed.

Since: 2.6
</return>
</function>

<function name="gtk_tree_model_sort_clear_cache">
<description>
This function should almost never be called.  It clears the @tree_model_sort
of any cached iterators that haven&apos;t been reffed with
gtk_tree_model_ref_node().  This might be useful if the child model being
sorted is static (and doesn&apos;t change often) and there has been a lot of
unreffed access to nodes.  As a side effect of this function, all unreffed
iters will be invalid.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_website">
<description>
Sets the URL to use for the website link.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="website">
<parameter_description> a URL string starting with &quot;http://&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_filter_set_name">
<description>
Sets the human-readable name of the filter; this is the string
that will be displayed in the file selector user interface if
there is a selectable list of filters.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the human-readable-name for the filter, or %NULL
to remove any existing name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_steal">
<description>
Reparents a pre-existing toplevel window into a #GtkSocket. This is
meant to embed clients that do not know about embedding into a
#GtkSocket, however doing so is inherently unreliable, and using
this function is not recommended.

The #GtkSocket must have already be added into a toplevel window
before you can make this call.

</description>
<parameters>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
<parameter name="wid">
<parameter_description> the window ID of an existing toplevel window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_set_allow_async">
<description>
Sets whether the gtk_print_operation_run() may return
before the print operation is completed. Note that
some platforms may not allow asynchronous operation.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="allow_async">
<parameter_description> %TRUE to allow asynchronous operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_targets_include_text">
<description>
Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide text.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data holds a list of targets,
and a suitable target for text is included, otherwise %FALSE.
</return>
</function>

<function name="gtk_color_button_get_title">
<description>
Gets the title of the color selection dialog.


</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton
</parameter_description>
</parameter>
</parameters>
<return> An internal string, do not free the return value

Since: 2.4
</return>
</function>

<function name="gtk_tool_item_set_homogeneous">
<description>
Sets whether @tool_item is to be allocated the same size as other
homogeneous items. The effect is that all homogeneous items will have
the same width as the widest of the items.

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> whether @tool_item is the same size as other homogeneous items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_style">
<description>
Retrieves whether the toolbar has text, icons, or both . See
gtk_toolbar_set_style().
 

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the current style of @toolbar
</return>
</function>

<function name="_gtk_file_chooser_set_current_folder_path">
<description>
Sets the current folder for @chooser from a #GtkFilePath.
Internal function, see gtk_file_chooser_set_current_folder_uri().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the #GtkFilePath for the new folder
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be changed successfully, %FALSE
otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_combo_box_get_column_span_column">
<description>
Returns: the column span column.

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the column span column.

Since: 2.6
</return>
</function>

<function name="gtk_toggle_button_set_mode">
<description>
Sets whether the button is displayed as a separate indicator and label.
You can call this function on a checkbutton or a radiobutton with
@draw_indicator = %FALSE to make the button look like a normal button

This function only affects instances of classes like #GtkCheckButton
and #GtkRadioButton that derive from #GtkToggleButton,
not instances of #GtkToggleButton itself.

</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
<parameter name="draw_indicator">
<parameter_description> if %TRUE, draw the button as a separate indicator
and label; if %FALSE, draw the button like a normal button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_base">
<description>
Sets the base color for a widget in a particular state.
All other style values are left untouched. The base color
is the background color used along with the text color
(see gtk_widget_modify_text()) for widgets such as #GtkEntry
and #GtkTextView. See also gtk_widget_modify_style().

Note that &quot;no window&quot; widgets (which have the %GTK_NO_WINDOW flag set)
draw on their parent container&apos;s window and thus may not draw any 
background themselves. This is the case for e.g. #GtkLabel. To modify 
the background of such widgets, you have to set the base color on their 
parent; if you want to set the background of a rectangular area around 
a label, try placing the label in a #GtkEventBox widget and setting 
the base color on that.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the base color
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_base().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_list_shortcut_folders">
<description>
Queries the list of shortcut folders in the file chooser, as set by
gtk_file_chooser_add_shortcut_folder().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> A list of folder filenames, or %NULL if there are no shortcut
folders.  Free the returned list with g_slist_free(), and the filenames with
g_free().

Since: 2.4
</return>
</function>

<function name="gtk_window_get_transient_for">
<description>
Fetches the transient parent for this window. See
gtk_window_set_transient_for().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the transient parent for this window, or %NULL
if no transient parent has been set.
</return>
</function>

<function name="gtk_window_set_has_frame">
<description>
(Note: this is a special-purpose function for the framebuffer port,
that causes GTK+ to draw its own window border. For most applications,
you want gtk_window_set_decorated() instead, which tells the window
manager whether to draw the window border.)

If this function is called on a window with setting of %TRUE, before
it is realized or showed, it will have a &quot;frame&quot; window around
@window-&amp;gt;window, accessible in @window-&amp;gt;frame. Using the signal 
frame_event you can receive all events targeted at the frame.

This function is used by the linux-fb port to implement managed
windows, but it could conceivably be used by X-programs that
want to do their own window decorations.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert">
<description>
Inserts @len bytes of @text at position @iter.  If @len is -1,
@text must be nul-terminated and will be inserted in its
entirety. Emits the &quot;insert_text&quot; signal; insertion actually occurs
in the default handler for the signal. @iter is invalidated when
insertion occurs (because the buffer contents change), but the
default signal handler revalidates it to point to the end of the
inserted text.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in the buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 format text to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text in bytes, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_group_new">
<description>
Creates a new #GtkWindowGroup object. Grabs added with
gtk_grab_add() only affect windows within the same #GtkWindowGroup.


</description>
<parameters>
</parameters>
<return> a new #GtkWindowGroup. 
</return>
</function>

<function name="gtk_tree_view_column_set_expand">
<description>
Sets the column to take available extra space.  This space is shared equally
amongst all columns that have the expand set to %TRUE.  If no column has this
option set, then the last column gets all extra space.  By default, every
column is created with this %FALSE.

Since: 2.4

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if the column should take available extra space, %FALSE if not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_new_with_attributes">
<description>
Creates a new #GtkTreeViewColumn with a number of default values.  This is
equivalent to calling gtk_tree_view_column_set_title(),
gtk_tree_view_column_pack_start(), and
gtk_tree_view_column_set_attributes() on the newly created #GtkTreeViewColumn.

Here&apos;s a simple example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
enum { TEXT_COLUMN, COLOR_COLUMN, N_COLUMNS };
...
{
GtkTreeViewColumn *column;
GtkCellRenderer   *renderer = gtk_cell_renderer_text_new (&amp;lt;!-- --&amp;gt;);

column = gtk_tree_view_column_new_with_attributes (&quot;Title&quot;,
renderer,
&quot;text&quot;, TEXT_COLUMN,
&quot;foreground&quot;, COLOR_COLUMN,
NULL);
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="title">
<parameter_description> The title to set the header to.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreeViewColumn.
</return>
</function>

<function name="gtk_color_selection_set_palette_color">
<description>
Sets the palette located at @index to have @color as its color.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the color index of the palette.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #GdkColor to set the palette with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set_column_types">
<description>
This function is meant primarily for #GObjects that inherit from #GtkListStore,
and should only be used when constructing a new #GtkListStore.  It will not
function after a row has been added, or a method on the #GtkTreeModel
interface is called.

</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> Number of columns for the list store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> An array length n of #GTypes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_mnemonic_widget">
<description>
If the label has been set so that it has an mnemonic key (using
i.e. gtk_label_set_markup_with_mnemonic(),
gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()
or the &quot;use_underline&quot; property) the label can be associated with a
widget that is the target of the mnemonic. When the label is inside
a widget (like a #GtkButton or a #GtkNotebook tab) it is
automatically associated with the correct widget, but sometimes
(i.e. when the target is a #GtkEntry next to the label) you need to
set it explicitly using this function.

The target widget will be accelerated by emitting the 
GtkWidget::mnemonic-activate signal on it. The default handler for 
this signal will activate the widget if there are no mnemonic collisions 
and toggle focus between the colliding widgets otherwise.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the target #GtkWidget 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_current_folder_uri">
<description>
Gets the current folder of @chooser as an URI.
See gtk_file_chooser_set_current_folder_uri().

Note that this is the folder that the file chooser is currently displaying
(e.g. &quot;file:///home/username/Documents&quot;), which is &amp;lt;emphasis&amp;gt;not the same&amp;lt;/emphasis&amp;gt;
as the currently-selected folder if the chooser is in
#GTK_FILE_CHOOSER_SELECT_FOLDER mode
(e.g. &quot;file:///home/username/Documents/selected-folder/&quot;.  To get the
currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
usual way to get the selection.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the URI for the current folder.  Free with g_free().  This
function will also return %NULL if the file chooser was unable to load the
last folder that was requested from it; for example, as would be for calling
gtk_file_chooser_set_current_folder_uri() on a nonexistent folder.

Since: 2.4
</return>
</function>

<function name="_gtk_menu_is_empty">
<description>
Determines whether @menu is empty. A menu is considered empty if it
the only visible children are tearoff menu items or &quot;filler&quot; menu 
items which were inserted to mark the menu as empty.

This function is used by #GtkAction.


</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @menu is empty.
</return>
</function>

<function name="gtk_size_group_new">
<description>
Create a new #GtkSizeGroup.
 

</description>
<parameters>
<parameter name="mode">
<parameter_description> the mode for the new size group.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GtkSizeGroup
</return>
</function>

<function name="gtk_clipboard_request_rich_text">
<description>
Requests the contents of the clipboard as rich text. When the rich
text is later received, @callback will be called.

The @text parameter to @callback will contain the resulting rich
text if the request succeeded, or %NULL if it failed. The @length
parameter will contain @text&apos;s length. This function can fail for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into rich text form.

Since: 2.10

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description>    a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  a function to call when the text is received,
or the retrieval fails. (It will always be called
one way or the other.)
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_get_image">
<description>
Gets the widget that is currenty set as the image of @button.
This may have been explicitly set by gtk_button_set_image()
or constructed by gtk_button_new_from_stock().


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> a #GtkWidget or %NULL in case there is no image

Since: 2.6
</return>
</function>

<function name="gtk_print_context_get_dpi_y">
<description>
Obtains the vertical resolution of the #GtkPrintContext,
in dots per inch.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the vertical resolution of @context

Since: 2.10
</return>
</function>

<function name="gtk_print_context_get_dpi_x">
<description>
Obtains the horizontal resolution of the #GtkPrintContext,
in dots per inch.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the horizontal resolution of @context

Since: 2.10
</return>
</function>

<function name="gtk_radio_action_set_group">
<description>
Sets the radio group for the radio action object.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> a list representing a radio group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_word_start">
<description>
Moves backward to the previous word start. (If @iter is currently on a
word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_file_chooser_button_new">
<description>
Creates a new file-selecting button widget.


</description>
<parameters>
<parameter name="title">
<parameter_description> the title of the browse dialog.
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the open mode for the widget.
</parameter_description>
</parameter>
</parameters>
<return> a new button widget.

Since: 2.6
</return>
</function>

<function name="gtk_print_operation_get_default_page_setup">
<description>
Returns: the default page setup 

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
</parameters>
<return> the default page setup 

Since: 2.10
</return>
</function>

<function name="gtk_page_setup_get_paper_width">
<description>
Return value: the paper width.

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the paper width.

Since: 2.10
</return>
</function>

<function name="gtk_toolbar_set_drop_highlight_item">
<description>
Highlights @toolbar to give an idea of what it would look like
if @item was added to @toolbar at the position indicated by @index_. 
If @item is %NULL, highlighting is turned off. In that case @index_ 
is ignored.

The @tool_item passed to this function must not be part of any widget
hierarchy. When an item is set as drop highlight item it can not
added to any widget hierarchy or used as highlight item for another
toolbar.

Since: 2.4

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem, or %NULL to turn of highlighting
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> a position on @toolbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_get_show_private">
<description>
Return value: %TRUE if the recent chooser should show private items,

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the recent chooser should show private items,
%FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_clipboard_wait_is_target_available">
<description>
Checks if a clipboard supports pasting data of a given type. This
function can be used to determine if a &quot;Paste&quot; menu item should be
insensitive or not.

If you want to see if there&apos;s text available on the clipboard, use
gtk_clipboard_wait_is_text_available () instead.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description>    A #GdkAtom indicating which target to look for.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the target is available, %FALSE otherwise.

Since: 2.6
</return>
</function>

<function name="gtk_drag_set_icon_default">
<description>
Sets the icon for a particular drag to the default
icon.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
             with a  context for the source side of a drag)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_copy">
<description>
Creates a copy of @source; mostly useful for language bindings.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkIconSource
</return>
</function>

<function name="gtk_icon_view_set_tooltip_item">
<description>
Sets the tip area of @tooltip to be the area covered by the item at @path.
See also gtk_tooltip_set_tip_area().

Since: 2.12

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_render_icon">
<description>
A convenience function that uses the theme engine and RC file
settings for @widget to look up @stock_id and render it to
a pixbuf. @stock_id should be a stock icon ID such as
#GTK_STOCK_OPEN or #GTK_STOCK_OK. @size should be a size
such as #GTK_ICON_SIZE_MENU. @detail should be a string that
identifies the widget or code doing the rendering, so that
theme engines can special-case rendering for that widget or code.

The pixels in the returned #GdkPixbuf are shared with the rest of
the application and should not be modified. The pixbuf should be freed
after use with g_object_unref().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a stock ID
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock size. A size of (GtkIconSize)-1 means render at 
the size of the source and don&apos;t scale (if there are multiple 
source sizes, GTK+ picks one of the available sizes).
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> render detail to pass to theme engine
</parameter_description>
</parameter>
</parameters>
<return> a new pixbuf, or %NULL if the stock ID wasn&apos;t known
</return>
</function>

<function name="gtk_selection_data_set_pixbuf">
<description>
Sets the contents of the selection from a #GdkPixbuf
The pixbuf is converted to the form determined by
@selection_data-&amp;gt;target.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection was successfully set,
otherwise %FALSE.

Since: 2.6
</return>
</function>

<function name="gtk_tree_row_reference_get_model">
<description>
Return value: the model

</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference
</parameter_description>
</parameter>
</parameters>
<return> the model

Since: 2.8
</return>
</function>

<function name="gtk_combo_box_popdown">
<description>
Hides the menu or dropdown list of @combo_box.

This function is mostly intended for use by accessibility technologies;
applications should have little use for it.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_tree_selection_new">
<description>
Creates a new #GtkTreeSelection object.  This function should not be invoked,
as each #GtkTreeView will create its own #GtkTreeSelection.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreeSelection object.
</return>
</function>

<function name="gtk_text_layout_set_cursor_visible">
<description>
Sets whether the insertion cursor should be shown. Generally,
widgets using #GtkTextLayout will hide the cursor when the
widget does not have the input focus.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="cursor_visible">
<parameter_description> If %FALSE, then the insertion cursor will not
be shown, even if the text is editable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set_column_types">
<description>
This function is meant primarily for #GObjects that inherit from 
#GtkTreeStore, and should only be used when constructing a new 
#GtkTreeStore.  It will not function after a row has been added, 
or a method on the #GtkTreeModel interface is called.

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> Number of columns for the tree store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> An array of #GType types, one for each column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_convert">
<description>
Requests the contents of a selection. When received, 
a &quot;selection_received&quot; signal will be generated.


</description>
<parameters>
<parameter name="widget">
<parameter_description> The widget which acts as requestor
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> Which selection to get
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> Form of information desired (e.g., STRING)
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> Time of request (usually of triggering event)
       In emergency, you could use #GDK_CURRENT_TIME
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if requested succeeded. %FALSE if we could not process
request. (e.g., there was already a request in process for
this widget).
</return>
</function>

<function name="gtk_tree_view_set_reorderable">
<description>
This function is a convenience function to allow you to reorder models that
support the #GtkDragSourceIface and the #GtkDragDestIface.  Both
#GtkTreeStore and #GtkListStore support these.  If @reorderable is %TRUE, then
the user can reorder the model by dragging and dropping rows.  The
developer can listen to these changes by connecting to the model&apos;s
row_inserted and row_deleted signals.

This function does not give you any degree of control over the order -- any
reordering is allowed.  If more control is needed, you should probably
handle drag and drop manually.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="reorderable">
<parameter_description> %TRUE, if the tree can be reordered.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_to_file">
<description>
This function saves the information from @setup to @file_name.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="file_name">
<parameter_description> the file to save to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success

Since: 2.12
</return>
</function>

<function name="gtk_combo_box_set_column_span_column">
<description>
Sets the column with column span information for @combo_box to be
@column_span. The column span column contains integers which indicate
how many columns an item should span.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
<parameter name="column_span">
<parameter_description> A column in the model passed during construction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_scroll_adjustments">
<description>
For widgets that support scrolling, sets the scroll adjustments and
Return value: %TRUE if the widget supports scrolling

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="hadjustment">
<parameter_description> an adjustment for horizontal scrolling, or %NULL
</parameter_description>
</parameter>
<parameter name="vadjustment">
<parameter_description> an adjustment for vertical scrolling, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget supports scrolling
</return>
</function>

<function name="gtk_text_buffer_unregister_serialize_format">
<description>
This function unregisters a rich text format that was previously
registered using gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset()

Since: 2.10

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GdkAtom representing a registered rich text format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_position">
<description>
Sets the cursor position in an entry to the given value. 

Deprecated: Use gtk_editable_set_position() instead.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description>  the position of the cursor. The cursor is displayed
before the character with the given (base 0) index in the widget. 
The value must be less than or equal to the number of characters 
in the widget. A value of -1 indicates that the position should
be set after the last character in the entry. Note that this 
position is in characters, not in bytes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_im_module_file">
<description>
Obtains the path to the IM modules file. See the documentation
of the &amp;lt;link linkend=&quot;im-module-file&quot;&amp;gt;&amp;lt;envar&amp;gt;GTK_IM_MODULE_FILE&amp;lt;/envar&amp;gt;&amp;lt;/link&amp;gt;
environment variable for more details.

</description>
<parameters>
</parameters>
<return> a newly-allocated string containing the name of the file
listing the IM modules available for loading
</return>
</function>

<function name="gtk_accel_group_query">
<description>
Queries an accelerator group for all entries matching @accel_key and 
@accel_mods.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to query
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>        key value of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>       modifier combination of the accelerator
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description>        location to return the number of entries found, or %NULL
</parameter_description>
</parameter>
</parameters>
<return>          an array of @n_entries #GtkAccelGroupEntry elements, or %NULL. The array is owned by GTK+ and must not be freed. 
</return>
</function>

<function name="gtk_hsv_to_rgb">
<description>
Converts a color from RGB space to HSV.  Input values must be in the
[0.0, 1.0] range; output values will be in the same range.

</description>
<parameters>
<parameter name="r">
<parameter_description> Red.
</parameter_description>
</parameter>
<parameter name="g">
<parameter_description> Green.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Blue.
</parameter_description>
</parameter>
<parameter name="h">
<parameter_description> Return value for the hue component.
</parameter_description>
</parameter>
<parameter name="s">
<parameter_description> Return value for the saturation component.
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> Return value for the value component.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_get_page_width">
<description>
Return value: the page width.

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the page width.

Since: 2.10
</return>
</function>

<function name="gtk_text_buffer_serialize">
<description>
This function serializes the portion of text between @start
and @end in the rich text format represented by @format.

@format&amp;lt;!-- --&amp;gt;s to be used must be registered using
gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset() beforehand.


</description>
<parameters>
<parameter name="register_buffer">
<parameter_description> the #GtkTextBuffer @format is registered with
</parameter_description>
</parameter>
<parameter name="content_buffer">
<parameter_description> the #GtkTextBuffer to serialize
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the rich text format to use for serializing
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of block of text to serialize
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of block of test to serialize
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the serialized data
</parameter_description>
</parameter>
</parameters>
<return> the serialized data, encoded as @format

Since: 2.10
</return>
</function>

<function name="gtk_combo_box_get_active_iter">
<description>
Sets @iter to point to the current active item, if it exists.


</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The uninitialized #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_new_with_model">
<description>
Creates a new #GtkTreeView widget with the model initialized to @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> the model.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreeView widget.
</return>
</function>

<function name="GtkStatusIcon">
<description>
Gets emitted when the size available for the image
changes, e.g. because the notification area got resized.


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the new size
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the icon was updated for the new
size. Otherwise, GTK+ will scale the icon as necessary.

Since: 2.10
</return>
</function>

<function name="gtk_cell_layout_clear">
<description>
Unsets all the mappings on all renderers on @cell_layout and
removes all renderers from @cell_layout.

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_show_tabs">
<description>
Sets whether to show the tabs for the notebook or not.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="show_tabs">
<parameter_description> %TRUE if the tabs should be shown.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkMenuBar">
<description>
The pack direction of the menubar. It determines how
the widgets contained in child menuitems are arranged.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_size_wildcarded">
<description>
If the icon size is wildcarded, this source can be used as the base
image for an icon of any size.  If the size is not wildcarded, then
the size the source applies to should be set with
gtk_icon_source_set_size() and the icon source will only be used
with that specific size.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.

#GtkIconSet will normally scale wildcarded source images to produce
an appropriate icon at a given size, but will not change the size
of source images that match exactly.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to wildcard the widget state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_tab">
<description>
Draws an option menu tab (i.e. the up and down pointing arrows)
in the given rectangle on @window using the given parameters.

Deprecated: Use gtk_paint_tab() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the tab in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_target_list_ref">
<description>
Increases the reference count of a #GtkTargetList by one.


</description>
<parameters>
<parameter name="list">
<parameter_description>  a #GtkTargetList
</parameter_description>
</parameter>
</parameters>
<return> the passed in #GtkTargetList.
</return>
</function>

<function name="gtk_adjustment_get_value">
<description>
Gets the current value of the adjustment. See
gtk_adjustment_set_value ().


</description>
<parameters>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment
</parameter_description>
</parameter>
</parameters>
<return> The current value of the adjustment.
</return>
</function>

<function name="gtk_print_settings_set_scale">
<description>
Sets the value of %GTK_PRINT_SETTINGS_SCALE.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="scale">
<parameter_description> the scale in percent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_parent_window">
<description>
Gets @widget&apos;s parent window.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
</parameters>
<return> the parent window of @widget.
</return>
</function>

<function name="gtk_window_move">
<description>
Asks the &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; to move
@window to the given position.  Window managers are free to ignore
this; most window managers ignore requests for initial window
positions (instead using a user-defined placement algorithm) and
honor requests after the window has already been shown.

Note: the position is the position of the gravity-determined
reference point for the window. The gravity determines two things:
first, the location of the reference point in root window
coordinates; and second, which point on the window is positioned at
the reference point.

By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
point is simply the @x, @y supplied to gtk_window_move(). The
top-left corner of the window decorations (aka window frame or
border) will be placed at @x, @y.  Therefore, to position a window
at the top left of the screen, you want to use the default gravity
(which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.

To position a window at the bottom right corner of the screen, you
would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
point is at @x + the window width and @y + the window height, and
the bottom-right corner of the window border will be placed at that
reference point. So, to place a window in the bottom right corner
you would first set gravity to south east, then write:
&amp;lt;literal&amp;gt;gtk_window_move (window, gdk_screen_width () - window_width,
gdk_screen_height () - window_height)&amp;lt;/literal&amp;gt; (note that this
example does not take multi-head scenarios into account).

The Extended Window Manager Hints specification at &amp;lt;ulink 
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&amp;gt;
http://www.freedesktop.org/Standards/wm-spec&amp;lt;/ulink&amp;gt; has a 
nice table of gravities in the &quot;implementation notes&quot; section.

The gtk_window_get_position() documentation may also be relevant.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to move window to
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to move window to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_inner_border">
<description>
This function returns the entry&apos;s #GtkEntry:inner-border property. See
gtk_entry_set_inner_border() for more information.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the entry&apos;s #GtkBorder, or %NULL if none was set.

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_get_child_anchor">
<description>
If the location at @iter contains a child anchor, the
anchor is returned (with no new reference count added). Otherwise,
%NULL is returned.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> the anchor at @iter
</return>
</function>

<function name="gtk_action_unblock_activate_from">
<description>
Re-enables calls to the gtk_action_activate()
function by signals on the given proxy widget.  This undoes the
blocking done by gtk_action_block_activate_from().

This function is intended for use by action implementations.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="proxy">
<parameter_description> a proxy widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_get_status">
<description>
Return value: the status of the print operation

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
</parameters>
<return> the status of the print operation

Since: 2.10
</return>
</function>

<function name="gtk_radio_button_new_with_mnemonic">
<description>
Creates a new #GtkRadioButton containing a label, adding it to the same 
group as @group. The label will be created using 
gtk_label_new_with_mnemonic(), so underscores in @label indicate the 
mnemonic for the button.

</description>
<parameters>
<parameter name="group">
<parameter_description> the radio button group
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRadioButton
</return>
</function>

<function name="gtk_notebook_get_group">
<description>
Gets the current group identificator pointer for @notebook.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the group identificator, or %NULL if none is set.

Since: 2.12
</return>
</function>

<function name="gtk_recent_filter_new">
<description>
Creates a new #GtkRecentFilter with no rules added to it.
Such filter does not accept any recently used resources, so is not
particularly useful until you add rules with
gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),
gtk_recent_filter_add_application(), gtk_recent_filter_add_age().
To create a filter that accepts any recently used resource, use:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkRecentFilter *filter = gtk_recent_filter_new (&amp;lt;!-- --&amp;gt;);
gtk_recent_filter_add_pattern (filter, &quot;*&quot;);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
</parameters>
<return> a new #GtkRecentFilter

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_set_hover_expand">
<description>
Enables of disables the hover expansion mode of @tree_view.
Hover expansion makes rows expand or collaps if the pointer 
moves over them.

Since: 2.6

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE to enable hover selection mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_plug_focus_first_last">
<description>
@plug: a #GtkPlug
@direction: a direction

Called from the GtkPlug backend when the corresponding socket has
told the plug that it has received the focus.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_color_button_new">
<description>
Creates a new color button. This returns a widget in the form of
a small button containing a swatch representing the current selected 
color. When the button is clicked, a color-selection dialog will open, 
allowing the user to select a color. The swatch will be updated to reflect 
the new color when the user finishes.


</description>
<parameters>
</parameters>
<return> a new color button.

Since: 2.4
</return>
</function>

<function name="gtk_tree_set_row_drag_data">
<description>
Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
in a drag_data_get handler.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> some #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a row in @tree_model
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #GtkSelectionData had the proper target type to allow us to set a tree row
</return>
</function>

<function name="gtk_text_view_get_visible_rect">
<description>
Fills @visible_rect with the currently-visible
region of the buffer, in buffer coordinates. Convert to window coordinates
with gtk_text_view_buffer_to_window_coords().

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="visible_rect">
<parameter_description> rectangle to fill
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_min_width">
<description>
Return value: The minimum width of the @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The minimum width of the @tree_column.
</return>
</function>

<function name="gtk_widget_class_install_style_property_parser">
<description>
Installs a style property on a widget class. 

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GtkWidgetClass
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the style property
</parameter_description>
</parameter>
<parameter name="parser">
<parameter_description> the parser for the style property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_backward_display_line">
<description>
Moves the given @iter backward by one display (wrapped) line.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_radio_action_new">
<description>
Creates a new #GtkRadioAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().


</description>
<parameters>
<parameter name="name">
<parameter_description> A unique name for the action
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> The label displayed in menu items and on buttons
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> A tooltip for this action
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> The stock icon to display in widgets representing this action
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The value which gtk_radio_action_get_current_value() should return
if this action is selected.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRadioAction

Since: 2.4
</return>
</function>

<function name="gtk_widget_add_events">
<description>
Adds the events in the bitfield @events to the event mask for
@widget. See gtk_widget_set_events() for details.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> an event mask, see #GdkEventMask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_get_has_palette">
<description>
Determines whether the color selector has a color palette.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selector has a palette.  %FALSE if it hasn&apos;t.
</return>
</function>

<function name="gtk_about_dialog_set_translator_credits">
<description>
Sets the translator credits string which is displayed in
the translators tab of the secondary credits dialog.

The intended use for this string is to display the translator
of the language which is currently used in the user interface.
Using gettext(), a simple way to achieve that is to mark the
string for translation:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_about_dialog_set_translator_credits (about, _(&quot;translator-credits&quot;));
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;
It is a good idea to use the customary msgid &quot;translator-credits&quot; for this
purpose, since translators will already know the purpose of that msgid, and
since #GtkAboutDialog will detect if &quot;translator-credits&quot; is untranslated
and hide the tab.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="translator_credits">
<parameter_description> the translator credits
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_im_module_path">
<description>
Obtains the path in which to look for IM modules. See the documentation
of the &amp;lt;link linkend=&quot;im-module-path&quot;&amp;gt;&amp;lt;envar&amp;gt;GTK_PATH&amp;lt;/envar&amp;gt;&amp;lt;/link&amp;gt;
environment variable for more details about looking up modules. This
function is useful solely for utilities supplied with GTK+ and should
not be used by applications under normal circumstances.

</description>
<parameters>
</parameters>
<return> a newly-allocated string containing the path in which to 
look for IM modules.
</return>
</function>

<function name="gtk_text_buffer_get_iter_at_offset">
<description>
Initializes @iter to a position @char_offset chars from the start
of the entire buffer. If @char_offset is -1 or greater than the number
of characters in the buffer, @iter is initialized to the end iterator,
the iterator one past the last valid character in the buffer.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="char_offset">
<parameter_description> char offset from start of buffer, counting from 0, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_size_group_get_ignore_hidden">
<description>
Returns: %TRUE if invisible widgets are ignored.

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if invisible widgets are ignored.

Since: 2.8
</return>
</function>

<function name="gtk_tree_model_sort_iter_is_valid">
<description>
&amp;lt;warning&amp;gt;&amp;lt;para&amp;gt;
This function is slow. Only use it for debugging and/or testing purposes.
&amp;lt;/para&amp;gt;&amp;lt;/warning&amp;gt;

Checks if the given iter is a valid iter for this #GtkTreeModelSort.


</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iter is valid, %FALSE if the iter is invalid.

Since: 2.2
</return>
</function>

<function name="gtk_spin_button_get_update_policy">
<description>
Gets the update behavior of a spin button. See
gtk_spin_button_set_update_policy().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the current update policy
</return>
</function>

<function name="gtk_image_get_pixel_size">
<description>
Gets the pixel size used for named icons.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> the pixel size used for named icons.

Since: 2.6
</return>
</function>

<function name="gtk_text_view_get_border_window_size">
<description>
Gets the width of the specified border window. See
gtk_text_view_set_border_window_size().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> window to return size from
</parameter_description>
</parameter>
</parameters>
<return> width of window
</return>
</function>

<function name="gtk_cell_renderer_toggle_set_active">
<description>
Activates or deactivates a cell renderer.

</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle.
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> the value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_decorated">
<description>
Return value: %TRUE if the window has been set to have decorations

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window has been set to have decorations
</return>
</function>

<function name="gtk_entry_completion_get_popup_completion">
<description>
Return value: %TRUE if popup completion is turned on

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if popup completion is turned on

Since: 2.6
</return>
</function>

<function name="gtk_widget_modify_font">
<description>
Sets the font to use for a widget.  All other style values are left
untouched. See also gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> the font description to use, or %NULL to undo
the effect of previous calls to gtk_widget_modify_font().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_statusbar_remove">
<description>
Forces the removal of a message from a statusbar&apos;s stack. 
The exact @context_id and @message_id must be specified.

</description>
<parameters>
<parameter name="statusbar">
<parameter_description> a #GtkStatusBar
</parameter_description>
</parameter>
<parameter name="context_id">
<parameter_description> a context identifier
</parameter_description>
</parameter>
<parameter name="message_id">
<parameter_description> a message identifier, as returned by gtk_statusbar_push()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_tool_button_set_arrow_tooltip_text">
<description>
Sets the tooltip text to be used as tooltip for the arrow button which
pops up the menu.  See gtk_tool_item_set_tooltip() for setting a tooltip
on the whole #GtkMenuToolButton.

Since: 2.12

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkMenuToolButton
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text to be used as tooltip text for button&apos;s arrow button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_sensitive">
<description>
Sets the sensitivity of a widget. A widget is sensitive if the user
can interact with it. Insensitive widgets are &quot;grayed out&quot; and the
user can&apos;t interact with them. Insensitive widgets are known as
&quot;inactive&quot;, &quot;disabled&quot;, or &quot;ghosted&quot; in some other toolkits.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="sensitive">
<parameter_description> %TRUE to make the widget sensitive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_set_show_progress">
<description>
If @show_progress is %TRUE, the print operation will show a 
progress dialog during the print operation.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="show_progress">
<parameter_description> %TRUE to show a progress dialog
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_target_list_new">
<description>
Creates a new #GtkTargetList from an array of #GtkTargetEntry.


</description>
<parameters>
<parameter name="targets">
<parameter_description> Pointer to an array of #GtkTargetEntry
</parameter_description>
</parameter>
<parameter name="ntargets">
<parameter_description>  number of entries in @targets.
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkTargetList.
</return>
</function>

<function name="gtk_text_view_set_pixels_above_lines">
<description>
Sets the default number of blank pixels above paragraphs in @text_view.
Tags in the buffer for @text_view may override the defaults.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="pixels_above_lines">
<parameter_description> pixels above paragraphs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_set_print_settings">
<description>
Sets the print settings for @op. This is typically used to
re-establish print settings from a previous print operation,
see gtk_print_operation_run().

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="print_settings">
<parameter_description> #GtkPrintSettings, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_tool_button_set_arrow_tooltip_markup">
<description>
Sets the tooltip markup text to be used as tooltip for the arrow button
which pops up the menu.  See gtk_tool_item_set_tooltip() for setting a
tooltip on the whole #GtkMenuToolButton.

Since: 2.12

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkMenuToolButton
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> markup text to be used as tooltip text for button&apos;s arrow button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_is_important">
<description>
Sets whether @tool_item should be considered important. The #GtkToolButton
class uses this property to determine whether to show or hide its label
when the toolbar style is %GTK_TOOLBAR_BOTH_HORIZ. The result is that
only tool buttons with the &quot;is_important&quot; property set have labels, an
effect known as &quot;priority text&quot;

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem
</parameter_description>
</parameter>
<parameter name="is_important">
<parameter_description> whether the tool item should be considered important
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set_column_type">
<description>
Supported types include: %G_TYPE_UINT, %G_TYPE_INT, %G_TYPE_UCHAR,
%G_TYPE_CHAR, %G_TYPE_BOOLEAN, %G_TYPE_POINTER, %G_TYPE_FLOAT,
%G_TYPE_DOUBLE, %G_TYPE_STRING, %G_TYPE_OBJECT, and %G_TYPE_BOXED, along with
subclasses of those types such as %GDK_TYPE_PIXBUF.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> a #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of the data to be stored in @column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_iter_nth_child">
<description>
Sets @iter to be the child of @parent, using the given index.  The first
index is 0.  If @n is too big, or @parent has no children, @iter is set
to an invalid iterator and %FALSE is returned.  @parent will remain a valid
node after this function has been called.  As a special case, if @parent is
%NULL, then the @n&amp;lt;!-- --&amp;gt;th root node is set.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to set to the nth child.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> The #GtkTreeIter to get the child from, or %NULL.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> Then index of the desired child.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @parent has an @n&amp;lt;!-- --&amp;gt;th child.
</return>
</function>

<function name="gtk_tree_view_column_set_sort_order">
<description>
Changes the appearance of the sort indicator. 

This &amp;lt;emphasis&amp;gt;does not&amp;lt;/emphasis&amp;gt; actually sort the model.  Use
gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
support.  This function is primarily for custom sorting behavior, and should
be used in conjunction with gtk_tree_sortable_set_sort_column() to do
that. For custom models, the mechanism will vary. 

The sort indicator changes direction to indicate normal sort or reverse sort.
Note that you must have the sort indicator enabled to see anything when 
calling this function; see gtk_tree_view_column_set_sort_indicator().

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> sort order that the sort indicator should indicate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_queue_draw">
<description>
Equivalent to calling gtk_widget_queue_draw_area() for the
entire area of a widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_plug_handle_modality_off">
<description>
@plug: a #GtkPlug

Called from the GtkPlug backend when the corresponding socket has
told the plug that it modality has toggled off.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_mnemonic_modifier">
<description>
Sets the mnemonic modifier for this window. 

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="modifier">
<parameter_description> the modifier mask used to activate
mnemonics on this window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_set_track_motion">
<description>
Tells the widget to emit ::drag-motion and ::drag-leave
events regardless of the targets and the %GTK_DEST_DEFAULT_MOTION
flag. 

This may be used when a widget wants to do generic
actions regardless of the targets that the source offers.

Since: 2.10

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
<parameter name="track_motion">
<parameter_description> whether to accept all targets
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_disable_setlocale">
<description>
Prevents gtk_init(), gtk_init_check(), gtk_init_with_args() and
gtk_parse_args() from automatically
calling &amp;lt;literal&amp;gt;setlocale (LC_ALL, &quot;&quot;)&amp;lt;/literal&amp;gt;. You would 
want to use this function if you wanted to set the locale for 
your program to something other than the user&apos;s locale, or if 
you wanted to set different values for different locale categories.

Most programs should not need to call this function.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_skip_taskbar_hint">
<description>
Gets the value set by gtk_window_set_skip_taskbar_hint()


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window shouldn&apos;t be in taskbar

Since: 2.2
</return>
</function>

<function name="gtk_icon_view_set_reorderable">
<description>
This function is a convenience function to allow you to reorder models that
support the #GtkTreeDragSourceIface and the #GtkTreeDragDestIface.  Both
#GtkTreeStore and #GtkListStore support these.  If @reorderable is %TRUE, then
the user can reorder the model by dragging and dropping rows.  The
developer can listen to these changes by connecting to the model&apos;s
row_inserted and row_deleted signals.

This function does not give you any degree of control over the order -- any
reordering is allowed.  If more control is needed, you should probably
handle drag and drop manually.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="reorderable">
<parameter_description> %TRUE, if the list of items can be reordered.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_get_pixbuf">
<description>
Gets the contents of the selection data as a #GdkPixbuf.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
</parameters>
<return> if the selection data contained a recognized
image type and it could be converted to a #GdkPixbuf, a 
newly allocated pixbuf is returned, otherwise %NULL.
If the result is non-%NULL it must be freed with g_object_unref().

Since: 2.6
</return>
</function>

<function name="gtk_about_dialog_set_artists">
<description>
Sets the strings which are displayed in the artists tab
of the secondary credits dialog. 

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="artists">
<parameter_description> a %NULL-terminated array of strings 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_page_set">
<description>
Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the set of pages to print

Since: 2.10
</return>
</function>

<function name="_gtk_find_module">
<description>
Looks for a dynamically module named @name of type @type in the standard GTK+
module search path.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the module
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of the module, for instance &apos;modules&apos;, &apos;engines&apos;, immodules&apos;
</parameter_description>
</parameter>
</parameters>
<return> the pathname to the found module, or %NULL if it wasn&apos;t found.
Free with g_free().
</return>
</function>

<function name="gtk_status_icon_set_from_icon_name">
<description>
Makes @status_icon display the icon named @icon_name from the 
current icon theme.
See gtk_status_icon_new_from_icon_name() for details.

Since: 2.10 

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_set_expanded">
<description>
Sets the state of the expander. Set to %TRUE, if you want
the child widget to be revealed, and %FALSE if you want the
child widget to be hidden.

Since: 2.4

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
<parameter name="expanded">
<parameter_description> whether the child widget is revealed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set_value">
<description>
Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_version">
<description>
Sets the version string to display in the about dialog.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the version string 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_get_size">
<description>
Obtains the width and height needed to render the cell. Used by view 
widgets to determine the appropriate size for the cell_area passed to
gtk_cell_renderer_render().  If @cell_area is not %NULL, fills in the
x and y offsets (if set) of the cell relative to this location. 

Please note that the values set in @width and @height, as well as those 
in @x_offset and @y_offset are inclusive of the xpad and ypad properties.

</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget the renderer is rendering to
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> The area a cell will be allocated, or %NULL
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> location to return x offset of cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> location to return y offset of cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to return width needed to render a cell, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to return height needed to render a cell, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_tool_button_set_group">
<description>
Adds @button to @group, removing it from the group it belonged to before.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkRadioToolButton
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> an existing radio button group
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_detach">
<description>
Detaches a style from a window. If the style is not attached
to any windows anymore, it is unrealized. See gtk_style_attach().


</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_shadow_gap">
<description>
Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type, leaving a 
gap in one side.

Deprecated: Use gtk_paint_shadow_gap() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="gap_side">
<parameter_description> side in which to leave the gap
</parameter_description>
</parameter>
<parameter name="gap_x">
<parameter_description> starting position of the gap
</parameter_description>
</parameter>
<parameter name="gap_width">
<parameter_description> width of the gap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_unfullscreen">
<description>
Asks to toggle off the fullscreen state for @window. Note that you
shouldn&apos;t assume the window is definitely not full screen
afterward, because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could fullscreen it
again, and not all window managers honor requests to unfullscreen
windows. But normally the window will end up restored to its normal
state. Just don&apos;t write code that crashes if not.

You can track the fullscreen state via the &quot;window_state_event&quot; signal
on #GtkWidget.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_is_valid">
<description>
Check if there are any invalid regions in a #GtkTextLayout&apos;s buffer


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if any invalid regions were found
</return>
</function>

<function name="gtk_tree_view_set_drag_dest_row">
<description>
Sets the row that is highlighted for feedback.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path of the row to highlight, or %NULL.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> Specifies whether to drop before, after or into the row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_scroll_mark_onscreen">
<description>
Scrolls @text_view the minimum distance such that @mark is contained
within the visible area of the widget.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a mark in the buffer for @text_view
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_for_contents">
<description>
Requests the contents of the clipboard using the given target.
This function waits for the data to be received using the main 
loop, so events, timeouts, etc, may be dispatched during the wait.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an atom representing the form into which the clipboard
owner should convert the selection.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GtkSelectionData object or %NULL
if retrieving the given target failed. If non-%NULL,
this value must be freed with gtk_selection_data_free() 
when you are finished with it.
</return>
</function>

<function name="gtk_entry_set_width_chars">
<description>
Changes the size request of the entry to be about the right size
for @n_chars characters. Note that it changes the size
&amp;lt;emphasis&amp;gt;request&amp;lt;/emphasis&amp;gt;, the size can still be affected by
how you pack the widget into containers. If @n_chars is -1, the
size reverts to the default entry size.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> width in chars
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_add_button">
<description>
Adds a button with the given text (or a stock button, if @button_text is a
stock ID) and sets things up so that clicking the button will emit the
#GtkDialog::response signal with the given @response_id. The button is 
appended to the end of the dialog&apos;s action area. The button widget is 
returned, but usually you don&apos;t need it.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="button_text">
<parameter_description> text of button, or stock ID
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> response ID for the button
</parameter_description>
</parameter>
</parameters>
<return> the button widget that was added
</return>
</function>

<function name="gtk_window_resize">
<description>
Resizes the window as if the user had done so, obeying geometry
constraints. The default geometry constraint is that windows may
not be smaller than their size request; to override this
constraint, call gtk_widget_set_size_request() to set the window&apos;s
request to a smaller value.

If gtk_window_resize() is called before showing a window for the
first time, it overrides any default size set with
gtk_window_set_default_size().

Windows may not be resized smaller than 1 by 1 pixels.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width in pixels to resize the window to
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height in pixels to resize the window to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_level_indentation">
<description>
Sets the amount of extra indentation for child levels to use in @tree_view
in addition to the default indentation.  The value should be specified in
pixels, a value of 0 disables this feature and in this case only the default
indentation will be used.
This does not have any visible effects for lists.

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="indentation">
<parameter_description> the amount, in pixels, of extra indentation in @tree_view.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_get_row_drag_data">
<description>
Obtains a @tree_model and @path from selection data of target type
%GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
This function can only be used if @selection_data originates from the same
process that&apos;s calling this function, because a pointer to the tree model
is being passed around. If you aren&apos;t in the same process, then you&apos;ll
get memory corruption. In the #GtkTreeDragDest drag_data_received handler,
you can assume that selection data of type %GTK_TREE_MODEL_ROW is
in from the current process. The returned path must be freed with
gtk_tree_path_free().


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row in @tree_model
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data had target type %GTK_TREE_MODEL_ROW and
is otherwise valid
</return>
</function>

<function name="gtk_icon_view_get_row_spacing">
<description>
Return value: the space between rows

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the space between rows

Since: 2.6
</return>
</function>

<function name="gtk_text_iter_can_insert">
<description>
Considering the default editability of the buffer, and tags that
affect editability, determines whether text inserted at @iter would
be editable. If text inserted at @iter would be editable then the
user should be allowed to insert text at @iter.
gtk_text_buffer_insert_interactive() uses this function to decide
whether insertions are allowed at a given position.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="default_editability">
<parameter_description> %TRUE if text is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether text inserted at @iter would be editable
</return>
</function>

<function name="gtk_entry_completion_set_match_func">
<description>
Sets the match function for @completion to be @func. The match function
is used to determine if a row should or should not be in the completion
list.

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The #GtkEntryCompletionMatchFunc to use.
</parameter_description>
</parameter>
<parameter name="func_data">
<parameter_description> The user data for @func.
</parameter_description>
</parameter>
<parameter name="func_notify">
<parameter_description> Destroy notifier for @func_data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_icon_size">
<description>
Return value: a #GtkIconSize indicating the icon size used for @tool_item

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem:
</parameter_description>
</parameter>
</parameters>
<return> a #GtkIconSize indicating the icon size used for @tool_item

Since: 2.4
</return>
</function>

<function name="gtk_recent_chooser_add_filter">
<description>
Adds @filter to the list of #GtkRecentFilter objects held by @chooser.

If no previous filter objects were defined, this function will call
gtk_recent_chooser_set_filter().

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_cursor_position">
<description>
Moves @iter forward by a single cursor position. Cursor positions
are (unsurprisingly) positions where the cursor can appear. Perhaps
surprisingly, there may not be a cursor position between all
characters. The most common example for European languages would be
a carriage return/newline sequence. For some Unicode characters,
the equivalent of say the letter &quot;a&quot; with an accent mark will be
represented as two characters, first the letter then a &quot;combining
mark&quot; that causes the accent to be rendered; so the cursor can&apos;t go
between those two characters. See also the #PangoLogAttr structure and
pango_break() function.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable
</return>
</function>

<function name="gtk_recent_chooser_set_sort_type">
<description>
Changes the sorting order of the recently used resources list displayed by
@chooser.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="sort_type">
<parameter_description> sort order that the chooser should use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_new">
<description>
Creates a #GtkTextTag. Configure the tag using object arguments,
i.e. using g_object_set().


</description>
<parameters>
<parameter name="name">
<parameter_description> tag name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTextTag
</return>
</function>

<function name="gtk_action_disconnect_accelerator">
<description>
Undoes the effect of one call to gtk_action_connect_accelerator().

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_set_right_margin">
<description>
Sets the right margin of the #GtkPageSetup.

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the new right margin in units of @unit
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the units for @margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_filter">
<description>
Gets the current filter; see gtk_file_chooser_set_filter().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the current filter, or %NULL

Since: 2.4
</return>
</function>

<function name="gtk_selection_data_get_targets">
<description>
Gets the contents of @selection_data as an array of targets.
This can be used to interpret the results of getting
the standard TARGETS target that is always supplied for
any selection.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> location to store an array of targets. The result
stored here must be freed with g_free().
</parameter_description>
</parameter>
<parameter name="n_atoms">
<parameter_description> location to store number of items in @targets.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data contains a valid
array of targets, otherwise %FALSE.
</return>
</function>

<function name="gtk_icon_source_get_direction_wildcarded">
<description>
Gets the value set by gtk_icon_source_set_direction_wildcarded().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this icon source is a base for any text direction variant
</return>
</function>

<function name="gtk_stock_set_translate_func">
<description>
Sets a function to be used for translating the @label of 
a stock item.

If no function is registered for a translation domain,
dgettext() is used.

Since: 2.8


</description>
<parameters>
<parameter name="domain">
<parameter_description> the translation domain for which @func shall be used
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GtkTranslateFunc 
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GtkDestroyNotify that is called when @data is 
no longer needed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set_valist">
<description>
See gtk_list_store_set(); this version takes a va_list for use by language
bindings.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> va_list of column/value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_size_group_queue_resize">
<description>
Queue a resize on a widget, and on all other widgets grouped with this widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_selectable">
<description>
Gets the value set by gtk_label_set_selectable().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user can copy text from the label
</return>
</function>

<function name="gtk_image_get_animation">
<description>
Gets the #GdkPixbufAnimation being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned animation.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> the displayed animation, or %NULL if the image is empty
</return>
</function>

<function name="gtk_window_activate_default">
<description>
Activates the default widget for the window, unless the current 
focused widget has been configured to receive the default action 
(see #GTK_RECEIVES_DEFAULT in #GtkWidgetFlags), in which case the
focused widget is activated. 


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a widget got activated.
</return>
</function>

<function name="gtk_selection_owner_set_for_display">
<description>
Claim ownership of a given selection for a particular widget, or,
if @widget is %NULL, release ownership of the selection.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #Gdkdisplay where the selection is set 
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> new selection owner (a #GdkWidget), or %NULL.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an interned atom representing the selection to claim.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp with which to claim the selection
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation succeeded 

Since: 2.2
</return>
</function>

<function name="gtk_text_buffer_set_modified">
<description>
Used to keep track of whether the buffer has been modified since the
last time it was saved. Whenever the buffer is saved to disk, call
gtk_text_buffer_set_modified (@buffer, FALSE). When the buffer is modified,
it will automatically toggled on the modified bit again. When the modified
bit flips, the buffer emits a &quot;modified_changed&quot; signal.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> modification flag setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_copy_values">
<description>
Copies the values from @src to @dest so that @dest has the same values
as @src. Frees existing values in @dest.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GtkTextAttributes
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> another #GtkTextAttributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_new_from_ppd">
<description>
Creates a new #GtkPaperSize object by using 
PPD information. 

If @ppd_name is not a recognized PPD paper name, 
@ppd_display_name, @width and @height are used to 
construct a custom #GtkPaperSize object.


</description>
<parameters>
<parameter name="ppd_name">
<parameter_description> a PPD paper name
</parameter_description>
</parameter>
<parameter name="ppd_display_name">
<parameter_description> the corresponding human-readable name
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the paper width, in points
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the paper height in points
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPaperSize, use gtk_paper_size_free()
to free it

Since: 2.10
</return>
</function>

<function name="gtk_action_set_visible">
<description>
Sets the ::visible property of the action to @visible. Note that 
this doesn&apos;t necessarily mean effective visibility. See 
gtk_action_is_visible() 
for that.

Since: 2.6

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> %TRUE to make the action visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_orientation">
<description>
Return value: the relative position of texts and icons 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the relative position of texts and icons 

Since: 2.6
</return>
</function>

<function name="gtk_menu_shell_select_first">
<description>
Select the first visible or selectable child of the menu shell;
don&apos;t select tearoff items unless the only item is a tearoff
item.

Since: 2.2

</description>
<parameters>
<parameter name="menu_shell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
<parameter name="search_sensitive">
<parameter_description> if %TRUE, search for the first selectable
menu item, otherwise select nothing if
the first item isn&apos;t sensitive. This
should be %FALSE if the menu is being
popped up initially.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_get_size">
<description>
Gets the size in pixels that is available for the image. 
Stock icons and named icons adapt their size automatically
if the size of the notification area changes. For other
storage types, the size-changed signal can be used to
react to size changes.

Note that the returned size is only meaningful while the 
status icon is embedded (see gtk_status_icon_is_embedded()).


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> the size that is available for the image

Since: 2.10
</return>
</function>

<function name="gtk_print_settings_has_key">
<description>
Return value: %TRUE, if @key has a value

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @key has a value

Since: 2.10
</return>
</function>

<function name="gtk_tree_model_row_has_child_toggled">
<description>
Emits the &quot;row_has_child_toggled&quot; signal on @tree_model.  This should be
called by models after the child state of a node changes.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the changed row
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the changed row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_get_action_groups">
<description>
Return value: a #GList of action groups. The list is owned by GTK+ 

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
</parameters>
<return> a #GList of action groups. The list is owned by GTK+ 
and should not be modified.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_get_bytes_in_line">
<description>
Return value: number of bytes in the line

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> number of bytes in the line
</return>
</function>

<function name="gtk_im_context_simple_add_table">
<description>
Adds an additional table to search to the input context.
Each row of the table consists of @max_seq_len key symbols
followed by two #guint16 interpreted as the high and low
words of a #gunicode value. Tables are searched starting
from the last added.

The table must be sorted in dictionary order on the
numeric value of the key symbol fields. (Values beyond
the length of the sequence should be zero.)

</description>
<parameters>
<parameter name="context_simple">
<parameter_description> A #GtkIMContextSimple
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the table 
</parameter_description>
</parameter>
<parameter name="max_seq_len">
<parameter_description> Maximum length of a sequence in the table
(cannot be greater than #GTK_MAX_COMPOSE_LEN)
</parameter_description>
</parameter>
<parameter name="n_seqs">
<parameter_description> number of sequences in the table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_get_paper_size">
<description>
Gets the paper size of the #GtkPageSetup.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
</parameters>
<return> the paper size

Since: 2.10
</return>
</function>

<function name="gtk_range_set_inverted">
<description>
Ranges normally move from lower to higher values as the
slider moves from top to bottom or left to right. Inverted
ranges have higher values at the top or on the right rather than
on the bottom or left.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to invert the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_get_n_pages">
<description>
Return value: The number of pages in the @assistant.

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
</parameters>
<return> The number of pages in the @assistant.

Since: 2.10
</return>
</function>

<function name="gtk_icon_source_get_icon_name">
<description>
Retrieves the source icon name, or %NULL if none is set. The
icon_name is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> icon name. This string must not be modified or freed.
</return>
</function>

<function name="gtk_progress_bar_set_text">
<description>
Causes the given @text to appear superimposed on the progress bar.

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> a UTF-8 string, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_set_show_style">
<description>
If @show_style is %TRUE, the font style will be displayed along with name of the selected font.

Since: 2.4

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
<parameter name="show_style">
<parameter_description> %TRUE if font style should be displayed in label.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_set">
<description>
Stores new data into a #GtkSelectionData object. Should
&amp;lt;emphasis&amp;gt;only&amp;lt;/emphasis&amp;gt; be called from a selection handler callback.
Zero-terminates the stored data.

</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a pointer to a #GtkSelectionData structure.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of selection data
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> format (number of bits in a unit)
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> pointer to the data (will be copied)
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of the data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_select_multiple">
<description>
Gets whether multiple files can be selected in the file
selector. See gtk_file_chooser_set_select_multiple().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if multiple files can be selected.

Since: 2.4
</return>
</function>

<function name="gtk_assistant_set_current_page">
<description>
Switches the page to @page_num. Note that this will only be necessary
in custom buttons, as the @assistant flow can be set with
gtk_assistant_set_forward_page_func().

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> index of the page to switch to, starting from 0.
If negative, the last page will be used. If greater
than the number of pages in the @assistant, nothing
will be done.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_pack_start_defaults">
<description>
Adds @widget to @box, packed with reference to the start of @box.
The child is packed after any other child packed with reference 
to the start of @box. 

Parameters for how to pack the child @widget, #GtkBox:expand, 
#GtkBox:fill and #GtkBox:padding, are given their default
values, %TRUE, %TRUE, and 0, respectively.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the #GtkWidget to be added to @box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_disconnect_proxy">
<description>
Disconnects a proxy widget from an action.  
Does &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; destroy the widget, however.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="proxy">
<parameter_description> the proxy widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkBuilder">
<description>
The translation domain used when translating property values that
have been marked as translatable in interface descriptions.
If the translation domain is %NULL, #GtkBuilder uses gettext(),
otherwise dgettext().

Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_button_get_focus_on_click">
<description>
Return value: %TRUE if the button grabs focus when it is clicked with

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkFileChooserButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the button grabs focus when it is clicked with
the mouse.

Since: 2.10
</return>
</function>

<function name="gtk_container_get_resize_mode">
<description>
Return value: the current resize mode

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the current resize mode
</return>
</function>

<function name="gtk_tree_view_column_set_clickable">
<description>
Sets the header to be active if @active is %TRUE.  When the header is active,
then it can take keyboard focus, and can be clicked.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="clickable">
<parameter_description> %TRUE if the header is active.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_get_icon_name">
<description>
Gets the icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.

Since: 2.6

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> place to store an icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> place to store an icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_width_chars">
<description>
Retrieves the desired width of @label, in characters. See
gtk_label_set_width_chars().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the width of the label in characters.

Since: 2.6
</return>
</function>

<function name="gtk_im_context_focus_in">
<description>
Notify the input method that the widget to which this
input context corresponds has gained focus. The input method
may, for example, change the displayed feedback to reflect
this change.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_menu_label_text">
<description>
Creates a new label and sets it as the menu label of @child.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
<parameter name="menu_text">
<parameter_description> the label text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_screen">
<description>
Get the #GdkScreen from the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow
at the top.

In general, you should only create screen specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen for the toplevel for this widget.

Since: 2.2
</return>
</function>

<function name="gtk_window_set_modal">
<description>
Sets a window modal or non-modal. Modal windows prevent interaction
with other windows in the same application. To keep modal dialogs
on top of main application windows, use
gtk_window_set_transient_for() to make the dialog transient for the
parent; most &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window managers&amp;lt;/link&amp;gt;
will then disallow lowering the dialog below the parent.



</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> whether the window is modal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_size_register_alias">
<description>
Registers @alias as another name for @target.
So calling gtk_icon_size_from_name() with @alias as argument
will return @target.


</description>
<parameters>
<parameter name="alias">
<parameter_description> an alias for @target
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an existing icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_get_page_height">
<description>
Return value: the page height.

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the page height.

Since: 2.10
</return>
</function>

<function name="gtk_tree_selection_select_path">
<description>
Select the row at @path.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be selected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_binding_entry_add_signal">
<description>
Override or install a new key binding for @keyval with @modifiers on
@binding_set.  When the binding is activated, @signal_name will be
emitted on the target widget, with @n_args @Varargs used as
arguments.

</description>
<parameters>
<parameter name="binding_set">
<parameter_description> @binding_set to install an entry for
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>      key value of binding to install
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>   key modifier of binding to install
</parameter_description>
</parameter>
<parameter name="signal_name">
<parameter_description> signal to execute upon activation
</parameter_description>
</parameter>
<parameter name="n_args">
<parameter_description>      number of arguments to @signal_name
@:            arguments to @signal_name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_set_show_arrow">
<description>
Sets whether to show an overflow menu when
@toolbar doesn&apos;t have room for all items on it. If %TRUE,
items that there are not room are available through an
overflow menu.

Since: 2.4

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="show_arrow">
<parameter_description> Whether to show an overflow menu
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_show_fill_level">
<description>
Gets whether the range displays the fill level graphically.


</description>
<parameters>
<parameter name="range">
<parameter_description> A #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @range shows the fill level.

Since: 2.12
</return>
</function>

<function name="gtk_tree_view_set_headers_clickable">
<description>
Allow the column title buttons to be clicked.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the columns are clickable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_set_label">
<description>
Sets the text of the label. If @label is %NULL,
the current label is removed.

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text to use as the label of the frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accelerator_parse">
<description>
Parses a string representing an accelerator. The
format looks like &quot;&amp;lt;Control&amp;gt;a&quot; or &quot;&amp;lt;Shift&amp;gt;&amp;lt;Alt&amp;gt;F1&quot; or
&quot;&amp;lt;Release&amp;gt;z&quot; (the last one is for key release).
The parser is fairly liberal and allows lower or upper case,
and also abbreviations such as &quot;&amp;lt;Ctl&amp;gt;&quot; and &quot;&amp;lt;Ctrl&amp;gt;&quot;.

If the parse fails, @accelerator_key and @accelerator_mods will
be set to 0 (zero).

</description>
<parameters>
<parameter name="accelerator">
<parameter_description>      string representing an accelerator
</parameter_description>
</parameter>
<parameter name="accelerator_key">
<parameter_description>  return location for accelerator keyval
</parameter_description>
</parameter>
<parameter name="accelerator_mods">
<parameter_description> return location for accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_layout_index_to_text_index">
<description>
Converts from a position in the entry contents (returned
by gtk_entry_get_text()) to a position in the
entry&apos;s #PangoLayout (returned by gtk_entry_get_layout(),
with text retrieved via pango_layout_get_text()).


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="layout_index">
<parameter_description> byte index into the entry layout text
</parameter_description>
</parameter>
</parameters>
<return> byte index into the entry contents
</return>
</function>

<function name="gtk_tree_store_set_value">
<description>
Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> a #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_filter_get_needed">
<description>
Gets the fields that need to be filled in for the structure
passed to gtk_file_filter_filter()

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkFileChooser.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
</parameters>
<return> bitfield of flags indicating needed fields when
calling gtk_file_filter_filter()

Since: 2.4
</return>
</function>

<function name="gtk_about_dialog_get_license">
<description>
Return value: The license information. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The license information. The string is owned by the about
dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_binding_set_activate">
<description>
Find a key binding matching @keyval and @modifiers within
@binding_set and activate the binding on @object.


</description>
<parameters>
<parameter name="binding_set">
<parameter_description> @binding_set to activate
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>      key value of the binding
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>   key modifier of the binding
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description>      object to activate when binding found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a binding was found and activated
</return>
</function>

<function name="gtk_file_chooser_dialog_new">
<description>
Creates a new #GtkFileChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> Open or save mode for the dialog
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> stock ID or text to go in the first button, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for the first button, then additional (button, id) pairs, ending with %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkFileChooserDialog

Since: 2.4
</return>
</function>

<function name="gtk_container_child_set_valist">
<description>
Sets one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to set
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a %NULL-terminated list of property names and values, starting
with @first_prop_name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkRadioMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="group">
<parameter_description> group the radio menu item is inside
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRadioMenuItem
</return>
</function>

<function name="gtk_stock_list_ids">
<description>
Retrieves a list of all known stock IDs added to a #GtkIconFactory
or registered with gtk_stock_add(). The list must be freed with g_slist_free(),
and each string in the list must be freed with g_free().


</description>
<parameters>
</parameters>
<return> a list of known stock IDs
</return>
</function>

<function name="gtk_widget_list_mnemonic_labels">
<description>
Return value: the list of mnemonic labels; free this list

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the list of mnemonic labels; free this list
with g_list_free() when you are done with it.

Since: 2.4
</return>
</function>

<function name="gtk_binding_set_find">
<description>
Find a binding set by its globally unique name. The @set_name can
either be a name used for gtk_binding_set_new() or the type name of
a class used in gtk_binding_set_by_class().


</description>
<parameters>
<parameter name="set_name">
<parameter_description> unique binding set name
</parameter_description>
</parameter>
</parameters>
<return> %NULL or the specified binding set
</return>
</function>

<function name="gtk_tree_view_set_show_expanders">
<description>
Sets whether to draw and enable expanders and indent child rows in
@tree_view.  When disabled there will be no expanders visible in trees
and there will be no way to expand and collapse rows by default.  Also
note that hiding the expanders will disable the default indentation.  You
can set a custom indentation in this case using
gtk_tree_view_set_level_indentation().
This does not have any visible effects for lists.

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> %TRUE to enable expander drawing, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_box_gap">
<description>
Draws a box in @window using the given style and state and shadow type, 
leaving a gap in one side.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="gap_side">
<parameter_description> side in which to leave the gap
</parameter_description>
</parameter>
<parameter name="gap_x">
<parameter_description> starting position of the gap
</parameter_description>
</parameter>
<parameter name="gap_width">
<parameter_description> width of the gap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_set_label">
<description>
Sets the text of the label of the expander to @label.

This will also clear any previously set labels.

Since: 2.4

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_get_show_not_found">
<description>
Retrieves whether @chooser should show the recently used resources that
were not found.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the resources not found should be displayed, and
%FALSE otheriwse.

Since: 2.10
</return>
</function>

<function name="gtk_cell_view_set_model">
<description>
Sets the model for @cell_view.  If @cell_view already has a model
set, it will remove it before setting the new model.  If @model is 
%NULL, then it will unset the old model.

Since: 2.6

</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_add_ui">
<description>
Adds a UI element to the current contents of @self. 

If @type is %GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or 
separator if such an element can be inserted at the place determined by 
@path. Otherwise @type must indicate an element that can be inserted at 
the place determined by @path.

If @path points to a menuitem or toolitem, the new element will be inserted
before or after this item, depending on @top.

Since: 2.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
<parameter name="merge_id">
<parameter_description> the merge id for the merged UI, see gtk_ui_manager_new_merge_id()
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name for the added UI element
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the name of the action to be proxied, or %NULL to add a separator
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of UI element to add.
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> if %TRUE, the UI element is added before its siblings, otherwise it 
is added after its siblings.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_set_focus_on_click">
<description>
Sets whether the button will grab focus when it is clicked with the mouse.
Making mouse clicks not grab focus is useful in places like toolbars where
you don&apos;t want the keyboard focus removed from the main area of the
application.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="focus_on_click">
<parameter_description> whether the button grabs focus when clicked with the mouse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_display_name">
<description>
Gets the name of the resource.  If none has been defined, the basename
of the resource is obtained.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the display name of the resource.  The returned string
is owned by the recent manager, and should not be freed.

Since: 2.10
</return>
</function>

<function name="_gtk_get_module_path">
<description>
Determines the search path for a particular type of module.


</description>
<parameters>
<parameter name="type">
<parameter_description> the type of the module, for instance &apos;modules&apos;, &apos;engines&apos;, immodules&apos;
</parameter_description>
</parameter>
</parameters>
<return> the search path for the module type. Free with g_strfreev().
</return>
</function>

<function name="gtk_print_settings_copy">
<description>
Copies a #GtkPrintSettings object.


</description>
<parameters>
<parameter name="other">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of @other

Since: 2.10
</return>
</function>

<function name="gtk_im_context_simple_new">
<description>
Creates a new #GtkIMContextSimple.


</description>
<parameters>
</parameters>
<return> a new #GtkIMContextSimple.
</return>
</function>

<function name="gtk_icon_view_enable_model_drag_source">
<description>
Turns @icon_view into a drag source for automatic DND.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconTreeView
</parameter_description>
</parameter>
<parameter name="start_button_mask">
<parameter_description> Mask of allowed buttons to start drag
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the table of targets that the drag will support
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the number of items in @targets
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> the bitmask of possible actions for a drag from this
widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_unselect_iter">
<description>
Unselects the specified iterator.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to be unselected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_label_text">
<description>
Creates a new label and sets it as the tab label for the page
containing @child.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
<parameter name="tab_text">
<parameter_description> the label text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_new">
<description>
Creates a new calendar, with the current date being selected. 


</description>
<parameters>
</parameters>
<return> a newly #GtkCalendar widget
</return>
</function>

<function name="gtk_print_context_set_cairo_context">
<description>
Sets a new cairo context on a print context. 

This function is intended to be used when implementing
an internal print preview, it is not needed for printing,
since GTK+ itself creates a suitable cairo context in that
case.

Since: 2.10 

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
<parameter name="cr">
<parameter_description> the cairo context
</parameter_description>
</parameter>
<parameter name="dpi_x">
<parameter_description> the horizontal resolution to use with @cr
</parameter_description>
</parameter>
<parameter name="dpi_y">
<parameter_description> the vertical resolution to use with @cr
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_ends_word">
<description>
Determines whether @iter ends a natural-language word.  Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the end of a word
</return>
</function>

<function name="gtk_recent_info_exists">
<description>
Checks whether the resource pointed by @info still exists.  At
the moment this check is done only on resources pointing to local files.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the resource exists

Since: 2.10
</return>
</function>

<function name="gtk_binding_set_new">
<description>
GTK+ maintains a global list of binding sets. Each binding set has
a unique name which needs to be specified upon creation.


</description>
<parameters>
<parameter name="set_name">
<parameter_description> unique name of this binding set
</parameter_description>
</parameter>
</parameters>
<return> new binding set
</return>
</function>

<function name="gtk_expander_get_use_markup">
<description>
Return value: %TRUE if the label&apos;s text will be parsed for markup

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the label&apos;s text will be parsed for markup

Since: 2.4
</return>
</function>

<function name="gtk_entry_prepend_text">
<description>
Prepends the given text to the contents of the widget.

Deprecated: gtk_entry_prepend_text() is deprecated and should not
be used in newly-written code. Use gtk_editable_insert_text()
instead.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to prepend
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_increments">
<description>
Sets the step and page increments for spin_button.  This affects how 
quickly the value changes when the spin button&apos;s arrows are activated.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> increment applied for a button 1 press.
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> increment applied for a button 2 press.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_add_with_properties">
<description>
Adds @widget to @container, setting child properties at the same time.
See gtk_container_add() and gtk_container_child_set() for more details.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer 
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget to be placed inside @container 
</parameter_description>
</parameter>
<parameter name="first_prop_name">
<parameter_description> the name of the first child property to set 
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of property names and values, starting
with @first_prop_name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_change_entry">
<description>
Changes the @accel_key and @accel_mods currently associated with @accel_path.
Due to conflicts with other accelerators, a change may not always be possible,
@replace indicates whether other accelerators may be deleted to resolve such
conflicts. A change will only occur if all conflicts could be resolved (which
might not be the case if conflicting accelerators are locked). Successful
changes are indicated by a %TRUE return value.

</description>
<parameters>
<parameter name="accel_path">
<parameter_description>  a valid accelerator path
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>   the new accelerator key
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>  the new accelerator modifiers
</parameter_description>
</parameter>
<parameter name="replace">
<parameter_description>     %TRUE if other accelerators may be deleted upon conflicts
</parameter_description>
</parameter>
</parameters>
<return>     %TRUE if the accelerator could be changed, %FALSE otherwise
</return>
</function>

<function name="gtk_container_set_resize_mode">
<description>
Sets the resize mode for the container.

The resize mode of a container determines whether a resize request 
will be passed to the container&apos;s parent, queued for later execution
or executed immediately.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="resize_mode">
<parameter_description> the new resize mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_has_frame">
<description>
Accessor for whether the window has a frame window exterior to
@window-&amp;gt;window. Gets the value set by gtk_window_set_has_frame ().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a frame has been added to the window
via gtk_window_set_has_frame().
</return>
</function>

<function name="gtk_clipboard_set_text">
<description>
Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
make a copy of the text and take responsibility for responding
for requests for the text, and for converting the text into
the requested format.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard object
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>      a UTF-8 string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>       length of @text, in bytes, or -1, in which case
the length will be determined with &amp;lt;function&amp;gt;strlen()&amp;lt;/function&amp;gt;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_maximize">
<description>
Asks to maximize @window, so that it becomes full-screen. Note that
you shouldn&apos;t assume the window is definitely maximized afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could unmaximize it
again, and not all window managers support maximization. But
normally the window will end up maximized. Just don&apos;t write code
that crashes if not.

It&apos;s permitted to call this function before showing a window,
in which case the window will be maximized when it appears onscreen
initially.

You can track maximization via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_pop_colormap">
<description>
Removes a colormap pushed with gtk_widget_push_colormap().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_style">
<description>
Finds all matching RC styles for a given widget,
composites them together, and then creates a 
#GtkStyle representing the composite appearance.
(GTK+ actually keeps a cache of previously 
created styles, so a new style may not be
created.)


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the resulting style. No refcount is added
to the returned style, so if you want to save this
style around, you should add a reference yourself.
</return>
</function>

<function name="gtk_text_mark_get_name">
<description>
Return value: mark name

</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> mark name
</return>
</function>

<function name="gtk_icon_set_copy">
<description>
Copies @icon_set by value. 


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkIconSet identical to the first.
</return>
</function>

<function name="gtk_recent_chooser_get_show_tips">
<description>
Gets whether @chooser should display tooltips.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the recent chooser should show tooltips,
%FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_printer_list_papers">
<description>
Lists all the paper sizes @printer supports.
This will return an empty list unless the printer&apos;s details are 
available. See gtk_printer_has_details() and gtk_printer_request_details().


</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated list of newly allocated #GtkPageSetup s.

Since: 2.12
</return>
</function>

<function name="gtk_print_operation_set_job_name">
<description>
Sets the name of the print job. The name is used to identify 
the job (e.g. in monitoring applications like eggcups). 

If you don&apos;t set a job name, GTK+ picks a default one by 
numbering successive print jobs.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="job_name">
<parameter_description> a string that identifies the print job
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_place_cursor">
<description>
This function moves the &quot;insert&quot; and &quot;selection_bound&quot; marks
simultaneously.  If you move them to the same place in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> where to put the cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_get_show_size">
<description>
Return value: whether the font size will be shown in the label.

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
</parameters>
<return> whether the font size will be shown in the label.

Since: 2.4
</return>
</function>

<function name="gtk_notebook_get_group_id">
<description>
Gets the current group identificator for @notebook.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the group identificator, or -1 if none is set.

Since: 2.10
Deprecated:2.12: use gtk_notebook_get_group() instead.
</return>
</function>

<function name="gtk_button_get_focus_on_click">
<description>
Return value: %TRUE if the button grabs focus when it is clicked with

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the button grabs focus when it is clicked with
the mouse.

Since: 2.4
</return>
</function>

<function name="gtk_tree_selection_get_tree_view">
<description>
Return value: A #GtkTreeView

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeView
</return>
</function>

<function name="gtk_assistant_set_page_title">
<description>
Sets a title for @page. The title is displayed in the header
area of the assistant when @page is the current page.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> the new title for @page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_draw">
<description>
In GTK+ 1.2, this function would immediately render the
region @area of a widget, by invoking the virtual draw method of a
widget. In GTK+ 2.0, the draw method is gone, and instead
gtk_widget_draw() simply invalidates the specified region of the
widget, then updates the invalid region of the widget immediately.
Usually you don&apos;t want to update the region immediately for
performance reasons, so in general gtk_widget_queue_draw_area() is
a better choice if you want to draw a region of a widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> area to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_set_inconsistent">
<description>
If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a toggle button, and the
current values in that range are inconsistent, you may want to
display the toggle in an &quot;in between&quot; state. This function turns on
&quot;in between&quot; display.  Normally you would turn off the inconsistent
state again if the user toggles the toggle button. This has to be
done manually, gtk_toggle_button_set_inconsistent() only affects
visual appearance, it doesn&apos;t affect the semantics of the button.


</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if state is inconsistent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_button_get_width_chars">
<description>
Retrieves the width in characters of the @button widget&apos;s entry and/or label.


</description>
<parameters>
<parameter name="button">
<parameter_description> the button widget to examine.
</parameter_description>
</parameter>
</parameters>
<return> an integer width (in characters) that the button will use to size itself.

Since: 2.6
</return>
</function>

<function name="gtk_notebook_set_scrollable">
<description>
Sets whether the tab label area will have arrows for scrolling if
there are too many tabs to fit in the area.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="scrollable">
<parameter_description> %TRUE if scroll arrows should be added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_select_all">
<description>
Selects all the files in the current folder of a file chooser.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_pixbuf">
<description>
Inserts an image into the text buffer at @iter. The image will be
counted as one character in character counts, and when obtaining
the buffer contents as a string, will be represented by the Unicode
&quot;object replacement character&quot; 0xFFFC. Note that the &quot;slice&quot;
variants for obtaining portions of the buffer as a string include
this character for pixbufs, but the &quot;text&quot; variants do
not. e.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text().

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location to insert the pixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_newv">
<description>
Non-vararg creation function.  Used primarily by language bindings.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the list store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkListStore
</return>
</function>

<function name="gtk_print_settings_get_length">
<description>
Return value: the length value of @key, converted to @unit

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit of the return value
</parameter_description>
</parameter>
</parameters>
<return> the length value of @key, converted to @unit

Since: 2.10
</return>
</function>

<function name="gtk_action_create_tool_item">
<description>
Creates a toolbar item widget that proxies for the given action.


</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> a toolbar item connected to the action.

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_get">
<description>
Looks up the string value associated with @key.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> the string value for @key

Since: 2.10
</return>
</function>

<function name="gtk_text_view_get_iter_at_location">
<description>
Retrieves the iterator at buffer coordinates @x and @y. Buffer
coordinates are coordinates for the entire buffer, not just the
currently-displayed portion.  If you have coordinates from an
event, you have to convert those to buffer coordinates with
gtk_text_view_window_to_buffer_coords().

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x position, in buffer coordinates
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y position, in buffer coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_add_custom_tab">
<description>
Adds a custom tab to the print dialog.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the widget to put in the custom tab
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the widget to use as tab label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_vline">
<description>
Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @window
using the given style and state.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> rectangle to which the output is clipped, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> the starting y coordinate
</parameter_description>
</parameter>
<parameter name="y2_">
<parameter_description> the ending y coordinate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_printer_is_virtual">
<description>
Return value: %TRUE if @printer is virtual

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @printer is virtual

Since: 2.10
</return>
</function>

<function name="gtk_text_view_set_pixels_below_lines">
<description>
Sets the default number of pixels of blank space
to put below paragraphs in @text_view. May be overridden
by tags applied to @text_view&apos;s buffer. 

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="pixels_below_lines">
<parameter_description> pixels below paragraphs 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_filename">
<description>
Sets the name of an image file to use as a base image when creating
icon variants for #GtkIconSet. The filename must be absolute. 

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> image file to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_size_request">
<description>
Sets the minimum size of a widget; that is, the widget&apos;s size
request will be @width by @height. You can use this function to
force a widget to be either larger or smaller than it normally
would be.

In most cases, gtk_window_set_default_size() is a better choice for
toplevel windows than this function; setting the default size will
still allow users to shrink the window. Setting the size request
will force them to leave the window at least as large as the size
request. When dealing with window sizes,
gtk_window_set_geometry_hints() can be a useful function as well.

Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it&apos;s
basically impossible to hardcode a size that will always be
correct.

The size request of a widget is the smallest size a widget can
accept while still functioning well and drawing itself correctly.
However in some strange cases a widget may be allocated less than
its requested size, and in many cases a widget may be allocated more
space than it requested.

If the size request in a given direction is -1 (unset), then
the &quot;natural&quot; size request of the widget will be used instead.

Widgets can&apos;t actually be allocated a size less than 1 by 1, but
you can pass 0,0 to this function to mean &quot;as small as possible.&quot;

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width @widget should request, or -1 to unset
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height @widget should request, or -1 to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_set_limit">
<description>
Sets the number of items that should be returned by
gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> a positive integer, or -1 for all items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_resizable">
<description>
If @resizable is %TRUE, then the user can explicitly resize the column by
grabbing the outer edge of the column button.  If resizable is %TRUE and
sizing mode of the column is #GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
mode is changed to #GTK_TREE_VIEW_COLUMN_GROW_ONLY.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> %TRUE, if the column can be resized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_pulse">
<description>
Indicates that some progress is made, but you don&apos;t know how much.
Causes the progress bar to enter &quot;activity mode,&quot; where a block
bounces back and forth. Each call to gtk_progress_bar_pulse()
causes the block to move by a little bit (the amount of movement
per pulse is determined by gtk_progress_bar_set_pulse_step()).

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_single_line_mode">
<description>
Sets whether the label is in single line mode.

Since: 2.6

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="single_line_mode">
<parameter_description> %TRUE if the label should be in single line mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_icon_size">
<description>
Retrieves the icon size for the toolbar. See gtk_toolbar_set_icon_size().


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the current icon size for the icons on the toolbar.
</return>
</function>

<function name="gtk_table_get_default_col_spacing">
<description>
Gets the default column spacing for the table. This is
the spacing that will be used for newly added columns.
(See gtk_table_set_col_spacings())


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
</parameters>
<return>value: the default column spacing
</return>
</function>

<function name="gtk_assistant_get_page_type">
<description>
Gets the page type of @page.


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
</parameters>
<return> the page type of @page.

Since: 2.10
</return>
</function>

<function name="gtk_widget_can_activate_accel">
<description>
Determines whether an accelerator that activates the signal
identified by @signal_id can currently be activated.
This is done by emitting the #GtkWidget::can-activate-accel
signal on @widget; if the signal isn&apos;t overridden by a
handler or in a derived widget, then the default check is
that the widget must be sensitive, and the widget and all
its ancestors mapped.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="signal_id">
<parameter_description> the ID of a signal installed on @widget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the accelerator can be activated.

Since: 2.4
</return>
</function>

<function name="gtk_text_view_get_window">
<description>
Retrieves the #GdkWindow corresponding to an area of the text view;
possible windows include the overall widget window, child windows
on the left, right, top, bottom, and the window that displays the
text buffer. Windows are %NULL and nonexistent if their width or
height is 0, and are nonexistent before the widget has been
realized.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="win">
<parameter_description> window to get
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow, or %NULL
</return>
</function>

<function name="gtk_drag_source_add_image_targets">
<description>
Add the writable image targets supported by #GtkSelection to
the target list of the drag source. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_image_targets() and
gtk_drag_source_set_target_list().

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s is a drag source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_get_use_stock">
<description>
Return value: %TRUE if the button label is used to

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the button label is used to
select a stock item instead of being
used directly as the label text.
</return>
</function>

<function name="gtk_tree_sortable_has_default_sort_func">
<description>
Return value: %TRUE, if the model has a default sort function

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the model has a default sort function
</return>
</function>

<function name="gtk_text_buffer_get_bounds">
<description>
Retrieves the first and last iterators in the buffer, i.e. the
entire buffer lies within the range [@start,@end).

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> iterator to initialize with first position in the buffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator to initialize with the end iterator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_job_set_track_print_status">
<description>
If track_status is %TRUE, the print job will try to continue report
on the status of the print job in the printer queues and printer. This
can allow your application to show things like &quot;out of paper&quot; issues,
and when the print job actually reaches the printer.

This function is often implemented using some form of polling, so it should
not be enabled unless needed.

Since: 2.10

</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
<parameter name="track_status">
<parameter_description> %TRUE to track status after printing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_prev">
<description>
Moves the @path to point to the previous node at the current depth, 
if it exists.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path has a previous node, and the move was made.
</return>
</function>

<function name="_gtk_tree_selection_new_with_tree_view">
<description>
Creates a new #GtkTreeSelection object.  This function should not be invoked,
as each #GtkTreeView will create its own #GtkTreeSelection.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> The #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreeSelection object.
</return>
</function>

<function name="gtk_drag_dest_add_uri_targets">
<description>
Add the URI targets supported by #GtkSelection to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_uri_targets() and
gtk_drag_dest_set_target_list().

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_insert_element">
<description>
Inserts a new element in the toolbar at the given position. 

If @type == %GTK_TOOLBAR_CHILD_WIDGET, @widget is used as the new element.
If @type == %GTK_TOOLBAR_CHILD_RADIOBUTTON, @widget is used to determine
the radio group for the new element. In all other cases, @widget must
be %NULL.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a value of type #GtkToolbarChildType that determines what @widget
will be.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget, or %NULL. 
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the element&apos;s label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that provides pictorial representation of the element&apos;s function.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> any data you wish to pass to the callback.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the number of widgets to insert this element after.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar element as a #GtkWidget.
</return>
</function>

<function name="gtk_notebook_get_show_tabs">
<description>
Return value: %TRUE if the tabs are shown

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the tabs are shown
</return>
</function>

<function name="gtk_check_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkCheckMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkCheckMenuItem
</return>
</function>

<function name="_gtk_file_chooser_entry_set_action">
<description>
Sets action which is performed by the file selector using this entry. 
The #GtkFileChooserEntry will use different completion strategies for 
different actions.

</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooserEntry
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the action which is performed by the file selector using this entry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_button_set_alpha">
<description>
Sets the current opacity to be @alpha. 

Since: 2.4

</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton.
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> an integer between 0 and 65535.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_unselect_all">
<description>
Unselects all the items inside @chooser.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_get_add_tearoffs">
<description>
Return value: whether tearoff menu items are added

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
</parameters>
<return> whether tearoff menu items are added

Since: 2.4
</return>
</function>

<function name="gtk_recent_chooser_dialog_new">
<description>
Creates a new #GtkRecentChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL,
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> stock ID or text to go in the first button, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for the first button, then additional (button, id)
pairs, ending with %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRecentChooserDialog

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_column_set_spacing">
<description>
Sets the spacing field of @tree_column, which is the number of pixels to
place between cell renderers packed into it.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> distance between cell renderers in pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_max_width_chars">
<description>
Sets the desired maximum width in characters of @label to @n_chars.

Since: 2.6

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the new desired maximum width, in characters.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_visible_line">
<description>
Moves @iter to the start of the previous visible line. Returns %TRUE if
@iter could be moved; i.e. if @iter was at character offset 0, this
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved

Since: 2.8
</return>
</function>

<function name="gtk_icon_view_path_is_selected">
<description>
Return value: %TRUE if @path is selected.

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath to check selection on.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path is selected.

Since: 2.6
</return>
</function>

<function name="gtk_widget_activate">
<description>
For widgets that can be &quot;activated&quot; (buttons, menu items, etc.)
this function activates them. Activation is what happens when you
press Enter on a widget during key navigation. If @widget isn&apos;t 
activatable, the function returns %FALSE.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s activatable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget was activatable
</return>
</function>

<function name="gtk_window_get_focus">
<description>
Retrieves the current focused widget within the window.
Note that this is the widget that would have the focus
if the toplevel window focused; if the toplevel window
is not focused then  &amp;lt;literal&amp;gt;GTK_WIDGET_HAS_FOCUS (widget)&amp;lt;/literal&amp;gt; will
not be %TRUE for the widget. 


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the currently focused widget, or %NULL if there is none.
</return>
</function>

<function name="gtk_tree_model_rows_reordered">
<description>
Emits the &quot;rows_reordered&quot; signal on @tree_model.  This should be called by
models when their rows have been reordered.  

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the tree node whose children have been 
reordered
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the node whose children have been 
reordered, or %NULL if the depth of @path is 0.
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> an array of integers mapping the current position of each child
to its old position before the re-ordering,
i.e. @new_order&amp;lt;literal&amp;gt;[newpos] = oldpos&amp;lt;/literal&amp;gt;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_lines">
<description>
Moves @count lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of lines to move forward
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="_gtk_plug_add_all_grabbed_keys">
<description>
@plug: a #GtkPlug

Calls _gtk_plug_windowing_add_grabbed_key() on all the grabbed keys
in the @plug.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_button_box_get_child_secondary">
<description>
Return value: whether @child should appear in a secondary group of children.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkButtonBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @widget 
</parameter_description>
</parameter>
</parameters>
<return> whether @child should appear in a secondary group of children.

Since: 2.4
</return>
</function>

<function name="gtk_text_view_new_with_buffer">
<description>
Creates a new #GtkTextView widget displaying the buffer
@buffer. One buffer can be shared among many widgets.
@buffer may be %NULL to create a default buffer, in which case
this function is equivalent to gtk_text_view_new(). The
text view adds its own reference count to the buffer; it does not
take over an existing reference.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTextView.
</return>
</function>

<function name="gtk_window_get_icon">
<description>
Gets the value set by gtk_window_set_icon() (or if you&apos;ve
called gtk_window_set_icon_list(), gets the first icon in
the icon list).


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> icon for window
</return>
</function>

<function name="gtk_text_view_set_pixels_inside_wrap">
<description>
Sets the default number of pixels of blank space to leave between
display/wrapped lines within a paragraph. May be overridden by
tags in @text_view&apos;s buffer.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="pixels_inside_wrap">
<parameter_description> default number of pixels between wrapped lines
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_message_dialog_set_markup">
<description>
Sets the text of the message dialog to be @str, which is marked
up with the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup
language&amp;lt;/link&amp;gt;.

Since: 2.4

</description>
<parameters>
<parameter name="message_dialog">
<parameter_description> a #GtkMessageDialog
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> markup string (see &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_visual">
<description>
Gets the visual that will be used to render @widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the visual for @widget
</return>
</function>

<function name="_gtk_text_layout_get_line_xrange">
<description>
Find the range of X coordinates for the paragraph containing
the given iter. Private for 2.0 due to API freeze, could
be made public for 2.2.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      location to store the top of the paragraph in pixels,
or %NULL.
@width  location to store the height of the paragraph in pixels,
or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_connect">
<description>
Installs an accelerator in this group. When @accel_group is being activated
in response to a call to gtk_accel_groups_activate(), @closure will be
invoked if the @accel_key and @accel_mods from gtk_accel_groups_activate()
match those of this connection.

The signature used for the @closure is that of #GtkAccelGroupActivate.

Note that, due to implementation details, a single closure can only be
connected to one accelerator group.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install an accelerator in
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>        key value of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>       modifier combination of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_flags">
<parameter_description>      a flag mask to configure this accelerator
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description>          closure to be executed upon accelerator activation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_convert_child_iter_to_iter">
<description>
Sets @sort_iter to point to the row in @tree_model_sort that corresponds to
the row pointed at by @child_iter.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="sort_iter">
<parameter_description> An uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="child_iter">
<parameter_description> A valid #GtkTreeIter pointing to a row on the child model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unref">
<description>
Inverse of gtk_widget_ref(). Equivalent to g_object_unref().

Deprecated:2.12: Use g_object_unref() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_reorderable">
<description>
Return value: %TRUE if the @tree_column can be reordered by the user.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @tree_column can be reordered by the user.
</return>
</function>

<function name="gtk_window_get_modal">
<description>
Return value: %TRUE if the window is set to be modal and

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is set to be modal and
establishes a grab when shown
</return>
</function>

<function name="gtk_menu_set_accel_path">
<description>
Sets an accelerator path for this menu from which accelerator paths
for its immediate children, its menu items, can be constructed.
The main purpose of this function is to spare the programmer the
inconvenience of having to call gtk_menu_item_set_accel_path() on
each menu item that should support runtime user changable accelerators.
Instead, by just calling gtk_menu_set_accel_path() on their parent,
each menu item of this menu, that contains a label describing its purpose,
automatically gets an accel path assigned. For example, a menu containing
menu items &quot;New&quot; and &quot;Exit&quot;, will, after 
&amp;lt;literal&amp;gt;gtk_menu_set_accel_path (menu, &quot;&amp;lt;Gnumeric-Sheet&amp;gt;/File&quot;);&amp;lt;/literal&amp;gt;
has been called, assign its items the accel paths:
&amp;lt;literal&amp;gt;&quot;&amp;lt;Gnumeric-Sheet&amp;gt;/File/New&quot;&amp;lt;/literal&amp;gt; and &amp;lt;literal&amp;gt;&quot;&amp;lt;Gnumeric-Sheet&amp;gt;/File/Exit&quot;&amp;lt;/literal&amp;gt;.
Assigning accel paths to menu items then enables the user to change
their accelerators at runtime. More details about accelerator paths
and their default setups can be found at gtk_accel_map_add_entry().

</description>
<parameters>
<parameter name="menu">
<parameter_description>       a valid #GtkMenu
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> a valid accelerator path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_icon_list">
<description>
Sets up the icon representing a #GtkWindow. The icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.

gtk_window_set_icon_list() allows you to pass in the same icon in
several hand-drawn sizes. The list should contain the natural sizes
your icon is available in; that is, don&apos;t scale the image before
passing it to GTK+. Scaling is postponed until the last minute,
when the desired final size is known, to allow best quality.

By passing several sizes, you may improve the final image quality
of the icon, by reducing or eliminating automatic image scaling.

Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and
larger images (64x64, 128x128) if you have them.

See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.

Note that transient windows (those who have been set transient for another
window using gtk_window_set_transient_for()) will inherit their
icon from their transient parent. So there&apos;s no need to explicitly
set the icon on transient windows.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> list of #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_copy">
<description>
Copies @src and returns a new #GtkTextAttributes.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GtkTextAttributes to be copied
</parameter_description>
</parameter>
</parameters>
<return> a copy of @src
</return>
</function>

<function name="gtk_recent_info_get_application_info">
<description>
Gets the data regarding the application that has registered the resource
pointed by @info.

If the command line contains any escape characters defined inside the
storage specification, they will be expanded.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="app_name">
<parameter_description> the name of the application that has registered this item
</parameter_description>
</parameter>
<parameter name="app_exec">
<parameter_description> return location for the string containing the command line
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for the number of times this item was registered
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> return location for the timestamp this item was last registered
for this application
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an application with @app_name has registered this
resource inside the recently used list, or %FALSE otherwise.  You should
free the returned command line using g_free().

Since: 2.10
</return>
</function>

<function name="gtk_file_chooser_list_filters">
<description>
Lists the current set of user-selectable filters; see
gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> a #GSList containing the current set of
user selectable filters. The contents of the list are
owned by GTK+, but you must free the list itself with
g_slist_free() when you are done with it.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_inside_sentence">
<description>
Determines whether @iter is inside a sentence (as opposed to in
between two sentences, e.g. after a period and before the first
letter of the next sentence).  Sentence boundaries are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango text boundary algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is inside a sentence.
</return>
</function>

<function name="gtk_printer_accepts_pdf">
<description>
Return value: %TRUE if @printer accepts PDF

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @printer accepts PDF

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_set_pixbuf_column">
<description>
Sets the column with pixbufs for @icon_view to be @column. The pixbuf
column must be of type #GDK_TYPE_PIXBUF

Since: 2.6 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> A column in the currently used model, or -1 to disable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_set_column_spacing">
<description>
Sets the ::column-spacing property which specifies the space 
which is inserted between the columns of the icon view.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="column_spacing">
<parameter_description> the column spacing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_get_select_multiple">
<description>
Gets whether @chooser can select multiple items.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @chooser can select more than one item.

Since: 2.10
</return>
</function>

<function name="gtk_print_settings_set_page_set">
<description>
Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="page_set">
<parameter_description> a #GtkPageSet value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_menu_item_new_from_widget">
<description>
Creates a new #GtkRadioMenuItem adding it to the same group as @group.


</description>
<parameters>
<parameter name="group">
<parameter_description> An existing #GtkRadioMenuItem
</parameter_description>
</parameter>
</parameters>
<return> The new #GtkRadioMenuItem

Since: 2.4
</return>
</function>

<function name="gtk_action_get_proxies">
<description>
Return value: a #GSList of proxy widgets. The list is owned by GTK+

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> a #GSList of proxy widgets. The list is owned by GTK+
and must not be modified.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_column_new">
<description>
Creates a new #GtkTreeViewColumn.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreeViewColumn.
</return>
</function>

<function name="gtk_window_list_toplevels">
<description>
Return value: list of toplevel widgets

</description>
<parameters>
</parameters>
<return> list of toplevel widgets
</return>
</function>

<function name="gtk_clipboard_wait_is_image_available">
<description>
Test to see if there is an image available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported image targets. This function 
waits for the data to be received using the main loop, so events, 
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_image() since it doesn&apos;t need to retrieve
the actual image data.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is there is an image available, %FALSE otherwise.

Since: 2.6
</return>
</function>

<function name="gtk_text_buffer_add_mark">
<description>
Adds the mark at position @where. The mark must not be added to
another buffer, and if its name is not %NULL then there must not
be another mark in the buffer with the same name.

Emits the &quot;mark_set&quot; signal as notification of the mark&apos;s initial
placement.

Since: 2.12

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> the mark to add
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> location to place mark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_item_remove_submenu">
<description>
Removes the widget&apos;s submenu.

Deprecated: 2.12: gtk_menu_item_remove_submenu() is deprecated and
should not be used in newly written code. Use
gtk_menu_item_set_submenu() instead.

</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_lookup_icon">
<description>
Looks up a named icon and returns a structure containing
information such as the filename of the icon. The icon
can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the name of the icon to lookup
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> desired icon size
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags modifying the behavior of the icon lookup
</parameter_description>
</parameter>
</parameters>
<return> a #GtkIconInfo structure containing information
about the icon, or %NULL if the icon wasn&apos;t found. Free with
gtk_icon_info_free()

Since: 2.4
</return>
</function>

<function name="GtkTreeModel">
<description>
This signal is emitted when the children of a node in the #GtkTreeModel
have been reordered. 

Note that this signal is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; emitted
when rows are reordered by DND, since this is implemented
by removing and then reinserting the row.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> the #GtkTreeModel on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath identifying the tree node whose children
have been reordered
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a valid #GtkTreeIter pointing to the node whose 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_to_end">
<description>
Moves @iter forward to the &quot;end iterator,&quot; which points one past the last
valid character in the buffer. gtk_text_iter_get_char() called on the
end iterator returns 0, which is convenient for writing loops.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_menu_set_show_numbers">
<description>
Sets whether a number should be added to the items of @menu.  The
numbers are shown to provide a unique character for a mnemonic to
be used inside ten menu item&apos;s label.  Only the first the items
get a number to avoid clashes.

Since: 2.10

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkRecentChooserMenu
</parameter_description>
</parameter>
<parameter name="show_numbers">
<parameter_description> whether to show numbers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_polygon">
<description>
Draws a polygon on @window with the given parameters.

Deprecated: Use gtk_paint_polygon() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="npoints">
<parameter_description> length of @points
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if the polygon should be filled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_set">
<description>
Sets one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_prop_name">
<parameter_description> the name of the first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of property names and values, starting
with @first_prop_name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_from_path">
<description>
Finds an item factory which has been constructed using the 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt; prefix of @path as the @path argument 
for gtk_item_factory_new().

Deprecated: 2.4:

</description>
<parameters>
<parameter name="path">
<parameter_description> a string starting with a factory path of the form 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
</parameters>
<return> the #GtkItemFactory created for the given factory path, or %NULL 
</return>
</function>

<function name="gtk_tree_model_get_string_from_iter">
<description>
Generates a string representation of the iter. This string is a &apos;:&apos;
separated list of numbers. For example, &quot;4:10:0:3&quot; would be an
acceptable return value for this string.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string. Must be freed with g_free().

Since: 2.2
</return>
</function>

<function name="gtk_file_chooser_remove_shortcut_folder">
<description>
Removes a folder from a file chooser&apos;s list of shortcut folders.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="folder">
<parameter_description> filename of the folder to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeds, %FALSE otherwise.  
In the latter case, the @error will be set as appropriate.

See also: gtk_file_chooser_add_shortcut_folder()

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_get_path_at_pos">
<description>
Finds the path at the point (@x, @y), relative to bin_window coordinates.
See gtk_icon_view_get_item_at_pos(), if you are also interested in
the cell at the specified position. 
See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
widget coordinates to bin_window coordinates.


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The x position to be identified
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The y position to be identified
</parameter_description>
</parameter>
</parameters>
<return> The #GtkTreePath corresponding to the icon or %NULL
if no icon exists at that position.

Since: 2.6 
</return>
</function>

<function name="_gtk_im_module_get_default_context_id">
<description>
Return the context_id of the best IM context type
for the given locale ID.


</description>
<parameters>
<parameter name="locale">
<parameter_description> a locale id in the form &apos;en_US&apos;
</parameter_description>
</parameter>
</parameters>
<return> the context ID (will never be %NULL)
the value is newly allocated and must be freed
with g_free().
</return>
</function>

<function name="gtk_widget_get_pango_context">
<description>
Gets a #PangoContext with the appropriate font map, font description,
and base direction for this widget. Unlike the context returned
by gtk_widget_create_pango_context(), this context is owned by
the widget (it can be used until the screen for the widget changes
or the widget is removed from its toplevel), and will be updated to
match any changes to the widget&apos;s attributes.

If you create and keep a #PangoLayout using this context, you must
deal with changes to the context by calling pango_layout_context_changed()
on the layout in response to the #GtkWidget::style-set and 
#GtkWidget::direction-changed signals for the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #PangoContext for the widget.
</return>
</function>

<function name="gtk_menu_get_title">
<description>
Return value: the title of the menu, or %NULL if the menu has no

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
</parameters>
<return> the title of the menu, or %NULL if the menu has no
title set on it. This string is owned by the widget and should
not be modified or freed.
</return>
</function>

<function name="gtk_clipboard_request_text">
<description>
Requests the contents of the clipboard as text. When the text is
later received, it will be converted to UTF-8 if necessary, and
@callback will be called. 

The @text parameter to @callback will contain the resulting text if
the request succeeded, or %NULL if it failed. This could happen for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into text form.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  a function to call when the text is received,
or the retrieval fails. (It will always be called
one way or the other.)
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_cell_get_position">
<description>
Obtains the horizontal position and size of a cell in a column. If the
cell is not found in the column, @start_pos and @width are not changed and
%FALSE is returned.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> return location for the horizontal position of @cell within
@tree_column, may be %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for the width of @cell, may be %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cell belongs to @tree_column.
</return>
</function>

<function name="gtk_status_icon_position_menu">
<description>
Menu positioning function to use with gtk_menu_popup()
to position @menu aligned to the status icon @user_data.

Since: 2.10

</description>
<parameters>
<parameter name="menu">
<parameter_description> the #GtkMenu
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the x position
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the y position
</parameter_description>
</parameter>
<parameter name="push_in">
<parameter_description> whether the first menu item should be offset (pushed in) to be
aligned with the menu popup position (only useful for GtkOptionMenu).
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the status icon to position the menu on
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_alignment">
<description>
Sets the alignment for the contents of the entry. This controls
the horizontal positioning of the contents when the displayed
text is shorter than the width of the entry.

Since: 2.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> The horizontal alignment, from 0 (left) to 1 (right).
Reversed for RTL layouts
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_to_line_end">
<description>
Moves the iterator to point to the paragraph delimiter characters,
which will be either a newline, a carriage return, a carriage
return/newline in sequence, or the Unicode paragraph separator
character. If the iterator is already at the paragraph delimiter
characters, moves to the paragraph delimiter characters for the
next line. If @iter is on the last line in the buffer, which does
not end in paragraph delimiters, moves to the end iterator (end of
the last line), and returns %FALSE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new location is not the end iterator
</return>
</function>

<function name="gtk_cell_renderer_render">
<description>
Invokes the virtual render function of the #GtkCellRenderer. The three
passed-in rectangles are areas of @window. Most renderers will draw within
@cell_area; the xalign, yalign, xpad, and ypad fields of the #GtkCellRenderer
should be honored with respect to @cell_area. @background_area includes the
blank space around the cell, and also the area containing the tree expander;
so the @background_area rectangles for all cells tile to cover the entire
@window.  @expose_area is a clip rectangle.

</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkDrawable to draw to
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget owning @window
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> entire cell area (including tree expanders and maybe 
padding on the sides)
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> area normally rendered by a cell renderer
</parameter_description>
</parameter>
<parameter name="expose_area">
<parameter_description> area that actually needs updating
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that affect rendering
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_entry_get_current_folder">
<description>
Gets the current folder for the #GtkFileChooserEntry. If the
user has only entered a filename, this will be the base folder
(see _gtk_file_chooser_entry_set_base_folder()), but if the
user has entered a relative or absolute path, then it will
be different. If the user has entered a relative or absolute
path that doesn&apos;t point to a folder in the file system, it will
be %NULL.


</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooserEntry
</parameter_description>
</parameter>
</parameters>
<return> the path of current folder - this value is owned by the
chooser entry and must not be modified or freed.
</return>
</function>

<function name="gtk_event_box_get_above_child">
<description>
Return value: %TRUE if the event box window is above the window

</description>
<parameters>
<parameter name="event_box">
<parameter_description> a #GtkEventBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event box window is above the window
of its child.

Since: 2.4
</return>
</function>

<function name="gtk_menu_set_monitor">
<description>
Informs GTK+ on which monitor a menu should be popped up. 
See gdk_screen_get_monitor_geometry().

This function should be called from a #GtkMenuPositionFunc if the
menu should not appear on the same monitor as the pointer. This 
information can&apos;t be reliably inferred from the coordinates returned
by a #GtkMenuPositionFunc, since, for very long menus, these coordinates 
may extend beyond the monitor boundaries or even the screen boundaries. 

Since: 2.4

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> the number of the monitor on which the menu should
be popped up
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkCellRenderer">
<description>
This signal gets emitted when a cell starts to be edited.
The indended use of this signal is to do special setup
on @editable, e.g. adding a #GtkEntryCompletion or setting
up additional columns in a #GtkComboBox.

Note that GTK+ doesn&apos;t guarantee that cell renderers will
continue to use the same kind of widget for editing in future
releases, therefore you should check the type of @editable
before doing any specific setup, as in the following example:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
static void
text_editing_started (GtkCellRenderer *cell,
GtkCellEditable *editable,
const gchar     *path,
gpointer         data)
{
if (GTK_IS_ENTRY (editable)) 
{
GtkEntry *entry = GTK_ENTRY (editable);
&amp;lt;!-- --&amp;gt;
/&amp;lt;!-- --&amp;gt;* ... create a GtkEntryCompletion *&amp;lt;!-- --&amp;gt;/
&amp;lt;!-- --&amp;gt;
gtk_entry_set_completion (entry, completion);
}
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 2.6

</description>
<parameters>
<parameter name="renderer">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="editable">
<parameter_description> the #GtkCellEditable
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path identifying the edited cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_action_set_current_value">
<description>
Sets the currently active group member to the member with value
property @current_value.

Since: 2.10

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkRadioAction
</parameter_description>
</parameter>
<parameter name="current_value">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_menu_item_get_image">
<description>
Gets the widget that is currently set as the image of @image_menu_item.
See gtk_image_menu_item_set_image().

</description>
<parameters>
<parameter name="image_menu_item">
<parameter_description> a #GtkImageMenuItem.
</parameter_description>
</parameter>
</parameters>
<return> the widget set as image of @image_menu_item.
</return>
</function>

<function name="gtk_menu_shell_set_take_focus">
<description>
If @take_focus is %TRUE (the default) the menu shell will take the keyboard 
focus so that it will receive all keyboard events which is needed to enable
keyboard navigation in menus.

Setting @take_focus to %FALSE is useful only for special applications
like virtual keyboard implementations which should not take keyboard
focus.

The @take_focus state of a menu or menu bar is automatically propagated
to submenus whenever a submenu is popped up, so you don&apos;t have to worry
about recursively setting it for your entire menu hierarchy. Only when
programmatically picking a submenu and popping it up manually, the
@take_focus property of the submenu needs to be set explicitely.

Note that setting it to %FALSE has side-effects:

If the focus is in some other app, it keeps the focus and keynav in
the menu doesn&apos;t work. Consequently, keynav on the menu will only
work if the focus is on some toplevel owned by the onscreen keyboard.

To avoid confusing the user, menus with @take_focus set to %FALSE
should not display mnemonics or accelerators, since it cannot be
guaranteed that they will work.

See also gdk_keyboard_grab()

Since: 2.8

</description>
<parameters>
<parameter name="menu_shell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
<parameter name="take_focus">
<parameter_description> %TRUE if the menu shell should take the keyboard focus on popup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_filter">
<description>
Sets the current filter; only the files that pass the
filter will be displayed. If the user-selectable list of filters
is non-empty, then the filter should be one of the filters
in that list. Setting the current filter when the list of
filters is empty is useful if you want to restrict the displayed
set of files without letting the user change it.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_do_overwrite_confirmation">
<description>
Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will present
a confirmation dialog if the user types a file name that already exists.  This
is %FALSE by default.

Regardless of this setting, the @chooser will emit the &quot;confirm-overwrite&quot;
signal when appropriate.

If all you need is the stock confirmation dialog, set this property to %TRUE.
You can override the way confirmation is done by actually handling the
&quot;confirm-overwrite&quot; signal; please refer to its documentation for the
details.

Since: 2.8

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="do_overwrite_confirmation">
<parameter_description> whether to confirm overwriting in save mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_style_by_paths">
<description>
Creates up a #GtkStyle from styles defined in a RC file by providing
the raw components used in matching. This function may be useful
when creating pseudo-widgets that should be themed like widgets but
don&apos;t actually have corresponding GTK+ widgets. An example of this
would be items inside a GNOME canvas widget.

The action of gtk_rc_get_style() is similar to:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_widget_path (widget, NULL, &amp;amp;path, NULL);
gtk_widget_class_path (widget, NULL, &amp;amp;class_path, NULL);
gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget), path, class_path,
G_OBJECT_TYPE (widget));
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings object
</parameter_description>
</parameter>
<parameter name="widget_path">
<parameter_description> the widget path to use when looking up the style, or %NULL
if no matching against the widget path should be done
</parameter_description>
</parameter>
<parameter name="class_path">
<parameter_description> the class path to use when looking up the style, or %NULL
if no matching against the class path should be done.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a type that will be used along with parent types of this type
when matching against class styles, or #G_TYPE_NONE
</parameter_description>
</parameter>
</parameters>
<return> A style created by matching with the supplied paths,
or %NULL if nothing matching was specified and the default style should
be used. The returned value is owned by GTK+ as part of an internal cache,
so you must call g_object_ref() on the returned value if you want to
keep a reference to it.
</return>
</function>

<function name="gtk_file_chooser_unselect_all">
<description>
Unselects all the files in the current folder of a file chooser.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_get_page_complete">
<description>
Gets whether @page is complete..


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @page is complete.

Since: 2.10
</return>
</function>

<function name="gtk_spin_button_set_range">
<description>
Sets the minimum and maximum allowable values for @spin_button

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> minimum allowable value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum allowable value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_line_offset">
<description>
Return value: offset in visible characters from the start of the line 

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> offset in visible characters from the start of the line 
</return>
</function>

<function name="gtk_icon_theme_get_search_path">
<description>
Gets the current search path. See gtk_icon_theme_set_search_path().

Since: 2.4

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> location to store a list of icon theme path directories or %NULL
The stored value should be freed with g_strfreev().
</parameter_description>
</parameter>
<parameter name="n_elements">
<parameter_description> location to store number of elements
in @path, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_message_dialog_new_with_markup">
<description>
Creates a new message dialog, which is a simple dialog with an icon
indicating the dialog type (error, warning, etc.) and some text which
is marked up with the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;.
When the user clicks a button a &quot;response&quot; signal is emitted with
response IDs from #GtkResponseType. See #GtkDialog for more details.

Special XML characters in the printf() arguments passed to this
function will automatically be escaped as necessary.
(See g_markup_printf_escaped() for how this is implemented.)
Usually this is what you want, but if you have an existing
Pango markup string that you want to use literally as the
label, then you need to use gtk_message_dialog_set_markup()
instead, since you can&apos;t pass the markup string either
as the format (it might contain &apos;%&apos; characters) or as a string
argument.

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkWidget *dialog;
dialog = gtk_message_dialog_new (main_application_window,
GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_MESSAGE_ERROR,
GTK_BUTTONS_CLOSE,
NULL);
gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog),
markup);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent, or %NULL for none 
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of message
</parameter_description>
</parameter>
<parameter name="buttons">
<parameter_description> set of buttons to use
</parameter_description>
</parameter>
<parameter name="message_format">
<parameter_description> printf()-style format string, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments for @message_format
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkMessageDialog

Since: 2.4
</return>
</function>

<function name="gtk_tree_model_filter_set_visible_column">
<description>
Sets @column of the child_model to be the column where @filter should
look for visibility information. @columns should be a column of type
%G_TYPE_BOOLEAN, where %TRUE means that a row is visible, and %FALSE
if not.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> A #gint which is the column containing the visible information.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_vadjustment">
<description>
Sets the #GtkAdjustment for the current vertical aspect.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> The #GtkAdjustment to set, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_extra_widget">
<description>
Sets an application-supplied widget to provide extra options to the user.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="extra_widget">
<parameter_description> widget for extra options
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_pixels_inside_wrap">
<description>
Gets the value set by gtk_text_view_set_pixels_inside_wrap().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default number of pixels of blank space between wrapped lines
</return>
</function>

<function name="gtk_action_group_add_actions">
<description>
This is a convenience function to create a number of actions and add them 
to the action group.

The &quot;activate&quot; signals of the actions are connected to the callbacks and 
their accel paths are set to 
&amp;lt;literal&amp;gt;&amp;lt;Actions&amp;gt;/&amp;lt;replaceable&amp;gt;group-name&amp;lt;/replaceable&amp;gt;/&amp;lt;replaceable&amp;gt;action-name&amp;lt;/replaceable&amp;gt;&amp;lt;/literal&amp;gt;.  

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of action descriptions
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the number of entries
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the action callbacks
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_foreach">
<description>
Loops over the entries in the accelerator map whose accel path 
doesn&apos;t match any of the filters added with gtk_accel_map_add_filter(), 
and execute @foreach_func on each. The signature of @foreach_func is 
that of #GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).

</description>
<parameters>
<parameter name="data">
<parameter_description>         data to be passed into @foreach_func
</parameter_description>
</parameter>
<parameter name="foreach_func">
<parameter_description> function to be executed for each accel map entry which
is not filtered out
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_get_lc_ctype">
<description>
Return the Unix-style locale string for the language currently in
effect. On Unix systems, this is the return value from
&amp;lt;literal&amp;gt;setlocale(LC_CTYPE, NULL)&amp;lt;/literal&amp;gt;, and the user can
affect this through the environment variables LC_ALL, LC_CTYPE or
LANG (checked in that order). The locale strings typically is in
the form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. For instance, sv_FI for
Swedish as written in Finland or pt_BR for Portuguese as written in
Brazil.

On Windows, the C library doesn&apos;t use any such environment
variables, and setting them won&apos;t affect the behaviour of functions
like ctime(). The user sets the locale through the Regional Options 
in the Control Panel. The C library (in the setlocale() function) 
does not use country and language codes, but country and language 
names spelled out in English. 
However, this function does check the above environment
variables, and does return a Unix-style locale string based on
either said environment variables or the thread&apos;s current locale.


</description>
<parameters>
</parameters>
<return> a dynamically allocated string, free with g_free().
</return>
</function>

<function name="gtk_icon_set_render_icon">
<description>
Renders an icon using gtk_style_render_icon(). In most cases,
gtk_widget_render_icon() is better, since it automatically provides
most of the arguments from the current widget settings.  This
function never returns %NULL; if the icon can&apos;t be rendered
(perhaps because an image file fails to load), a default &quot;missing
image&quot; icon will be returned instead.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> a #GtkStyle associated with @widget, or %NULL
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> text direction
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> widget state
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> icon size. A size of (GtkIconSize)-1
means render at the size of the source and don&apos;t scale.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> widget that will display the icon, or %NULL.
The only use that is typically made of this
is to determine the appropriate #GdkScreen.
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> detail to pass to the theme engine, or %NULL.
Note that passing a detail of anything but %NULL
will disable caching.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbuf to be displayed
</return>
</function>

<function name="gtk_tree_row_reference_free">
<description>
Free&apos;s @reference. @reference may be %NULL.

</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_selection_dialog_get_font_name">
<description>
Gets the currently-selected font name.  Note that this can be a different
string than what you set with gtk_font_selection_dialog_set_font_name(), as
the font selection widget may normalize font names and thus return a string
with a different structure.  For example, &quot;Helvetica Italic Bold 12&quot; could be
normalized to &quot;Helvetica Bold Italic 12&quot;.  Use pango_font_description_equal()
if you want to compare two font descriptions.


</description>
<parameters>
<parameter name="fsd">
<parameter_description> a #GtkFontSelectionDialog
</parameter_description>
</parameter>
</parameters>
<return> A string with the name of the current font, or #NULL if no font
is selected.  You must free this string with g_free().
</return>
</function>

<function name="gtk_cell_view_set_background_color">
<description>
Sets the background color of @view.

Since: 2.6

</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the new background color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_class_find_child_property">
<description>
Finds a child property of a container class by name.

</description>
<parameters>
<parameter name="cclass">
<parameter_description> a #GtkContainerClass
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the child property to find
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec of the child property or %NULL if @class has no
child property with that name.
</return>
</function>

<function name="GtkRuler">
<description>
The metric used for the ruler.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_char_count">
<description>
Gets the number of characters in the buffer; note that characters
and bytes are not the same, you can&apos;t e.g. expect the contents of
the buffer in string form to be this many bytes long. The character
count is cached, so this function is very fast.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> number of characters in the buffer
</return>
</function>

<function name="gtk_file_chooser_list_shortcut_folder_uris">
<description>
Queries the list of shortcut folders in the file chooser, as set by
gtk_file_chooser_add_shortcut_folder_uri().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> A list of folder URIs, or %NULL if there are no shortcut
folders.  Free the returned list with g_slist_free(), and the URIs with
g_free().

Since: 2.4
</return>
</function>

<function name="gtk_layout_get_size">
<description>
Gets the size that has been set on the layout, and that determines
the total extents of the layout&apos;s scrollbar area. See
gtk_layout_set_size ().

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store the width set on @layout, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store the height set on @layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_expand">
<description>
Return %TRUE if the column expands to take any available space.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the column expands

Since: 2.4
</return>
</function>

<function name="gtk_cell_renderer_combo_new">
<description>
Creates a new #GtkCellRendererCombo. 
Adjust how text is drawn using object properties. 
Object properties can be set globally (with g_object_set()). 
Also, with #GtkTreeViewColumn, you can bind a property to a value 
in a #GtkTreeModel. For example, you can bind the &quot;text&quot; property 
on the cell renderer to a string value in the model, thus rendering 
a different string in each row of the #GtkTreeView.


</description>
<parameters>
</parameters>
<return> the new cell renderer

Since: 2.6
</return>
</function>

<function name="gtk_text_buffer_get_iter_at_line_offset">
<description>
Obtains an iterator pointing to @char_offset within the given
line. The @char_offset must exist, offsets off the end of the line
are not allowed. Note &amp;lt;emphasis&amp;gt;characters&amp;lt;/emphasis&amp;gt;, not bytes;
UTF-8 may encode one character as multiple bytes.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number counting from 0
</parameter_description>
</parameter>
<parameter name="char_offset">
<parameter_description> char offset from start of line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_cursor_position">
<description>
Like gtk_text_iter_forward_cursor_position(), but moves backward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved
</return>
</function>

<function name="gtk_page_setup_get_right_margin">
<description>
Gets the right margin in units of @unit.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the right margin

Since: 2.10
</return>
</function>

<function name="gtk_file_system_volume_render_icon">
<description>
Renders an icon suitable for a file #GtkFileSystemVolume.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> Reference widget to render icons.
</parameter_description>
</parameter>
<parameter name="pixel_size">
<parameter_description> Size of the icon.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbuf containing an icon, or NULL if the icon could not
be rendered.  In the latter case, the @error value will be set as
appropriate.
</return>
</function>

<function name="gtk_print_context_get_height">
<description>
Obtains the height of the #GtkPrintContext, in pixels.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the height of @context

Since: 2.10
</return>
</function>

<function name="gtk_toggle_tool_button_set_active">
<description>
Sets the status of the toggle tool button. Set to %TRUE if you
want the GtkToggleButton to be &apos;pressed in&apos;, and %FALSE to raise it.
This action causes the toggled signal to be emitted.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToggleToolButton
</parameter_description>
</parameter>
<parameter name="is_active">
<parameter_description> whether @button should be active
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_factory_add">
<description>
Adds the given @icon_set to the icon factory, under the name
@stock_id.  @stock_id should be namespaced for your application,
e.g. &quot;myapp-whatever-icon&quot;.  Normally applications create a
#GtkIconFactory, then add it to the list of default factories with
gtk_icon_factory_add_default(). Then they pass the @stock_id to
widgets such as #GtkImage to display the icon. Themes can provide
an icon with the same name (such as &quot;myapp-whatever-icon&quot;) to
override your application&apos;s default icons. If an icon already
existed in @factory for @stock_id, it is unreferenced and replaced
with the new @icon_set.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> icon name
</parameter_description>
</parameter>
<parameter name="icon_set">
<parameter_description> icon set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_pixbuf_column">
<description>
Returns: the pixbuf column, or -1 if it&apos;s unset.

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf column, or -1 if it&apos;s unset.

Since: 2.6
</return>
</function>

<function name="gtk_recent_manager_add_full">
<description>
Adds a new resource, pointed by @uri, into the recently used
resources list, using the metadata specified inside the #GtkRecentData
structure passed in @recent_data.

The passed URI will be used to identify this resource inside the
list.

In order to register the new recently used resource, metadata about
the resource must be passed as well as the URI; the metadata is
stored in a #GtkRecentData structure, which must contain the MIME
type of the resource pointed by the URI; the name of the application
that is registering the item, and a command line to be used when
launching the item.

Optionally, a #GtkRecentData structure might contain a UTF-8 string
to be used when viewing the item instead of the last component of the
URI; a short description of the item; whether the item should be
considered private - that is, should be displayed only by the
applications that have registered it.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="recent_data">
<parameter_description> metadata of the resource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the new item was successfully added to the
recently used resources list, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_range_set_restrict_to_fill_level">
<description>
Sets whether the slider is restricted to the fill level. See
gtk_range_set_fill_level() for a general description of the fill
level concept.

Since: 2.12

</description>
<parameters>
<parameter name="range">
<parameter_description>                  A #GtkRange
</parameter_description>
</parameter>
<parameter name="restrict_to_fill_level">
<parameter_description> Whether the fill level restricts slider movement.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_get_selected">
<description>
Sets @iter to the currently selected node if @selection is set to
#GTK_SELECTION_SINGLE or #GTK_SELECTION_BROWSE.  @iter may be NULL if you
just want to test if @selection has any selected nodes.  @model is filled
with the current model as a convenience.  This function will not work if you
use @selection is #GTK_SELECTION_MULTIPLE.


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A pointer to set to the #GtkTreeModel, or NULL.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if there is a selected node.
</return>
</function>

<function name="gtk_toggle_tool_button_get_active">
<description>
Queries a #GtkToggleToolButton and returns its current state.
Return value: %TRUE if the toggle tool button is pressed in, %FALSE if not

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToggleToolButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the toggle tool button is pressed in, %FALSE if not

Since: 2.4
</return>
</function>

<function name="gtk_page_setup_to_key_file">
<description>
This function adds the page setup from @setup to @key_file.

Since: 2.12

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="key_file">
<parameter_description> the #GKeyFile to save the page setup to
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> the group to add the settings to in @key_file, 
or %NULL to use the default name &quot;Page Setup&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accessible_connect_widget_destroyed">
<description>
This function specifies the callback function to be called when the widget
corresponding to a GtkAccessible is destroyed.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> a #GtkAccessible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_get_error">
<description>
Call this when the result of a print operation is
%GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by 
gtk_print_operation_run(), or in the #GtkPrintOperation::done signal 
handler. The returned #GError will contain more details on what went wrong.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for the error
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_quality">
<description>
Sets the value of %GTK_PRINT_SETTINGS_QUALITY.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="quality">
<parameter_description> a #GtkPrintQuality value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_cursor_hadjustment">
<description>
Retrieves the horizontal cursor adjustment for the entry. 
See gtk_entry_set_cursor_hadjustment().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the horizontal cursor adjustment, or %NULL 
if none has been set.

Since: 2.12
</return>
</function>

<function name="gtk_tree_model_get_path">
<description>
Return value: a newly-created #GtkTreePath.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> a newly-created #GtkTreePath.
</return>
</function>

<function name="gtk_text_iter_get_offset">
<description>
Return value: a character offset

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a character offset
</return>
</function>

<function name="gtk_print_settings_to_key_file">
<description>
This function adds the print settings from @settings to @key_file.

Since: 2.12

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key_file">
<parameter_description> the #GKeyFile to save the print settings to
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> the group to add the settings to in @key_file, or 
%NULL to use the default &quot;Print Settings&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_statusbar_set_has_resize_grip">
<description>
Sets whether the statusbar has a resize grip. 
%TRUE by default.

</description>
<parameters>
<parameter name="statusbar">
<parameter_description> a #GtkStatusBar
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to have a resize grip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_remove_action_widget">
<description>
Removes a widget from the action area of a #GtkAssistant.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_new">
<description>
Creates a new #GtkActionGroup object. The name of the action group
is used when associating &amp;lt;link linkend=&quot;Action-Accel&quot;&amp;gt;keybindings&amp;lt;/link&amp;gt; 
with the actions.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the action group.
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkActionGroup

Since: 2.4
</return>
</function>

<function name="gtk_text_buffer_get_selection_bound">
<description>
Return value: selection bound mark

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> selection bound mark
</return>
</function>

<function name="gtk_toolbar_set_tooltips">
<description>
Sets if the tooltips of a toolbar should be active or not.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="enable">
<parameter_description> set to %FALSE to disable the tooltips, or %TRUE to enable them.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_copy">
<description>
Creates a dynamically-allocated copy of an iterator. This function
is not useful in applications, because iterators can be copied with a
simple assignment (&amp;lt;literal&amp;gt;GtkTextIter i = j;&amp;lt;/literal&amp;gt;). The
function is used by language bindings.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a copy of the @iter, free with gtk_text_iter_free ()
</return>
</function>

<function name="gtk_print_settings_get_double">
<description>
Return value: the double value of @key

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> the double value of @key

Since: 2.10
</return>
</function>

<function name="_gtk_socket_add_window">
<description>
@socket: a #GtkSocket
@xid: the native identifier for a window
@need_reparent: whether the socket&apos;s plug&apos;s window needs to be
reparented to the socket

Adds a window to a GtkSocket.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_path_from_widget">
<description>
If @widget has been created by an item factory, returns the full path
to it. (The full path of a widget is the concatenation of the factory 
path specified in gtk_item_factory_new() with the path specified in the 
#GtkItemFactoryEntry from which the widget was created.)

Deprecated: 2.4:

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return> the full path to @widget if it has been created by an item
factory, %NULL otherwise. This value is owned by GTK+ and must not be
modified or freed.
</return>
</function>

<function name="gtk_window_get_title">
<description>
Retrieves the title of the window. See gtk_window_set_title().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the title of the window, or %NULL if none has
been set explicitely. The returned string is owned by the widget
and must not be modified or freed.
</return>
</function>

<function name="gtk_tool_button_get_stock_id">
<description>
Return value: the name of the stock item for @button.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
</parameters>
<return> the name of the stock item for @button.

Since: 2.4
</return>
</function>

<function name="gtk_window_set_resizable">
<description>
Sets whether the user can resize a window. Windows are user resizable
by default.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> %TRUE if the user can resize this window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_skip_pager_hint">
<description>
Gets the value set by gtk_window_set_skip_pager_hint().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window shouldn&apos;t be in pager

Since: 2.2
</return>
</function>

<function name="gtk_window_get_size">
<description>
Obtains the current size of @window. If @window is not onscreen,
it returns the size GTK+ will suggest to the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; for the initial window
size (but this is not reliably the same as the size the window
manager will actually select). The size obtained by
gtk_window_get_size() is the last size received in a
#GdkEventConfigure, that is, GTK+ uses its locally-stored size,
rather than querying the X server for the size. As a result, if you
call gtk_window_resize() then immediately call
gtk_window_get_size(), the size won&apos;t have taken effect yet. After
the window manager processes the resize request, GTK+ receives
notification that the size has changed via a configure event, and
the size of the window gets updated.

Note 1: Nearly any use of this function creates a race condition,
because the size of the window may change between the time that you
get the size and the time that you perform some action assuming
that size is the current size. To avoid race conditions, connect to
&quot;configure_event&quot; on the window and adjust your size-dependent
state to match the size delivered in the #GdkEventConfigure.

Note 2: The returned size does &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; include the
size of the window manager decorations (aka the window frame or
border). Those are not drawn by GTK+ and GTK+ has no reliable
method of determining their size.

Note 3: If you are getting a window size in order to position
the window onscreen, there may be a better way. The preferred
way is to simply set the window&apos;s semantic type with
gtk_window_set_type_hint(), which allows the window manager to
e.g. center dialogs. Also, if you set the transient parent of
dialogs with gtk_window_set_transient_for() window managers
will often center the dialog over its parent window. It&apos;s
much preferred to let the window manager handle these
things rather than doing it yourself, because all apps will
behave consistently and according to user prefs if the window
manager handles it. Also, the window manager can take the size
of the window decorations/border into account, while your
application cannot.

In any case, if you insist on application-specified window
positioning, there&apos;s &amp;lt;emphasis&amp;gt;still&amp;lt;/emphasis&amp;gt; a better way than
doing it yourself - gtk_window_set_position() will frequently
handle the details for you.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_get_visible">
<description>
Return value: %TRUE if the group is visible.

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the group is visible.

Since: 2.4
</return>
</function>

<function name="gtk_im_context_reset">
<description>
Notify the input method that a change such as a change in cursor
position has been made. This will typically cause the input
method to clear the preedit state.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_visible_cursor_position">
<description>
Moves @iter forward to the previous visible cursor position. See 
gtk_text_iter_backward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable

Since: 2.4
</return>
</function>

<function name="gtk_spin_button_get_value_as_int">
<description>
Get the value @spin_button represented as an integer.


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the value of @spin_button
</return>
</function>

<function name="gtk_print_job_get_printer">
<description>
Gets the #GtkPrinter of the print job.


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
</parameters>
<return> the printer of @job

Since: 2.10
</return>
</function>

<function name="gtk_cell_view_new_with_text">
<description>
Creates a new #GtkCellView widget, adds a #GtkCellRendererText 
to it, and makes its show @text.


</description>
<parameters>
<parameter name="text">
<parameter_description> the text to display in the cell view
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkCellView widget.

Since: 2.6
</return>
</function>

<function name="gtk_layout_new">
<description>
Creates a new #GtkLayout. Unless you have a specific adjustment
you&apos;d like the layout to use for scrolling, pass %NULL for
@hadjustment and @vadjustment.


</description>
<parameters>
<parameter name="hadjustment">
<parameter_description> horizontal scroll adjustment, or %NULL
</parameter_description>
</parameter>
<parameter name="vadjustment">
<parameter_description> vertical scroll adjustment, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkLayout
</return>
</function>

<function name="gtk_text_mark_new">
<description>
Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().
If @name is %NULL, the mark is anonymous; otherwise, the mark can be 
retrieved by name using gtk_text_buffer_get_mark(). If a mark has left 
gravity, and text is inserted at the mark&apos;s current location, the mark 
will be moved to the left of the newly-inserted text. If the mark has 
right gravity (@left_gravity = %FALSE), the mark will end up on the 
right of newly-inserted text. The standard left-to-right cursor is a 
mark with right gravity (when you type, the cursor stays on the right
side of the text you&apos;re typing).


</description>
<parameters>
<parameter name="name">
<parameter_description> mark name or %NULL
</parameter_description>
</parameter>
<parameter name="left_gravity">
<parameter_description> whether the mark should have left gravity
</parameter_description>
</parameter>
</parameters>
<return> new #GtkTextMark

Since: 2.12
</return>
</function>

<function name="gtk_icon_info_copy">
<description>
Make a copy of a #GtkIconInfo.


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
</parameters>
<return> the new GtkIconInfo

Since: 2.4
</return>
</function>

<function name="_gtk_file_chooser_entry_new">
<description>
Creates a new #GtkFileChooserEntry object. #GtkFileChooserEntry
is an internal implementation widget for the GTK+ file chooser
which is an entry with completion with respect to a
#GtkFileSystem object.


</description>
<parameters>
<parameter name="eat_tabs">
<parameter_description> If %FALSE, allow focus navigation with the tab key.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GtkFileChooserEntry
</return>
</function>

<function name="gtk_tree_model_foreach">
<description>
Calls func on each node in model in a depth-first fashion.  
If @func returns %TRUE, then the tree ceases to be walked, and 
gtk_tree_model_foreach() returns.

</description>
<parameters>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to be called on each row
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to passed to func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_expand_row">
<description>
Opens the row so its children are visible.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path to a row
</parameter_description>
</parameter>
<parameter name="open_all">
<parameter_description> whether to recursively expand, or just expand immediate children
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row existed and had children
</return>
</function>

<function name="gtk_text_layout_iter_starts_line">
<description>
Tests whether an iterator is at the start of a display line.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to test
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_pack_start">
<description>
Packs the @cell into the beginning of the column. If @expand is %FALSE, then
the @cell is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is %TRUE.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer. 
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if @cell is to be given extra space allocated to @tree_column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_remove_text">
<description>
Removes the string at @position from @combo_box. Note that you can only use
this function with combo boxes constructed with gtk_combo_box_new_text().

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox constructed with gtk_combo_box_new_text()
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> Index of the item to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkTextView">
<description>
The ::toggle-cursor-visible signal is a 
&amp;lt;link linkend=&quot;keybinding-signals&quot;&amp;gt;keybinding signal&amp;lt;/link&amp;gt; 
which gets emitted to toggle the visibility of the cursor.

The default binding for this signal is F7.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_fixed_width">
<description>
Sets the size of the column in pixels.  This is meaningful only if the sizing
type is #GTK_TREE_VIEW_COLUMN_FIXED.  The size of the column is clamped to
the min/max width for the column.  Please note that the min/max width of the
column doesn&apos;t actually affect the &quot;fixed_width&quot; property of the widget, just
the actual size when displayed.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="fixed_width">
<parameter_description> The size to set @tree_column to. Must be greater than 0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_set_minimum_key_length">
<description>
Requires the length of the search key for @completion to be at least
@length. This is useful for long lists, where completing using a small
key takes a lot of time and will come up with meaningless results anyway
(ie, a too large dataset).

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> The minimum length of the key in order to start completing.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_set_reallocate_redraws">
<description>
Sets the @reallocate_redraws flag of the container to the given value.

Containers requesting reallocation redraws get automatically
redrawn if any of their children changed allocation. 

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="needs_redraws">
<parameter_description> the new value for the container&apos;s @reallocate_redraws flag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_collapse_all">
<description>
Recursively collapses all visible, expanded nodes in @tree_view.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_show_border">
<description>
Return value: %TRUE if the bevel is drawn

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the bevel is drawn
</return>
</function>

<function name="gtk_combo_box_set_wrap_width">
<description>
Sets the wrap width of @combo_box to be @width. The wrap width is basically
the preferred number of columns when you want the popup to be layed out
in a table.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Preferred number of columns
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_insert_prefix">
<description>
Requests a prefix insertion. 

Since: 2.6

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_comments">
<description>
Sets the comments string to display in the about 
dialog. This should be a short string of one or
two lines.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="comments">
<parameter_description> a comments string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_owner_set">
<description>
Claims ownership of a given selection for a particular widget,
or, if @widget is %NULL, release ownership of the selection.


</description>
<parameters>
<parameter name="widget">
<parameter_description>  a #GtkWidget, or %NULL.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description>  an interned atom representing the selection to claim
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp with which to claim the selection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded
</return>
</function>

<function name="gtk_entry_completion_set_inline_completion">
<description>
Sets whether the common prefix of the possible completions should
be automatically inserted in the entry.

Since: 2.6

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
<parameter name="inline_completion">
<parameter_description> %TRUE to do inline completion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_language">
<description>
A convenience wrapper around gtk_text_iter_get_attributes (),
which returns the language in effect at @iter. If no tags affecting
language apply to @iter, the return value is identical to that of
gtk_get_default_language ().


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> language in effect at @iter
</return>
</function>

<function name="gtk_file_chooser_add_filter">
<description>
Adds @filter to the list of filters that the user can select between.
When a filter is selected, only files that are passed by that
filter are displayed. 

Note that the @chooser takes ownership of the filter, so you have to 
ref and sink it if you want to keep a reference.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_start_editing">
<description>
Passes an activate event to the cell renderer for possible processing.


</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> widget that received the event
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> widget-dependent string representation of the event location; 
e.g. for #GtkTreeView, a string representation of #GtkTreePath
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> background area as passed to gtk_cell_renderer_render()
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> cell area as passed to gtk_cell_renderer_render()
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> render flags
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkCellEditable, or %NULL
</return>
</function>

<function name="gtk_paint_handle">
<description>
Draws a handle as used in #GtkHandleBox and #GtkPaned.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the handle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the handle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> with of the handle
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the handle
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation of the handle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_char">
<description>
Moves backward by one character offset. Returns %TRUE if movement
was possible; if @iter was the first in the buffer (character
offset 0), gtk_text_iter_backward_char () returns %FALSE for convenience when
writing loops.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether movement was possible
</return>
</function>

<function name="gtk_tree_model_iter_children">
<description>
Sets @iter to point to the first child of @parent.  If @parent has no 
children, %FALSE is returned and @iter is set to be invalid.  @parent 
will remain a valid node after this function has been called.

If @parent is %NULL returns the first node, equivalent to
&amp;lt;literal&amp;gt;gtk_tree_model_get_iter_first (tree_model, iter);&amp;lt;/literal&amp;gt;


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The new #GtkTreeIter to be set to the child.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> The #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @child has been set to the first child.
</return>
</function>

<function name="gtk_tree_view_get_hover_selection">
<description>
Return value: %TRUE if @tree_view is in hover selection mode

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tree_view is in hover selection mode

Since: 2.6 
</return>
</function>

<function name="gtk_tree_model_get_iter">
<description>
Sets @iter to a valid iterator pointing to @path.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set.
</return>
</function>

<function name="gtk_builder_connect_signals">
<description>
This method is a simpler variation of gtk_builder_connect_signals_full().
It uses #GModule&apos;s introspective features (by opening the module %NULL) 
to look at the application&apos;s symbol table. From here it tries to match
the signal handler names given in the interface description with
symbols in the application and connects the signals.

Note that this function will not work correctly if #GModule is not
supported on the platform.

Since: 2.12

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a pointer to a structure sent in as user data to all signals
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_add_action_widget">
<description>
Adds an activatable widget to the action area of a #GtkDialog,
connecting a signal handler that will emit the #GtkDialog::response 
signal on the dialog when the widget is activated. The widget is 
appended to the end of the dialog&apos;s action area. If you want to add a
non-activatable widget, simply pack it into the @action_area field 
of the #GtkDialog struct.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> an activatable widget
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> response ID for @child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_add_entry">
<description>
Registers a new accelerator with the global accelerator map.
This function should only be called once per @accel_path
with the canonical @accel_key and @accel_mods for this path.
To change the accelerator during runtime programatically, use
gtk_accel_map_change_entry().
The accelerator path must consist of &quot;&amp;lt;WINDOWTYPE&amp;gt;/Category1/Category2/.../Action&quot;,
where &amp;lt;WINDOWTYPE&amp;gt; should be a unique application-specific identifier, that
corresponds to the kind of window the accelerator is being used in, e.g. &quot;Gimp-Image&quot;,
&quot;Abiword-Document&quot; or &quot;Gnumeric-Settings&quot;.
The Category1/.../Action portion is most appropriately chosen by the action the
accelerator triggers, i.e. for accelerators on menu items, choose the item&apos;s menu path,
e.g. &quot;File/Save As&quot;, &quot;Image/View/Zoom&quot; or &quot;Edit/Select All&quot;.
So a full valid accelerator path may look like:
&quot;&amp;lt;Gimp-Toolbox&amp;gt;/File/Dialogs/Tool Options...&quot;.

</description>
<parameters>
<parameter name="accel_path">
<parameter_description> valid accelerator path
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>  the accelerator key
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description> the accelerator modifiers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_register_serialize_format">
<description>
This function registers a rich text serialization @function along with
its @mime_type with the passed @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the format&apos;s mime-type
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the serialize function to register
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> %function&apos;s user_data
</parameter_description>
</parameter>
<parameter name="user_data_destroy">
<parameter_description> a function to call when @user_data is no longer needed
</parameter_description>
</parameter>
</parameters>
<return> the #GdkAtom that corresponds to the newly registered
format&apos;s mime-type.

Since: 2.10
</return>
</function>

<function name="gtk_notebook_set_current_page">
<description>
Switches to the page number @page_num. 

Note that due to historical reasons, GtkNotebook refuses
to switch to a page unless the child widget is visible. 
Therefore, it is recommended to show child widgets before
adding them to a notebook. 

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> index of the page to switch to, starting from 0.
If negative, the last page will be used. If greater
than the number of pages in the notebook, nothing
will be done.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_printer_get_capabilities">
<description>
Return value: the printer&apos;s capabilities

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the printer&apos;s capabilities

Since: 2.12
</return>
</function>

<function name="gtk_recent_chooser_menu_get_show_numbers">
<description>
Return value: %TRUE if numbers should be shown.

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkRecentChooserMenu
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if numbers should be shown.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_column_get_visible">
<description>
Return value: whether the column is visible or not.  If it is visible, then

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether the column is visible or not.  If it is visible, then
the tree will show the column.
</return>
</function>

<function name="gtk_print_settings_set_printer">
<description>
Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
to @printer.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="printer">
<parameter_description> the printer name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_convert_path_to_child_path">
<description>
Converts @sorted_path to a path on the child model of @tree_model_sort.  
That is, @sorted_path points to a location in @tree_model_sort.  The 
returned path will point to the same location in the model not being 
sorted.  If @sorted_path does not point to a location in the child model, 
%NULL is returned.


</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="sorted_path">
<parameter_description> A #GtkTreePath to convert
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreePath, or %NULL
</return>
</function>

<function name="gtk_file_chooser_error_quark">
<description>
Registers an error quark for #GtkFileChooser if necessary.


</description>
<parameters>
</parameters>
<return> The error quark used for #GtkFileChooser errors.

Since: 2.4
</return>
</function>

<function name="gtk_icon_source_get_direction">
<description>
Obtains the text direction this icon source applies to. The return
value is only useful/meaningful if the text direction is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; 
wildcarded.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> text direction this source matches
</return>
</function>

<function name="gtk_cell_layout_pack_start">
<description>
Packs the @cell into the beginning of @cell_layout. If @expand is %FALSE,
then the @cell is allocated no more space than it needs. Any unused space
is divided evenly between cells for which @expand is %TRUE.

Note that reusing the same cell renderer is not supported. 

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if @cell is to be given extra space allocated to @cell_layout.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_mark">
<description>
Return value: a #GtkTextMark, or %NULL

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a mark name
</parameter_description>
</parameter>
</parameters>
<return> a #GtkTextMark, or %NULL
</return>
</function>

<function name="gtk_paper_size_set_size">
<description>
Changes the dimensions of a @size to @width x @height.

Since: 2.10

</description>
<parameters>
<parameter name="size">
<parameter_description> a custom #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the new width in units of @unit
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the new height in units of @unit
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for @width and @height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_reset_default_sort_func">
<description>
This resets the default sort function to be in the &apos;unsorted&apos; state.  That
is, it is in the same order as the child model. It will re-sort the model
to be in the same order as the child model only if the #GtkTreeModelSort
is in &apos;unsorted&apos; state.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_swap">
<description>
Swaps @a and @b in @store. Note that this function only works with
unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Another #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_shape_combine_mask">
<description>
Sets a shape for this widget&apos;s GDK window. This allows for
transparent windows etc., see gdk_window_shape_combine_mask()
for more information.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="shape_mask">
<parameter_description> shape to be added, or %NULL to remove an existing shape
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of shape mask with respect to @window
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of shape mask with respect to @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_unset_rows_drag_source">
<description>
Undoes the effect of gtk_tree_view_enable_model_drag_source().

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_builder_get_objects">
<description>
Gets all objects that have been constructed by @builder. Note that 
this function does not increment the reference counts of the returned
objects.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GSList containing all the objects
constructed by the #GtkBuilder instance. It should be freed by
g_slist_free()

Since: 2.12
</return>
</function>

<function name="gtk_expander_get_expanded">
<description>
Queries a #GtkExpander and returns its current state. Returns %TRUE
if the child widget is revealed.

See gtk_expander_set_expanded().


</description>
<parameters>
<parameter name="expander">
<parameter_description>a #GtkExpander
</parameter_description>
</parameter>
</parameters>
<return> the current state of the expander.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_get_headers_visible">
<description>
Return value: Whether the headers are visible or not.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> Whether the headers are visible or not.
</return>
</function>

<function name="gtk_message_dialog_new">
<description>
Creates a new message dialog, which is a simple dialog with an icon
indicating the dialog type (error, warning, etc.) and some text the
user may want to see. When the user clicks a button a &quot;response&quot;
signal is emitted with response IDs from #GtkResponseType. See
#GtkDialog for more details.


</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent, or %NULL for none 
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of message
</parameter_description>
</parameter>
<parameter name="buttons">
<parameter_description> set of buttons to use
</parameter_description>
</parameter>
<parameter name="message_format">
<parameter_description> printf()-style format string, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments for @message_format
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkMessageDialog
</return>
</function>

<function name="GtkRecentChooserMenu">
<description>
Whether the first ten items in the menu should be prepended by
a number acting as a unique mnemonic.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_box_pack_start">
<description>
Adds @child to @box, packed with reference to the start of @box.
The @child is packed after any other child packed with reference 
to the start of @box.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to be added to @box
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if the new child is to be given extra space allocated to
@box.  The extra space will be divided evenly between all children of
@box that use this option
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if space given to @child by the @expand option is
actually allocated to @child, rather than just padding it.  This
parameter has no effect if @expand is set to %FALSE.  A child is
always allocated the full height of a #GtkHBox and the full width 
of a #GtkVBox. This option affects the other dimension
</parameter_description>
</parameter>
<parameter name="padding">
<parameter_description> extra space in pixels to put between this child and its
neighbors, over and above the global amount specified by
#GtkBox:spacing property.  If @child is a widget at one of the 
reference ends of @box, then @padding pixels are also put between 
@child and the reference edge of @box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_bar_get_pack_direction">
<description>
Retrieves the current pack direction of the menubar. See
gtk_menu_bar_set_pack_direction().


</description>
<parameters>
<parameter name="menubar">
<parameter_description> a #GtkMenuBar
</parameter_description>
</parameter>
</parameters>
<return> the pack direction

Since: 2.8
</return>
</function>

<function name="gtk_im_context_set_cursor_location">
<description>
Notify the input method that a change in cursor 
position has been made. The location is relative to the client
window.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> new location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_system_model_path_do">
<description>
Locates @path within @model, referencing
(gtk_tree_model_ref_node()) all parent nodes,
calls @func passing in the path and iter for @path,
then unrefs all the parent nodes.

The reason for doing this operation as a callback
is so that if the operation performed with the
path and iter results in referencing the node
and/or parent nodes, we don&apos;t load all the information
about the nodes.

This function is particularly useful for expanding
a #GtkTreeView to a particular point in the file system.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path pointing to a file in the filesystem
for @model.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> Function to call with the path and iter corresponding
to @path.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_hadjustment">
<description>
Sets the #GtkAdjustment for the current horizontal aspect.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> The #GtkAdjustment to set, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_for_image">
<description>
Requests the contents of the clipboard as image and converts
the result to a #GdkPixbuf. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GdkPixbuf object which must
be disposed with g_object_unref(), or %NULL if 
retrieving the selection data failed. (This 
could happen for various reasons, in particular 
if the clipboard was empty or if the contents of 
the clipboard could not be converted into an image.)

Since: 2.6
</return>
</function>

<function name="gtk_widget_show_all">
<description>
Recursively shows a widget, and any child widgets (if the widget is
a container).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_invisible_char">
<description>
Sets the character to use in place of the actual text when
gtk_entry_set_visibility() has been called to set text visibility
to %FALSE. i.e. this is the character used in &quot;password mode&quot; to
show the user how many characters have been typed. The default
invisible char is an asterisk (&apos;*&apos;).  If you set the invisible char
to 0, then the user will get no feedback at all; there will be
no text on the screen as they type.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="ch">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_job_send">
<description>
Sends the print job off to the printer.  

Since: 2.10

</description>
<parameters>
<parameter name="job">
<parameter_description> a GtkPrintJob
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to call when the job completes or an error occurs
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that gets passed to @callback
</parameter_description>
</parameter>
<parameter name="dnotify">
<parameter_description> destroy notify for @user_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_action_get_active">
<description>
Returns: the checked state of the toggle action

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> the checked state of the toggle action

Since: 2.4
</return>
</function>

<function name="gtk_widget_queue_clear">
<description>
This function does the same as gtk_widget_queue_draw().

Deprecated: Use gtk_widget_queue_draw() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_xembed_pop_message">
<description>
Removes an event added with _gtk_xembed_push_message()

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="GtkSpinButton">
<description>
The wrapped signal is emitted right after the spinbutton wraps
from its maximum to minimum value or vice-versa.

Since: 2.10

</description>
<parameters>
<parameter name="spinbutton">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_widget_to_tree_coords">
<description>
Converts bin_window coordinates to coordinates for the
tree (the full scrollable area of the tree).

Deprecated: 2.12: Due to historial reasons the name of this function is
incorrect.  For converting coordinates relative to the widget to
bin_window coordinates, please see
gtk_tree_view_convert_widget_to_bin_window_coords().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> X coordinate relative to bin_window
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> Y coordinate relative to bin_window
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> return location for tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> return location for tree Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_socket_advance_toplevel_focus">
<description>
@socket: a #GtkSocket
@direction: a direction

Called from the GtkSocket backend when the corresponding plug
has told the socket to move the focus.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_cell_view_get_displayed_row">
<description>
Returns: the currently displayed row or %NULL

</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView
</parameter_description>
</parameter>
</parameters>
<return> the currently displayed row or %NULL

Since: 2.6
</return>
</function>

<function name="_gtk_file_chooser_entry_set_base_folder">
<description>
Sets the folder with respect to which completions occur.

</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooserEntry
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of a folder in the chooser entries current file system.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_item_set_submenu">
<description>
Sets or replaces the menu item&apos;s submenu, or removes it when a %NULL
submenu is passed.

</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem
</parameter_description>
</parameter>
<parameter name="submenu">
<parameter_description> the submenu, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkFileChooser">
<description>
Whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode
will present an overwrite confirmation dialog if the user
selects a file name that already exists.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_set_show_tips">
<description>
Sets whether to show a tooltips on the widget.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="show_tips">
<parameter_description> %TRUE if tooltips should be shown
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_add_ui_from_file">
<description>
Parses a file containing a &amp;lt;link linkend=&quot;XML-UI&quot;&amp;gt;UI definition&amp;lt;/link&amp;gt; and 
merges it with the current contents of @self. 


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the name of the file to parse 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> The merge id for the merged UI. The merge id can be used
to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
the return value is 0.

Since: 2.4
</return>
</function>

<function name="gtk_selection_data_free">
<description>
Frees a #GtkSelectionData structure returned from
gtk_selection_data_copy().

</description>
<parameters>
<parameter name="data">
<parameter_description> a pointer to a #GtkSelectionData structure.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_forward_display_line">
<description>
Moves the given @iter forward by one display (wrapped) line.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_spin_button_get_wrap">
<description>
Return value: %TRUE if the spin button wraps around

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the spin button wraps around
</return>
</function>

<function name="gtk_requisition_copy">
<description>
Copies a #GtkRequisition.


</description>
<parameters>
<parameter name="requisition">
<parameter_description> a #GtkRequisition
</parameter_description>
</parameter>
</parameters>
<return> a copy of @requisition
</return>
</function>

<function name="gtk_clipboard_request_image">
<description>
Requests the contents of the clipboard as image. When the image is
later received, it will be converted to a #GdkPixbuf, and
@callback will be called. 

The @pixbuf parameter to @callback will contain the resulting 
#GdkPixbuf if the request succeeded, or %NULL if it failed. This 
could happen for various reasons, in particular if the clipboard 
was empty or if the contents of the clipboard could not be 
converted into an image.

Since: 2.6

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  a function to call when the image is received,
or the retrieval fails. (It will always be called
one way or the other.)
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_label_set_accel_widget">
<description>
Sets the widget to be monitored by this accelerator label. 

</description>
<parameters>
<parameter name="accel_label">
<parameter_description> a #GtkAccelLabel
</parameter_description>
</parameter>
<parameter name="accel_widget">
<parameter_description> the widget to be monitored.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_starts_sentence">
<description>
Determines whether @iter begins a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the start of a sentence.
</return>
</function>

<function name="gtk_widget_get_default_colormap">
<description>
Obtains the default colormap used to create widgets.


</description>
<parameters>
</parameters>
<return> default widget colormap
</return>
</function>

<function name="gtk_old_editable_claim_selection">
<description>
Claims or gives up ownership of the selection.

</description>
<parameters>
<parameter name="old_editable">
<parameter_description> a #GtkOldEditable
</parameter_description>
</parameter>
<parameter name="claim">
<parameter_description> if %TRUE, claim ownership of the selection, if %FALSE, give
up ownership
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_unselect_all">
<description>
Unselects all the nodes.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_colormap">
<description>
Sets the colormap for the widget to the given value. Widget must not
have been previously realized. This probably should only be used
from an &amp;lt;function&amp;gt;init()&amp;lt;/function&amp;gt; function (i.e. from the constructor 
for the widget).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a colormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_prepend_page">
<description>
Prepends a page to the @assistant.


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the index (starting at 0) of the inserted page

Since: 2.10
</return>
</function>

<function name="gtk_clipboard_clear">
<description>
Clears the contents of the clipboard. Generally this should only
be called between the time you call gtk_clipboard_set_with_owner()
or gtk_clipboard_set_with_data(),
and when the @clear_func you supplied is called. Otherwise, the
clipboard may be owned by someone else.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description>  a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_range_get_wheel_delta">
<description>
Return value: A good step value for the mouse wheel. 

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> A #GdkScrollDirection
</parameter_description>
</parameter>
</parameters>
<return> A good step value for the mouse wheel. 

Since: 2.4
</return>
</function>

<function name="gtk_invisible_get_screen">
<description>
Return value: the associated #GdkScreen.

</description>
<parameters>
<parameter name="invisible">
<parameter_description> a #GtkInvisible.
</parameter_description>
</parameter>
</parameters>
<return> the associated #GdkScreen.

Since: 2.2
</return>
</function>

<function name="gtk_file_system_insert_bookmark">
<description>
Adds a path for a folder to the user&apos;s bookmarks list.  If the operation
succeeds, the &quot;bookmarks_changed&quot; signal will be emitted.  Bookmark paths are
unique; if you try to insert a @path that already exists, the operation will
fail and the @error will be set to #GTK_FILE_SYSTEM_ERROR_ALREADY_EXISTS.  To
reorder the list of bookmarks, use gtk_file_system_remove_bookmark() to
remove the path in question, and call gtk_file_system_insert_bookmark() with
the new position for the path.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of the bookmark to add
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> index in the bookmarks list at which the @path should be inserted; use 0
for the beginning, and -1 or the number of bookmarks itself for the end of the list.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation succeeds, FALSE otherwise.  In the latter case,
the @error value will be set.
</return>
</function>

<function name="gtk_range_set_lower_stepper_sensitivity">
<description>
Sets the sensitivity policy for the stepper that points to the
&apos;lower&apos; end of the GtkRange&apos;s adjustment.

Since: 2.10

</description>
<parameters>
<parameter name="range">
<parameter_description>       a #GtkRange
</parameter_description>
</parameter>
<parameter name="sensitivity">
<parameter_description> the lower stepper&apos;s sensitivity policy.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_misc_get_padding">
<description>
Gets the padding in the X and Y directions of the widget. 
See gtk_misc_set_padding().

</description>
<parameters>
<parameter name="misc">
<parameter_description> a #GtkMisc
</parameter_description>
</parameter>
<parameter name="xpad">
<parameter_description> location to store padding in the X direction, or %NULL
</parameter_description>
</parameter>
<parameter name="ypad">
<parameter_description> location to store padding in the Y direction, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_set_spacing">
<description>
Sets the ::spacing property which specifies the space 
which is inserted between the cells (i.e. the icon and 
the text) of an item.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the spacing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_is_adjusting">
<description>
Gets the current state of the @colorsel.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user is currently dragging a color around, and %FALSE
if the selection has stopped.
</return>
</function>

<function name="gtk_icon_source_set_state_wildcarded">
<description>
If the widget state is wildcarded, this source can be used as the
base image for an icon in any #GtkStateType.  If the widget state
is not wildcarded, then the state the source applies to should be
set with gtk_icon_source_set_state() and the icon source will
only be used with that specific state.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.

#GtkIconSet will normally transform wildcarded source images to
produce an appropriate icon for a given state, for example
lightening an image on prelight, but will not modify source images
that match exactly.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to wildcard the widget state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scale_button_set_icons">
<description>
Sets the icons to be used by the scale button. 
For details, see the #GtkScaleButton:icons property.

Since 2.12

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkScaleButton
</parameter_description>
</parameter>
<parameter name="icons">
<parameter_description> a %NULL-terminated array of icon names
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_tooltip_text">
<description>
Sets the text to be displayed as tooltip on the item.
See gtk_widget_set_tooltip_text().

Since: 2.12

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text to be used as tooltip for @tool_item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_iter_depth">
<description>
Return value: The depth of @iter

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> The depth of @iter
</return>
</function>

<function name="_gtk_socket_handle_map_request">
<description>
@socket: a #GtkSocket

Called from the GtkSocket backend when the plug has been mapped.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_draw_expander">
<description>
Draws an expander as used in #GtkTreeView.

Deprecated: Use gtk_paint_expander() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x position to draw the expander at
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y position to draw the expander at
</parameter_description>
</parameter>
<parameter name="expander_style">
<parameter_description> the style to draw the expander in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_is_adjusting">
<description>
An HSV color selector can be said to be adjusting if multiple rapid changes
are being made to its value, for example, when the user is adjusting the
value with the mouse.  This function queries whether the HSV color selector
is being adjusted or not.


</description>
<parameters>
<parameter name="hsv">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if clients can ignore changes to the color value, since
they may be transitory, or FALSE if they should consider the color value
status to be final.
</return>
</function>

<function name="gtk_window_set_keep_above">
<description>
Asks to keep @window above, so that it stays on top. Note that
you shouldn&apos;t assume the window is definitely above afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could not keep it above,
and not all window managers support keeping windows above. But
normally the window will end kept above. Just don&apos;t write code
that crashes if not.

It&apos;s permitted to call this function before showing a window,
in which case the window will be kept above when it appears onscreen
initially.

You can track the above state via the &quot;window_state_event&quot; signal
on #GtkWidget.

Note that, according to the &amp;lt;ulink 
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&amp;gt;Extended Window 
Manager Hints&amp;lt;/ulink&amp;gt; specification, the above state is mainly meant 
for user preferences and should not be used by applications e.g. for 
drawing attention to their dialogs.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @window above other windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_text">
<description>
Sets the text within the #GtkLabel widget. It overwrites any text that
was there before.  

This will also clear any previously set mnemonic accelerators.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> The text you want to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_item_at_pos">
<description>
Finds the path at the point (@x, @y), relative to bin_window coordinates.
In contrast to gtk_icon_view_get_path_at_pos(), this function also 
obtains the cell at the specified position. The returned path should
be freed with gtk_tree_path_free().
See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
widget coordinates to bin_window coordinates.


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The x position to be identified
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The y position to be identified
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> Return location for the path, or %NULL
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> Return location for the renderer responsible for the cell
at (@x, @y), or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an item exists at the specified position

Since: 2.8
</return>
</function>

<function name="gtk_list_store_prepend">
<description>
Prepends a new row to @list_store. @iter will be changed to point to this new
row. The row will be empty after this function is called. To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the prepend row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_get_action">
<description>
Looks up an action in the action group by name.


</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="action_name">
<parameter_description> the name of the action
</parameter_description>
</parameter>
</parameters>
<return> the action, or %NULL if no action by that name exists

Since: 2.4
</return>
</function>

<function name="gtk_dialog_set_has_separator">
<description>
Sets whether the dialog has a separator above the buttons.
%TRUE by default.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to have a separator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_extra_widget">
<description>
Gets the current preview widget; see
gtk_file_chooser_set_extra_widget().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the current extra widget, or %NULL

Since: 2.4
</return>
</function>

<function name="gtk_recent_info_get_icon">
<description>
Retrieves the icon of size @size associated to the resource MIME type.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the icon in pixels
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbuf containing the icon, or %NULL.

Since: 2.10
</return>
</function>

<function name="gtk_text_view_set_overwrite">
<description>
Changes the #GtkTextView overwrite mode.

Since: 2.4

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="overwrite">
<parameter_description> %TRUE to turn on overwrite mode, %FALSE to turn it off
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_tool_button_set_arrow_tooltip">
<description>
Sets the #GtkTooltips object to be used for arrow button which
pops up the menu. See gtk_tool_item_set_tooltip() for setting
a tooltip on the whole #GtkMenuToolButton.

Since: 2.6

Deprecated: 2.12: Use gtk_menu_tool_button_set_arrow_tooltip_text()
instead.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkMenuToolButton
</parameter_description>
</parameter>
<parameter name="tooltips">
<parameter_description> the #GtkTooltips object to be used
</parameter_description>
</parameter>
<parameter name="tip_text">
<parameter_description> text to be used as tooltip text for tool_item
</parameter_description>
</parameter>
<parameter name="tip_private">
<parameter_description> text to be used as private tooltip text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_set_font_name">
<description>
Sets or updates the currently-displayed font in font picker dialog.


</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
<parameter name="fontname">
<parameter_description> Name of font to display in font selection dialog
</parameter_description>
</parameter>
</parameters>
<return> Return value of gtk_font_selection_dialog_set_font_name() if the
font selection dialog exists, otherwise %FALSE.

Since: 2.4
</return>
</function>

<function name="gtk_widget_push_composite_child">
<description>
Makes all newly-created widgets as composite children until
the corresponding gtk_widget_pop_composite_child() call.

A composite child is a child that&apos;s an implementation detail of the
container it&apos;s inside and should not be visible to people using the
container. Composite children aren&apos;t treated differently by GTK (but
see gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI 
builders might want to treat them in a different way.

Here is a simple example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_widget_push_composite_child (&amp;lt;!-- --&amp;gt;);
scrolled_window-&amp;gt;hscrollbar = gtk_hscrollbar_new (hadjustment);
gtk_widget_set_composite_name (scrolled_window-&amp;gt;hscrollbar, &quot;hscrollbar&quot;);
gtk_widget_pop_composite_child (&amp;lt;!-- --&amp;gt;);
gtk_widget_set_parent (scrolled_window-&amp;gt;hscrollbar, 
GTK_WIDGET (scrolled_window));
g_object_ref (scrolled_window-&amp;gt;hscrollbar);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_drag_dest_item">
<description>
Gets information about the item that is highlighted for feedback.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> Return location for the path of the highlighted item, or %NULL.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> Return location for the drop position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_remove">
<description>
Removes @iter from @tree_store.  After being removed, @iter is set to the
next valid row at that level, or invalidated if it previously pointed to the
last one.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is still valid, %FALSE if not.
</return>
</function>

<function name="gtk_tree_store_move_before">
<description>
Moves @iter in @tree_store to the position before @position. @iter and
@position should be in the same level. Note that this function only
works with unsorted stores. If @position is %NULL, @iter will be
moved to the end of the level.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_text">
<description>
Like gtk_text_iter_get_text (), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
&quot;invisible&quot; attribute turned on has been applied to it.


</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of range
</parameter_description>
</parameter>
</parameters>
<return> string containing visible text in the range
</return>
</function>

<function name="gtk_frame_set_shadow_type">
<description>
Sets the shadow type for @frame.

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new #GtkShadowType
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_propagate_expose">
<description>
When a container receives an expose event, it must send synthetic
expose events to all children that don&apos;t have their own #GdkWindows.
This function provides a convenient way of doing this. A container,
when it receives an expose event, calls gtk_container_propagate_expose() 
once for each child, passing in the event the container received.

gtk_container_propagate_expose() takes care of deciding whether
an expose event needs to be sent to the child, intersecting
the event&apos;s area with the child area, and sending the event.

In most cases, a container can simply either simply inherit the
#GtkWidget::expose implementation from #GtkContainer, or, do some drawing 
and then chain to the ::expose implementation from #GtkContainer.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @container
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a expose event sent to container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_freeze">
<description>
This is a deprecated function, it doesn&apos;t do anything useful.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set">
<description>
Precursor of g_object_set().

Deprecated: Use g_object_set() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value of first property, followed by more properties, 
%NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_action_set_active">
<description>
Sets the checked state on the toggle action.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="is_active">
<parameter_description> whether the action should be checked or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_filename">
<description>
Gets the filename for the currently selected file in
the file selector. If multiple files are selected,
one of the filenames will be returned at random.

If the file chooser is in folder mode, this function returns the selected
folder.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> The currently selected filename, or %NULL
if no file is selected, or the selected file can&apos;t
be represented with a local filename. Free with g_free().

Since: 2.4
</return>
</function>

<function name="gtk_about_dialog_get_comments">
<description>
Return value: The comments. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The comments. The string is owned by the about
dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_range_set_show_fill_level">
<description>
Sets whether a graphical fill level is show on the trough. See
gtk_range_set_fill_level() for a general description of the fill
level concept.

Since: 2.12

</description>
<parameters>
<parameter name="range">
<parameter_description>           A #GtkRange
</parameter_description>
</parameter>
<parameter name="show_fill_level">
<parameter_description> Whether a fill level indicator graphics is shown.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_tooltip_cell">
<description>
Sets the tip area of @tooltip to the area @path, @column and @cell have
in common.  For example if @path is %NULL and @column is set, the tip
area will be set to the full area covered by @column.  See also
gtk_tooltip_set_tip_area().

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath or %NULL
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn or %NULL
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> a #GtkCellRendererText or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_convert_widget_to_tree_coords">
<description>
Converts widget coordinates to coordinates for the
tree (the full scrollable area of the tree).

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> X coordinate relative to the widget
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> Y coordinate relative to the widget
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> return location for tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> return location for tree Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_visible">
<description>
Sets the visibility of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> %TRUE if the @tree_column is visible.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkLabel">
<description>
The desired maximum width of the label, in characters. If this property 
is set to -1, the width will be calculated automatically, otherwise the 
label will request space for no more than the requested number of 
characters. If the #GtkLabel:width-chars property is set to a positive 
value, then the &quot;max-width-chars&quot; property is ignored.

Since: 2.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_bool_with_default">
<description>
Return value: the boolean value associated with @key

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="default_val">
<parameter_description> the default value
</parameter_description>
</parameter>
</parameters>
<return> the boolean value associated with @key

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_collapse_row">
<description>
Collapses a row (hides its child rows, if they exist).


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path to a row in the @tree_view
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row was collapsed.
</return>
</function>

<function name="gtk_tree_store_reorder">
<description>
Reorders the children of @parent in @tree_store to follow the order
indicated by @new_order. Note that this function only works with
unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> an array of integers mapping the new position of each child
to its old position before the re-ordering,
i.e. @new_order&amp;lt;literal&amp;gt;[newpos] = oldpos&amp;lt;/literal&amp;gt;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_set_current_page">
<description>
Sets the current page number. If @current_page is not -1, this enables
the current page choice for the range of pages to print.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
<parameter name="current_page">
<parameter_description> the current page number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_message_dialog_set_image">
<description>
Sets the dialog&apos;s image to @image.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkMessageDialog
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> the image
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_set_shadow_type">
<description>
Sets the shadow type of the viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new shadow type.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_preview_uri">
<description>
Gets the URI that should be previewed in a custom preview
widget. See gtk_file_chooser_set_preview_widget().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the URI for the file to preview, or %NULL if no file is
selected. Free with g_free().

Since: 2.4
</return>
</function>

<function name="gtk_entry_append_text">
<description>
Appends the given text to the contents of the widget.

Deprecated: gtk_entry_append_text() is deprecated and should not
be used in newly-written code. Use gtk_editable_insert_text()
instead.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to append
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_row_separator_func">
<description>
Return value: the current row separator function.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the current row separator function.

Since: 2.6
</return>
</function>

<function name="gtk_text_buffer_insert_range">
<description>
Copies text, tags, and pixbufs between @start and @end (the order
of @start and @end doesn&apos;t matter) and inserts the copy at @iter.
Used instead of simply getting/inserting text because it preserves
images and tags. If @start and @end are in a different buffer from
@buffer, the two buffers must share the same tag table.

Implemented via emissions of the insert_text and apply_tag signals,
so expect those.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> a position in a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> another position in the same buffer as @start
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_email_hook">
<description>
Installs a global function to be called whenever the user activates an
email link in an about dialog. 


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call when an email link is activated.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> #GDestroyNotify for @data
</parameter_description>
</parameter>
</parameters>
<return> the previous email hook.

Since: 2.6
</return>
</function>

<function name="gtk_paint_check">
<description>
Draws a check button indicator in the given rectangle on @window with 
the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the check in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_get_uris">
<description>
Gets the URI of the recently used resources.

The return value of this function is affected by the &quot;sort-type&quot; and &quot;limit&quot;
properties of @chooser.

Since the returned array is %NULL terminated, @length may be %NULL.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for a the length of the URI list, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated, %NULL terminated array of strings. Use
g_strfreev() to free it.

Since: 2.10
</return>
</function>

<function name="gtk_accel_label_set_accel_closure">
<description>
Sets the closure to be monitored by this accelerator label. The closure
must be connected to an accelerator group; see gtk_accel_group_connect().

</description>
<parameters>
<parameter name="accel_label">
<parameter_description> a #GtkAccelLabel
</parameter_description>
</parameter>
<parameter name="accel_closure">
<parameter_description> the closure to monitor for accelerator changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_get_priority">
<description>
Get the tag priority.


</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return> The tag&apos;s priority.
</return>
</function>

<function name="gtk_icon_theme_rescan_if_needed">
<description>
Checks to see if the icon theme has changed; if it has, any
currently cached information is discarded and will be reloaded
next time @icon_theme is accessed.


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the icon theme has changed and needed
to be reloaded.

Since: 2.4
</return>
</function>

<function name="gtk_about_dialog_get_logo_icon_name">
<description>
Return value: the icon name displayed as logo. The string is

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> the icon name displayed as logo. The string is
owned by the dialog. If you want to keep a reference
to it, you have to call g_strdup() on it.

Since: 2.6
</return>
</function>

<function name="gtk_text_view_get_buffer">
<description>
Return value: a #GtkTextBuffer

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> a #GtkTextBuffer
</return>
</function>

<function name="gtk_window_set_screen">
<description>
Sets the #GdkScreen where the @window is displayed; if
the window is already mapped, it will be unmapped, and
then remapped on the new screen.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_alignment">
<description>
Sets the alignment of the title or custom widget inside the column header.
The alignment determines its location inside the button -- 0.0 for left, 0.5
for center, 1.0 for right.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> The alignment, which is between [0.0 and 1.0] inclusive.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_unix_new">
<description>
Creates a new #GtkFileSystemUnix object. #GtkFileSystemUnix
implements the #GtkFileSystem interface with direct access to
the filesystem using Unix/Linux API calls


</description>
<parameters>
</parameters>
<return> the new #GtkFileSystemUnix object
</return>
</function>

<function name="gtk_radio_action_get_current_value">
<description>
Obtains the value property of the currently active member of 
the group to which @action belongs.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkRadioAction
</parameter_description>
</parameter>
</parameters>
<return> The value of the currently active group member

Since: 2.4
</return>
</function>

<function name="gtk_recent_info_last_application">
<description>
Gets the name of the last application that have registered the
recently used resource represented by @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> an application name.  Use g_free() to free it.

Since: 2.10
</return>
</function>

<function name="gtk_im_context_get_preedit_string">
<description>
Retrieve the current preedit string for the input context,
and a list of attributes to apply to the string.
This string should be displayed inserted at the insertion
point.

</description>
<parameters>
<parameter name="context">
<parameter_description>    a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>        location to store the retrieved string. The
string retrieved must be freed with g_free ().
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description>      location to store the retrieved attribute list.
When you are done with this list, you must
unreference it with pango_attr_list_unref().
</parameter_description>
</parameter>
<parameter name="cursor_pos">
<parameter_description> location to store position of cursor (in characters)
within the preedit string.  
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_validate_yrange">
<description>
Ensure that a region of a #GtkTextLayout is valid. The ::changed
signal will be emitted if any lines are validated.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> iter pointing into a line that will be used as the
coordinate origin
</parameter_description>
</parameter>
<parameter name="y0_">
<parameter_description> offset from the top of the line pointed to by @anchor at
which to begin validation. (The offset here is in pixels
after validation.)
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> offset from the top of the line pointed to by @anchor at
which to end validation. (The offset here is in pixels
after validation.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert_with_values">
<description>
Creates a new row at @position.  @iter will be changed to point to this new
row.  If @position is larger than the number of rows on the list, then the
new row will be appended to the list. The row will be filled with the 
values given to this function. 

Calling
&amp;lt;literal&amp;gt;gtk_list_store_insert_with_values(list_store, iter, position...)&amp;lt;/literal&amp;gt; 
has the same effect as calling 
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_list_store_insert (list_store, iter, position);
gtk_list_store_set (list_store, iter, ...);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;
with the difference that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and, if the list store
is sorted, rows_reordered. Since emitting the rows_reordered signal
repeatedly can affect the performance of the program, 
gtk_list_store_insert_with_values() should generally be preferred when
inserting rows in a sorted list store.

Since: 2.6

</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row, or %NULL.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkRecentChooser">
<description>
This signal is emitted when the user &quot;activates&quot; a recent item
in the recent chooser.  This can happen by double-clicking on an item
in the recently used resources list, or by pressing
&amp;lt;keycap&amp;gt;Enter&amp;lt;/keycap&amp;gt;.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_entry_get_text_column">
<description>
Return value: A column in the data source model of @entry_box.

</description>
<parameters>
<parameter name="entry_box">
<parameter_description> A #GtkComboBoxEntry.
</parameter_description>
</parameter>
</parameters>
<return> A column in the data source model of @entry_box.

Since: 2.4
</return>
</function>

<function name="gtk_menu_item_set_accel_path">
<description>
Set the accelerator path on @menu_item, through which runtime changes of the
menu item&apos;s accelerator caused by the user can be identified and saved to
persistant storage (see gtk_accel_map_save() on this).
To setup a default accelerator for this menu item, call
gtk_accel_map_add_entry() with the same @accel_path.
See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
and gtk_menu_set_accel_path() for a more convenient variant of this function.

This function is basically a convenience wrapper that handles calling
gtk_widget_set_accel_path() with the appropriate accelerator group for
the menu item.

Note that you do need to set an accelerator on the parent menu with
gtk_menu_set_accel_group() for this to work.

</description>
<parameters>
<parameter name="menu_item">
<parameter_description>  a valid #GtkMenuItem
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> accelerator path, corresponding to this menu item&apos;s
functionality, or %NULL to unset the current path.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_selection_set_select_multiple">
<description>
Sets whether the user is allowed to select multiple files in the file list.
Use gtk_file_selection_get_selections () to get the list of selected files.

</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
<parameter name="select_multiple">
<parameter_description> whether or not the user is allowed to select multiple
files in the file list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_size_group_get_widgets">
<description>
Return value: a #GSList of widgets. The list is owned by GTK+ 

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGrup
</parameter_description>
</parameter>
</parameters>
<return> a #GSList of widgets. The list is owned by GTK+ 
and should not be modified.

Since: 2.10
</return>
</function>

<function name="gtk_tree_path_free">
<description>
Frees @path.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_size_group_set_ignore_hidden">
<description>
Sets whether unmapped widgets should be ignored when
calculating the size.

Since: 2.8 

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
<parameter name="ignore_hidden">
<parameter_description> whether unmapped widgets should be ignored
when calculating the size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_get">
<description>
Return value: the appropriate clipboard object. If no

</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GdkAtom which identifies the clipboard
to use.
</parameter_description>
</parameter>
</parameters>
<return> the appropriate clipboard object. If no
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent and, since
it is owned by GTK+, must not be freed or
unrefd.
</return>
</function>

<function name="gtk_tree_view_column_get_width">
<description>
Return value: The current width of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The current width of @tree_column.
</return>
</function>

<function name="_gtk_file_chooser_get_paths">
<description>
Lists all the selected files and subfolders in the current folder of @chooser
as #GtkFilePath. An internal function, see gtk_file_chooser_get_uris().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> a #GSList containing a #GtkFilePath for each selected
file and subfolder in the current folder.  Free the returned list
with g_slist_free(), and the paths with gtk_file_path_free().

Since: 2.4
</return>
</function>

<function name="gtk_notebook_get_tab_label">
<description>
Return value: the tab label

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
</parameters>
<return> the tab label
</return>
</function>

<function name="_gtk_im_module_list">
<description>
List all available types of input method context

</description>
<parameters>
<parameter name="contexts">
<parameter_description> location to store an array of pointers to #GtkIMContextInfo
this array should be freed with g_free() when you are finished.
The structures it points are statically allocated and should
not be modified or freed.
</parameter_description>
</parameter>
<parameter name="n_contexts">
<parameter_description> the length of the array stored in @contexts
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_new_with_range">
<description>
This is a convenience constructor that allows creation of a numeric 
#GtkSpinButton without manually creating an adjustment. The value is 
initially set to the minimum value and a page increment of 10 * @step
is the default. The precision of the spin button is equivalent to the 
precision of @step. 

Note that the way in which the precision is derived works best if @step 
is a power of ten. If the resulting precision is not suitable for your 
needs, use gtk_spin_button_set_digits() to correct it.


</description>
<parameters>
<parameter name="min">
<parameter_description> Minimum allowable value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> Maximum allowable value
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> Increment added or subtracted by spinning the widget
</parameter_description>
</parameter>
</parameters>
<return> The new spin button as a #GtkWidget.
</return>
</function>

<function name="gtk_icon_source_get_state_wildcarded">
<description>
Gets the value set by gtk_icon_source_set_state_wildcarded().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this icon source is a base for any widget state variant
</return>
</function>

<function name="_gtk_recent_chooser_set_delegate">
<description>
Establishes that calls on @receiver for #GtkRecentChooser
methods should be delegated to @delegate, and that
#GtkRecentChooser signals emitted on @delegate should be
forwarded to @receiver. Must be used in conjunction with
_gtk_recent_chooser_delegate_iface_init().

</description>
<parameters>
<parameter name="receiver">
<parameter_description> a #GObject implementing #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="delegate">
<parameter_description> another #GObject implementing #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_builder_value_from_string">
<description>
This function demarshals a value from a string. This function
calls g_value_init() on the @value argument, so it need not be
initialised beforehand.

This function can handle char, uchar, boolean, int, uint, long,
ulong, enum, flags, float, double, string, #GdkColor and
#GtkAdjustment type values. Support for #GtkWidget type values is
still to come.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the property
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string representation of the value
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the #GValue to store the result in
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success

Since: 2.12
</return>
</function>

<function name="gtk_text_iter_forward_visible_cursor_position">
<description>
Moves @iter forward to the next visible cursor position. See 
gtk_text_iter_forward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_set_search_equal_func">
<description>
Sets the compare function for the interactive search capabilities; note
that somewhat like strcmp() returning 0 for equality
#GtkTreeViewSearchEqualFunc returns %FALSE on matches.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="search_equal_func">
<parameter_description> the compare function to use during the search
</parameter_description>
</parameter>
<parameter name="search_user_data">
<parameter_description> user data to pass to @search_equal_func, or %NULL
</parameter_description>
</parameter>
<parameter name="search_destroy">
<parameter_description> Destroy notifier for @search_user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_add_mnemonic_label">
<description>
Adds a widget to the list of mnemonic labels for
this widget. (See gtk_widget_list_mnemonic_labels()). Note the
list of mnemonic labels for the widget is cleared when the
widget is destroyed, so the caller must make sure to update
its internal state at this point as well, by using a connection
to the #GtkWidget::destroy signal or a weak notifier.

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a #GtkWidget that acts as a mnemonic label for @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_accel_new">
<description>
Creates a new #GtkCellRendererAccel.


</description>
<parameters>
</parameters>
<return> the new cell renderer

Since: 2.10
</return>
</function>

<function name="GtkToggleAction">
<description>
If the toggle action should be active in or not.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_rc_add_default_file">
<description>
Adds a file to the list of files to be parsed at the
end of gtk_init().

</description>
<parameters>
<parameter name="filename">
<parameter_description> the pathname to the file. If @filename is not absolute, it
is searched in the current directory.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_get_status_string">
<description>
Return value: a string representation of the status

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
</parameters>
<return> a string representation of the status
of the print operation

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_set_from_file">
<description>
Makes @status_icon display the file @filename.
See gtk_status_icon_new_from_file() for details.

Since: 2.10 

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> a filename
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_backspace">
<description>
Performs the appropriate action as if the user hit the delete
key with the cursor at the position specified by @iter. In the
normal case a single character will be deleted, but when
combining accents are involved, more than one character can
be deleted, and when precomposed character and accent combinations
are involved, less than one character will be deleted.

Because the buffer is modified, all outstanding iterators become 
invalid after calling this function; however, the @iter will be
re-initialized to point to the location where text was deleted. 


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="interactive">
<parameter_description> whether the deletion is caused by user interaction
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the buffer was modified

Since: 2.6
</return>
</function>

<function name="gtk_color_button_get_color">
<description>
Sets @color to be the current color in the #GtkColorButton widget.

Since: 2.4

</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to fill in with the current color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_add_action">
<description>
Adds an action object to the action group. Note that this function
does not set up the accel path of the action, which can lead to problems
if a user tries to modify the accelerator of a menuitem associated with
the action. Therefore you must either set the accel path yourself with
gtk_action_set_accel_path(), or use 
&amp;lt;literal&amp;gt;gtk_action_group_add_action_with_accel (..., NULL)&amp;lt;/literal&amp;gt;.

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> an action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_add">
<description>
Add a tag to the table. The tag is assigned the highest priority
in the table.

@tag must not be in a tag table already, and may not have
the same name as an already-added tag.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_set_left_margin">
<description>
Sets the left margin of the #GtkPageSetup.

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the new left margin in units of @unit
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the units for @margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_destroyed">
<description>
This function sets *@widget_pointer to %NULL if @widget_pointer !=
%NULL.  It&apos;s intended to be used as a callback connected to the
&quot;destroy&quot; signal of a widget. You connect gtk_widget_destroyed()
as a signal handler, and pass the address of your widget variable
as user data. Then when the widget is destroyed, the variable will
be set to %NULL. Useful for example to avoid multiple copies
of the same dialog.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="widget_pointer">
<parameter_description> address of a variable that contains @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_set_select_multiple">
<description>
Sets whether @chooser can select multiple items.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="select_multiple">
<parameter_description> %TRUE if @chooser can select more than one item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_select_path">
<description>
Selects the row at @path.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be selected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_set_from_stock">
<description>
Makes @status_icon display the stock icon with the id @stock_id.
See gtk_status_icon_new_from_stock() for details.

Since: 2.10 

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a stock icon id
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_iter_is_valid">
<description>
WARNING: This function is slow. Only use it for debugging and/or testing
purposes.

Checks if the given iter is a valid iter for this #GtkTreeStore.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iter is valid, %FALSE if the iter is invalid.

Since: 2.2
</return>
</function>

<function name="GtkToolButton">
<description>
This signal is emitted when the tool button is clicked with the mouse
or activated with the keyboard.

</description>
<parameters>
<parameter name="toolbutton">
<parameter_description> the object that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_new">
<description>
Creates a #GtkTextAttributes, which describes
a set of properties on some text.


</description>
<parameters>
</parameters>
<return> a new #GtkTextAttributes
</return>
</function>

<function name="gtk_clipboard_set_can_store">
<description>
Hints that the clipboard data should be stored somewhere when the
application exits or when gtk_clipboard_store () is called.

This value is reset when the clipboard owner changes.
Where the clipboard data is stored is platform dependent,
see gdk_display_store_clipboard () for more information.

Since: 2.6

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> array containing information about which forms should be stored
or %NULL to indicate that all forms should be stored.
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> number of elements in @targets
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_run_page_setup_dialog">
<description>
Runs a page setup dialog, letting the user modify the values from 
@page_setup. If the user cancels the dialog, the returned #GtkPageSetup 
is identical to the passed in @page_setup, otherwise it contains the 
modifications done in the dialog.

Note that this function may use a recursive mainloop to show the page
setup dialog. See gtk_print_run_page_setup_dialog_async() if this is 
a problem.


</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent, or %NULL
</parameter_description>
</parameter>
<parameter name="page_setup">
<parameter_description> an existing #GtkPageSetup, or %NULL
</parameter_description>
</parameter>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPageSetup

Since: 2.10
</return>
</function>

<function name="gtk_clipboard_request_targets">
<description>
Requests the contents of the clipboard as list of supported targets. 
When the list is later received, @callback will be called. 

The @targets parameter to @callback will contain the resulting targets if
the request succeeded, or %NULL if it failed.

Since: 2.4

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  a function to call when the targets are received,
or the retrieval fails. (It will always be called
one way or the other.)
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_iter_copy">
<description>
Creates a dynamically allocated tree iterator as a copy of @iter.  This
function is not intended for use in applications, because you can just copy
the structs by value (&amp;lt;literal&amp;gt;GtkTreeIter new_iter = iter;&amp;lt;/literal&amp;gt;).  You
must free this iter with gtk_tree_iter_free ().


</description>
<parameters>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated copy of @iter.
</return>
</function>

<function name="gtk_recent_chooser_get_filter">
<description>
Gets the #GtkRecentFilter object currently used by @chooser to affect
the display of the recently used resources.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> a #GtkRecentFilter object.

Since: 2.10
</return>
</function>

<function name="gtk_widget_get_tooltip_window">
<description>
Return value: The #GtkWindow of the current tooltip.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> The #GtkWindow of the current tooltip.

Since: 2.12
</return>
</function>

<function name="GtkColorButton">
<description>
The ::color-set signal is emitted when the user selects a color. 
When handling this signal, use gtk_color_button_get_color() and 
gtk_color_button_get_alpha() to find out which color was just selected.

Note that this signal is only emitted when the &amp;lt;emphasis&amp;gt;user&amp;lt;/emphasis&amp;gt;
changes the color. If you need to react to programmatic color changes
as well, use the notify::color signal.

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_targets_include_rich_text">
<description>
Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide rich text.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data holds a list of targets,
and a suitable target for rich text is included,
otherwise %FALSE.

Since: 2.10
</return>
</function>

<function name="gtk_tree_model_unref_node">
<description>
Lets the tree unref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.

For more information on what this means, see gtk_tree_model_ref_node().
Please note that nodes that are deleted are not unreffed.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_groups">
<description>
Return value: a newly allocated %NULL terminated array of strings.  Use

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the number of groups returned, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL terminated array of strings.  Use
g_strfreev() to free it.

Since: 2.10
</return>
</function>

<function name="gtk_toolbar_get_n_items">
<description>
Return value: the number of items on the toolbar

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the number of items on the toolbar

Since: 2.4
</return>
</function>

<function name="_gtk_text_util_get_block_cursor_location">
<description>

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> index at which cursor is located
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> cursor location
</parameter_description>
</parameter>
<parameter name="at_line_end">
<parameter_description> whether cursor i sdrawn at line end, not over some
character
</parameter_description>
</parameter>
</parameters>
<return> whether cursor should actually be drawn as a rectangle.
It may not be the case if character at index is invisible.
</return>
</function>

<function name="gtk_text_iter_is_cursor_position">
<description>
See gtk_text_iter_forward_cursor_position() or #PangoLogAttr or
pango_break() for details on what a cursor position is.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cursor can be placed at @iter
</return>
</function>

<function name="gtk_text_iter_get_attributes">
<description>
Computes the effect of any tags applied to this spot in the
text. The @values parameter should be initialized to the default
settings you wish to use if no tags are in effect. You&apos;d typically
obtain the defaults from gtk_text_view_get_default_attributes().

gtk_text_iter_get_attributes () will modify @values, applying the
effects of any tags present at @iter. If any tags affected @values,
the function returns %TRUE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a #GtkTextAttributes to be filled in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @values was modified
</return>
</function>

<function name="gtk_tree_model_filter_set_visible_func">
<description>
Sets the visible function used when filtering the @filter to be @func. The
function should return %TRUE if the given row should be visible and
%FALSE otherwise.

If the condition calculated by the function changes over time (e.g. because
it depends on some global parameters), you must call 
gtk_tree_model_filter_refilter() to keep the visibility information of 
the model uptodate.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #GtkTreeModelFilterVisibleFunc, the visible function.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to pass to the visible function, or %NULL.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier of @data, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_line_index">
<description>
Obtains an iterator pointing to @byte_index within the given line.
@byte_index must be the start of a UTF-8 character, and must not be
beyond the end of the line.  Note &amp;lt;emphasis&amp;gt;bytes&amp;lt;/emphasis&amp;gt;, not
characters; UTF-8 may encode one character as multiple bytes.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize 
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number counting from 0
</parameter_description>
</parameter>
<parameter name="byte_index">
<parameter_description> byte index from start of line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_filter_refilter">
<description>
Emits ::row_changed for each row in the child model, which causes
the filter to re-evaluate whether a row is visible or not.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkEntry">
<description>
Sets the text area&apos;s border between the text and the frame.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_role">
<description>
This function is only useful on X11, not with other GTK+ targets.

In combination with the window title, the window role allows a
&amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; to identify &quot;the
same&quot; window when an application is restarted. So for example you
might set the &quot;toolbox&quot; role on your app&apos;s toolbox window, so that
when the user restarts their session, the window manager can put
the toolbox back in the same place.

If a window already has a unique title, you don&apos;t need to set the
role, since the WM can use the title to identify the window when
restoring the session.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> unique identifier for the window to be used when restoring a session
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_size_register">
<description>
Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,
etc. Returns the integer value for the size.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the icon size
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the icon width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the icon height
</parameter_description>
</parameter>
</parameters>
<return> integer value representing the size

</return>
</function>

<function name="gtk_tool_item_new">
<description>
Creates a new #GtkToolItem


</description>
<parameters>
</parameters>
<return> the new #GtkToolItem

Since: 2.4
</return>
</function>

<function name="gtk_button_get_alignment">
<description>
Gets the alignment of the child in the button.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> return location for horizontal alignment
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> return location for vertical alignment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_search_column">
<description>
Sets @column as the column where the interactive search code should
search in. 

If the sort column is set, users can use the &quot;start-interactive-search&quot;
key binding to bring up search popup. The enable-search property controls
whether simply typing text will also start an interactive search.

Note that @column refers to a column of the model. 

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column of the model to search in, or -1 to disable searching
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_old_editable_changed">
<description>
Emits the ::changed signal on @old_editable.

</description>
<parameters>
<parameter name="old_editable">
<parameter_description> a #GtkOldEditable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_store">
<description>
Stores the current clipboard data somewhere so that it will stay
around after the application has quit.

Since: 2.6

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_volume_get_icon_name">
<description>
Gets an icon name suitable for a #GtkFileSystemVolume.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> An icon name which can be used for rendering an icon for
this volume, or %NULL if no icon name could be found.  In the latter
case, the @error value will be set as appropriate.
</return>
</function>

<function name="gtk_text_buffer_get_insert">
<description>
Return value: insertion point mark

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> insertion point mark
</return>
</function>

<function name="gtk_file_system_volume_free">
<description>
Frees a #GtkFileSystemVolume structure as returned by
gtk_file_system_list_volumes().

</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_binding_entry_skip">
<description>
Since: 2.12

Install a binding on @binding_set which causes key lookups
to be aborted, to prevent bindings from lower priority sets
to be activated.

</description>
<parameters>
<parameter name="binding_set">
<parameter_description> @binding_set to skip an entry of
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>      key value of binding to skip
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>   key modifier of binding to skip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_destroy">
<description>
Destroys a widget. Equivalent to gtk_object_destroy(), except that
you don&apos;t have to cast the widget to #GtkObject. When a widget is
destroyed, it will break any references it holds to other objects.
If the widget is inside a container, the widget will be removed
from the container. If the widget is a toplevel (derived from
#GtkWindow), it will be removed from the list of toplevels, and the
reference GTK+ holds to it will be removed. Removing a
widget from its container or the list of toplevels results in the
widget being finalized, unless you&apos;ve added additional references
to the widget with g_object_ref().

In most cases, only toplevel widgets (windows) require explicit
destruction, because when you destroy a toplevel its children will
be destroyed as well.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_is_ancestor">
<description>
Return value: %TRUE if @descendant is contained inside @path

</description>
<parameters>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> another #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @descendant is contained inside @path
</return>
</function>

<function name="gtk_tree_drag_source_drag_data_get">
<description>
Asks the #GtkTreeDragSource to fill in @selection_data with a
representation of the row at @path. @selection_data-&amp;gt;target gives
the required type of the data.  Should robustly handle a @path no
longer found in the model!


</description>
<parameters>
<parameter name="drag_source">
<parameter_description> a #GtkTreeDragSource
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row that was dragged
</parameter_description>
</parameter>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData to fill with data from the dragged row
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if data of the required type was provided 
</return>
</function>

<function name="gtk_text_iter_forward_to_tag_toggle">
<description>
Moves forward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
@tag is %NULL. If no matching tag toggles are found,
Return value: whether we found a tag toggle after @iter

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether we found a tag toggle after @iter
</return>
</function>

<function name="gtk_file_system_path_is_local">
<description>
Checks whether a #GtkFilePath is local; that is whether
gtk_file_system_path_to_filename would return non-%NULL.


</description>
<parameters>
<parameter name="filesystem">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkFilePath from that filesystem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the path is loca
</return>
</function>

<function name="gtk_widget_get_child_requisition">
<description>
This function is only for use in widget implementations. Obtains
@widget-&amp;gt;requisition, unless someone has forced a particular
geometry on the widget (e.g. with gtk_widget_set_usize()), in which
case it returns that geometry instead of the widget&apos;s requisition.

This function differs from gtk_widget_size_request() in that
it retrieves the last size request value from @widget-&amp;gt;requisition,
while gtk_widget_size_request() actually calls the &quot;size_request&quot; method
on @widget to compute the size request and fill in @widget-&amp;gt;requisition,
and only then returns @widget-&amp;gt;requisition.

Because this function does not call the &quot;size_request&quot; method, it
can only be used when you know that @widget-&amp;gt;requisition is
up-to-date, that is, gtk_widget_size_request() has been called
since the last time a resize was queued. In general, only container
implementations have this information; applications should use
gtk_widget_size_request().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> a #GtkRequisition to be filled in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_find_module_in_path">
<description>
Searches for a theme engine in the GTK+ search path. This function
is not useful for applications and should not be used.


</description>
<parameters>
<parameter name="module_file">
<parameter_description> name of a theme engine
</parameter_description>
</parameter>
</parameters>
<return> The filename, if found (must be freed with g_free()),
otherwise %NULL.
</return>
</function>

<function name="_gtk_plug_add_to_socket">
<description>
Adds a plug to a socket within the same application.

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug
</parameter_description>
</parameter>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_hline">
<description>
Draws a horizontal line from (@x1, @y) to (@x2, @y) in @window
using the given style and state.

Deprecated: Use gtk_paint_hline() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="x1">
<parameter_description> the starting x coordinate
</parameter_description>
</parameter>
<parameter name="x2">
<parameter_description> the ending x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_dialog_new_for_manager">
<description>
Creates a new #GtkRecentChooserDialog with a specified recent manager.

This is useful if you have implemented your own recent manager, or if you
have a customized instance of a #GtkRecentManager object.


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL,
</parameter_description>
</parameter>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> stock ID or text to go in the first button, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for the first button, then additional (button, id)
pairs, ending with %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRecentChooserDialog

Since: 2.10
</return>
</function>

<function name="gtk_image_get_image">
<description>
Gets the #GdkImage and mask being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_IMAGE (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned image and mask.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="gdk_image">
<parameter_description> return location for a #GtkImage
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for a #GdkBitmap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_util_append_special_char_menuitems">
<description>
Add menuitems for various bidi control characters  to a menu;
the menuitems, when selected, will call the given function
with the chosen character.

This function is private/internal in GTK 2.0, the functionality may
become public sometime, but it probably needs more thought first.
e.g. maybe there should be a way to just get the list of items,
instead of requiring the menu items to be created.

</description>
<parameters>
<parameter name="menushell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  call this when an item is chosen
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_group_add_window">
<description>
Adds a window to a #GtkWindowGroup. 

</description>
<parameters>
<parameter name="window_group">
<parameter_description> a #GtkWindowGroup
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the #GtkWindow to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_set_visible">
<description>
Shows or hides a status icon.

Since: 2.10

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> %TRUE to show the status icon, %FALSE to hide it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_button_get_label_widget">
<description>
Return value: The widget used as label on @button, or %NULL.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
</parameters>
<return> The widget used as label on @button, or %NULL.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_get_pixbuf">
<description>
If the element at @iter is a pixbuf, the pixbuf is returned
(with no new reference count added). Otherwise,
%NULL is returned.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf at @iter
</return>
</function>

<function name="gtk_spin_button_set_adjustment">
<description>
Replaces the #GtkAdjustment associated with @spin_button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment to replace the existing adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_ensure_style">
<description>
Ensures that @widget has a style (@widget-&amp;gt;style). Not a very useful
function; most of the time, if you want the style, the widget is
realized, and realized widgets are guaranteed to have a style
already.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_info_set_raw_coordinates">
<description>
Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()
and gtk_icon_info_get_attach_points() should be returned in their
original form as specified in the icon theme, instead of scaled
appropriately for the pixbuf returned by gtk_icon_info_load_icon().

Raw coordinates are somewhat strange; they are specified to be with
respect to the unscaled pixmap for PNG and XPM icons, but for SVG
icons, they are in a 1000x1000 coordinate space that is scaled
to the final size of the icon.  You can determine if the icon is an SVG
icon by using gtk_icon_info_get_filename(), and seeing if it is non-%NULL
and ends in &apos;.svg&apos;.

This function is provided primarily to allow compatibility wrappers
for older API&apos;s, and is not expected to be useful for applications.

Since: 2.4

</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
<parameter name="raw_coordinates">
<parameter_description> whether the coordinates of embedded rectangles
and attached points should be returned in their original
(unscaled) form.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_sizing">
<description>
Return value: The type of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The type of @tree_column.
</return>
</function>

<function name="gtk_list_store_new">
<description>
Creates a new list store as with @n_columns columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types 
are supported. 

As an example, &amp;lt;literal&amp;gt;gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);&amp;lt;/literal&amp;gt; will create a new #GtkListStore with three columns, of type
int, string and #GdkPixbuf respectively.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the list store
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> all #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkListStore
</return>
</function>

<function name="gtk_text_iter_starts_line">
<description>
Return value: whether @iter begins a line

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter begins a line
</return>
</function>

<function name="gtk_action_create_menu">
<description>
If @action provides a #GtkMenu widget as a submenu for the menu
item or the toolbar item it creates, this function returns an
instance of that menu.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkAction
</parameter_description>
</parameter>
</parameters>
<return> the menu item provided by the action, or %NULL.

Since: 2.12
</return>
</function>

<function name="_gtk_path_bar_down">
<description>
If the selected button in the pathbar is not the furthest button &quot;down&quot; (in the
leaf direction), act as if the user clicked on the next button down.

</description>
<parameters>
<parameter name="path_bar">
<parameter_description> a #GtkPathBar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_property_parse_requisition">
<description>
A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
requisition in the form 
&amp;lt;literal&amp;gt;&quot;{ width, height }&quot;&amp;lt;/literal&amp;gt; for integers %width and %height.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
<parameter name="gstring">
<parameter_description> the #GString to be parsed
</parameter_description>
</parameter>
<parameter name="property_value">
<parameter_description> a #GValue which must hold boxed values.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GtkRequisition.
</return>
</function>

<function name="gtk_recent_info_get_age">
<description>
Gets the number of days elapsed since the last update of the resource
pointed by @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> a positive integer containing the number of days elapsed
since the time this resource was last modified.  

Since: 2.10
</return>
</function>

<function name="GtkToolItem">
<description>
This signal is emitted when the toolitem&apos;s tooltip changes.
Application developers can use gtk_tool_item_set_tooltip() to
set the item&apos;s tooltip.


</description>
<parameters>
<parameter name="tool_item">
<parameter_description> the object the signal was emitted on
</parameter_description>
</parameter>
<parameter name="tooltips">
<parameter_description> the #GtkTooltips
</parameter_description>
</parameter>
<parameter name="tip_text">
<parameter_description> the tooltip text
</parameter_description>
</parameter>
<parameter name="tip_private">
<parameter_description> the tooltip private text
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the signal was handled, %FALSE if not

Deprecated: 2.12: With the new tooltip API, there is no
need to use this signal anymore.
</return>
</function>

<function name="gtk_accel_group_from_accel_closure">
<description>
Finds the #GtkAccelGroup to which @closure is connected; 
see gtk_accel_group_connect().

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
</parameters>
<return> the #GtkAccelGroup to which @closure is connected, or %NULL.
</return>
</function>

<function name="gtk_recent_chooser_set_filter">
<description>
Sets @filter as the current #GtkRecentFilter object used by @chooser
to affect the displayed recently used resources.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_set_name">
<description>
Sets the name of the @buildable object.

Since: 2.12

</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_style_copy">
<description>
Makes a copy of the specified #GtkRcStyle. This function
will correctly copy an RC style that is a member of a class
derived from #GtkRcStyle.


</description>
<parameters>
<parameter name="orig">
<parameter_description> the style to copy
</parameter_description>
</parameter>
</parameters>
<return> the resulting #GtkRcStyle
</return>
</function>

<function name="gtk_toolbar_insert_widget">
<description>
Inserts a widget in the toolbar at the given position.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget to add to the toolbar. 
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the number of widgets to insert this widget after.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_iter_parent">
<description>
Sets @iter to be the parent of @child.  If @child is at the toplevel, and
doesn&apos;t have a parent, then @iter is set to an invalid iterator and %FALSE
is returned.  @child will remain a valid node after this function has been
called.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The new #GtkTreeIter to set to the parent.
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter is set to the parent of @child.
</return>
</function>

<function name="gtk_tool_item_get_toolbar_style">
<description>
Return value: A #GtkToolbarStyle indicating the toolbar style used

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return> A #GtkToolbarStyle indicating the toolbar style used
for @tool_item.

Since: 2.4
</return>
</function>

<function name="gtk_widget_get_toplevel">
<description>
This function returns the topmost widget in the container hierarchy
@widget is a part of. If @widget has no parent widgets, it will be
returned as the topmost widget. No reference will be added to the
returned widget; it should not be unreferenced.

Note the difference in behavior vs. gtk_widget_get_ancestor();
&amp;lt;literal&amp;gt;gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)&amp;lt;/literal&amp;gt; 
would return
%NULL if @widget wasn&apos;t inside a toplevel window, and if the
window was inside a #GtkWindow-derived widget which was in turn
inside the toplevel #GtkWindow. While the second case may
seem unlikely, it actually happens when a #GtkPlug is embedded
inside a #GtkSocket within the same application.

To reliably find the toplevel #GtkWindow, use
gtk_widget_get_toplevel() and check if the %TOPLEVEL flags
is set on the result.
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
if (GTK_WIDGET_TOPLEVEL (toplevel))
{
[ Perform action on toplevel. ]
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the topmost ancestor of @widget, or @widget itself 
if there&apos;s no ancestor.
</return>
</function>

<function name="gtk_widget_get_clipboard">
<description>
Return value: the appropriate clipboard object. If no

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> a #GdkAtom which identifies the clipboard
to use. %GDK_SELECTION_CLIPBOARD gives the
default clipboard. Another common value
is %GDK_SELECTION_PRIMARY, which gives
the primary X selection. 
</parameter_description>
</parameter>
</parameters>
<return> the appropriate clipboard object. If no
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent for all time.

Since: 2.2
</return>
</function>

<function name="gtk_printer_get_backend">
<description>
Return value: the backend of @printer

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the backend of @printer

Since: 2.10
</return>
</function>

<function name="gtk_window_get_accept_focus">
<description>
Gets the value set by gtk_window_set_accept_focus().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window should receive the input focus

Since: 2.4
</return>
</function>

<function name="GtkFileChooserButtons">
<description>
The ::file-set signal is emitted when the user selects a file.

Note that this signal is only emitted when the &amp;lt;emphasis&amp;gt;user&amp;lt;/emphasis&amp;gt;
changes the file. 

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkMenuShell">
<description>
A boolean that determines whether the menu and its submenus grab the
keyboard focus. See gtk_menu_shell_set_take_focus() and
gtk_menu_shell_get_take_focus().

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_width_chars">
<description>
Gets the value set by gtk_entry_set_width_chars().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> number of chars to request space for, or negative if unset
</return>
</function>

<function name="gtk_print_settings_new_from_key_file">
<description>
Reads the print settings from the group @group_name in @key_file. 
Return value: the restored #GtkPrintSettings

</description>
<parameters>
<parameter name="key_file">
<parameter_description> the #GKeyFile to retrieve the settings from
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> the name of the group to use
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the restored #GtkPrintSettings

Since: 2.12
</return>
</function>

<function name="gtk_image_set_from_stock">
<description>
See gtk_image_new_from_stock() for details.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a stock icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_mnemonic_widget">
<description>
Retrieves the target of the mnemonic (keyboard shortcut) of this
label. See gtk_label_set_mnemonic_widget().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the target of the label&apos;s mnemonic, or %NULL if none
has been set and the default algorithm will be used.
</return>
</function>

<function name="gtk_get_current_event_time">
<description>
If there is a current event and it has a timestamp, return that
timestamp, otherwise return %GDK_CURRENT_TIME.


</description>
<parameters>
</parameters>
<return> the timestamp from the current event, or %GDK_CURRENT_TIME.
</return>
</function>

<function name="gtk_separator_tool_item_get_draw">
<description>
Return value: #TRUE if @separator_tool_item is drawn as a line, or just blank.

</description>
<parameters>
<parameter name="item">
<parameter_description> a #GtkSeparatorToolItem 
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @separator_tool_item is drawn as a line, or just blank.

Since: 2.4
</return>
</function>

<function name="gtk_entry_completion_get_inline_completion">
<description>
Return value: %TRUE if inline completion is turned on

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if inline completion is turned on

Since: 2.6
</return>
</function>

<function name="gtk_entry_get_visibility">
<description>
Retrieves whether the text in @entry is visible. See
gtk_entry_set_visibility().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the text is currently visible
</return>
</function>

<function name="gtk_text_child_anchor_new">
<description>
Creates a new #GtkTextChildAnchor. Usually you would then insert
it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
To perform the creation and insertion in one step, use the
convenience function gtk_text_buffer_create_child_anchor().


</description>
<parameters>
</parameters>
<return> a new #GtkTextChildAnchor
</return>
</function>

<function name="gtk_text_iter_free">
<description>
Free an iterator allocated on the heap. This function
is intended for use in language bindings, and is not
especially useful for applications, because iterators can
simply be allocated on the stack.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a dynamically-allocated iterator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_get_page_setup">
<description>
Gets the page setup that is used by the #GtkPrintUnixDialog.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
</parameters>
<return> the page setup of @dialog.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_get_rules_hint">
<description>
Gets the setting set by gtk_tree_view_set_rules_hint().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if rules are useful for the user of this tree
</return>
</function>

<function name="gtk_paper_size_copy">
<description>
Copies an existing #GtkPaperSize.


</description>
<parameters>
<parameter name="other">
<parameter_description> a #GtkPaperSize
</parameter_description>
</parameter>
</parameters>
<return> a copy of @other

Since: 2.10
</return>
</function>

<function name="gtk_text_buffer_insert_with_tags">
<description>
Inserts @text into @buffer at @iter, applying the list of tags to
the newly-inserted text. The last tag specified must be NULL to
terminate the list. Equivalent to calling gtk_text_buffer_insert(),
then gtk_text_buffer_apply_tag() on the inserted text;
gtk_text_buffer_insert_with_tags() is just a convenience function.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> an iterator in @buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 text
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text, or -1
</parameter_description>
</parameter>
<parameter name="first_tag">
<parameter_description> first tag to apply to @text
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> NULL-terminated list of tags to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_prepend">
<description>
Prepends a new row to @tree_store.  If @parent is non-%NULL, then it will prepend
the new row before the first child of @parent, otherwise it will prepend a row
to the top level.  @iter will be changed to point to this new row.  The row
will be empty after this function is called.  To fill in values, you need to
call gtk_tree_store_set() or gtk_tree_store_set_value().

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the prepended row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_increments">
<description>
Gets the current step and page the increments used by @spin_button. See
gtk_spin_button_set_increments().

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> location to store step increment, or %NULL
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> location to store page increment, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_set_title">
<description>
Sets the menu&apos;s title in tearoff mode.

Since: 2.10

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox 
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a title for the menu in tearoff mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_ends_sentence">
<description>
Determines whether @iter ends a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the end of a sentence.
</return>
</function>

<function name="gtk_toolbar_set_icon_size">
<description>
This function sets the size of stock icons in the toolbar. You
can call it both before you add the icons and after they&apos;ve been
added. The size you set will override user preferences for the default
icon size.

This should only be used for special-purpose toolbars, normal
application toolbars should respect the user preferences for the
size of icons.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> A #GtkToolbar
</parameter_description>
</parameter>
<parameter name="icon_size">
<parameter_description> The #GtkIconSize that stock icons in the toolbar shall have.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_add_application">
<description>
Adds a rule that allows resources based on the name of the application
that has registered them.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="application">
<parameter_description> an application name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_widget_new_with_backend">
<description>
Creates a new #GtkFileChooserWidget with a specified backend.  This is
especially useful if you use gtk_file_chooser_set_local_only() to allow
non-local files.  This is a file chooser widget that can be embedded in
custom windows and it is the same widget that is used by
#GtkFileChooserDialog.


</description>
<parameters>
<parameter name="action">
<parameter_description> Open or save mode for the widget
</parameter_description>
</parameter>
<parameter name="backend">
<parameter_description> The name of the specific filesystem backend to use.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkFileChooserWidget

Since: 2.4
</return>
</function>

<function name="gtk_label_set_ellipsize">
<description>
Sets the mode used to ellipsize (add an ellipsis: &quot;...&quot;) to the text 
if there is not enough space to render the entire string.

Since: 2.6

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #PangoEllipsizeMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_scale">
<description>
Gets the value of %GTK_PRINT_SETTINGS_SCALE.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the scale in percent

Since: 2.10
</return>
</function>

<function name="gtk_tool_button_new">
<description>
Creates a new %GtkToolButton using @icon_widget as icon and @label as
label.


</description>
<parameters>
<parameter name="label">
<parameter_description> a string that will be used as label, or %NULL
</parameter_description>
</parameter>
<parameter name="icon_widget">
<parameter_description> a widget that will be used as icon widget, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkToolButton

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_get_duplex">
<description>
Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> whether to print the output in duplex.

Since: 2.10
</return>
</function>

<function name="gtk_print_settings_get_int">
<description>
Return value: the integer value of @key 

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> the integer value of @key 

Since: 2.10
</return>
</function>

<function name="gtk_window_set_decorated">
<description>
By default, windows are decorated with a title bar, resize
controls, etc.  Some &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
managers&amp;lt;/link&amp;gt; allow GTK+ to disable these decorations, creating a
borderless window. If you set the decorated property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to decorate the window. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_window_show().

On Windows, this function always works, since there&apos;s no window manager
policy involved.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to decorate the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_double_with_default">
<description>
Return value: the floating point number associated with @key

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="def">
<parameter_description> the default value
</parameter_description>
</parameter>
</parameters>
<return> the floating point number associated with @key

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_new_from_icon_name">
<description>
Creates a status icon displaying an icon from the current icon theme.
If the current icon theme is changed, the icon will be updated 
appropriately.


</description>
<parameters>
<parameter name="icon_name">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkStatusIcon

Since: 2.10
</return>
</function>

<function name="gtk_widget_queue_clear_area">
<description>
This function is no longer different from
gtk_widget_queue_draw_area(), though it once was. Now it just calls
gtk_widget_queue_draw_area(). Originally
gtk_widget_queue_clear_area() would force a redraw of the
background for %GTK_NO_WINDOW widgets, and
gtk_widget_queue_draw_area() would not. Now both functions ensure
the background will be redrawn.

Deprecated: Use gtk_widget_queue_draw_area() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_groups_from_object">
<description>
Gets a list of all accel groups which are attached to @object.

</description>
<parameters>
<parameter name="object">
<parameter_description>        a #GObject, usually a #GtkWindow 
</parameter_description>
</parameter>
</parameters>
<return> a list of all accel groups which are attached to @object
</return>
</function>

<function name="gtk_check_menu_item_get_draw_as_radio">
<description>
Return value: Whether @check_menu_item looks like a #GtkRadioMenuItem

</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
</parameters>
<return> Whether @check_menu_item looks like a #GtkRadioMenuItem

Since: 2.4
</return>
</function>

<function name="gtk_window_activate_key">
<description>
Activates mnemonics and accelerators for this #GtkWindow. This is normally
called by the default ::key_press_event handler for toplevel windows,
however in some cases it may be useful to call this directly when
overriding the standard key handling for a toplevel window.


</description>
<parameters>
<parameter name="window">
<parameter_description>  a #GtkWindow
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description>   a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a mnemonic or accelerator was found and activated.
</return>
</function>

<function name="gtk_clipboard_get_for_display">
<description>
Return value: the appropriate clipboard object. If no

</description>
<parameters>
<parameter name="display">
<parameter_description> the display for which the clipboard is to be retrieved or created
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> a #GdkAtom which identifies the clipboard
to use.
</parameter_description>
</parameter>
</parameters>
<return> the appropriate clipboard object. If no
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent and, since
it is owned by GTK+, must not be freed or
unrefd.

Since: 2.2
</return>
</function>

<function name="gtk_tree_model_sort_set_model">
<description>
Sets the model of @tree_model_sort to be @model.  If @model is %NULL, 
then the old model is unset.  The sort function is unset as a result 
of this call. The model will be in an unsorted state until a sort 
function is set.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> The #GtkTreeModelSort.
</parameter_description>
</parameter>
<parameter name="child_model">
<parameter_description> A #GtkTreeModel, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_action_sync_menu_visible">
<description>
Updates the visibility of @proxy from the visibility of @action
according to the following rules:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @action is invisible, @proxy is too
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;if @empty is %TRUE, hide @proxy unless the &quot;hide-if-empty&quot; 
property of @action indicates otherwise
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

This function is used in the implementation of #GtkUIManager.

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkAction, or %NULL to determine the action from @proxy
</parameter_description>
</parameter>
<parameter name="proxy">
<parameter_description> a proxy menu item
</parameter_description>
</parameter>
<parameter name="empty">
<parameter_description> whether the submenu attached to @proxy is empty
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_has_toplevel_focus">
<description>
Return value: %TRUE if the input focus is within this GtkWindow

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the input focus is within this GtkWindow

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_set_tooltip_cell">
<description>
Sets the tip area of @tooltip to the area which @cell occupies in
the item pointed to by @path. See also gtk_tooltip_set_tip_area().

Since: 2.12

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_size">
<description>
Obtains the icon size this source applies to. The return value
is only useful/meaningful if the icon size is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; wildcarded.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> icon size this source matches.
</return>
</function>

<function name="gtk_window_add_mnemonic">
<description>
Adds a mnemonic to this window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the mnemonic
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the widget that gets activated by the mnemonic
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_tooltip_markup">
<description>
Sets the markup text to be displayed as tooltip on the item.
See gtk_widget_set_tooltip_markup().

Since: 2.12

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> markup text to be used as tooltip for @tool_item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_add_builtin_icon">
<description>
Registers a built-in icon for icon theme lookups. The idea
of built-in icons is to allow an application or library
that uses themed icons to function requiring files to
be present in the file system. For instance, the default
images for all of GTK+&apos;s stock icons are registered
as built-icons.

In general, if you use gtk_icon_theme_add_builtin_icon()
you should also install the icon in the icon theme, so
that the icon is generally available.

This function will generally be used with pixbufs loaded
via gdk_pixbuf_new_from_inline().

Since: 2.4

</description>
<parameters>
<parameter name="icon_name">
<parameter_description> the name of the icon to register
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size at which to register the icon (different
images can be registered for the same icon name
at different sizes.)
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> #GdkPixbuf that contains the image to use
for @icon_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_reshow_with_initial_size">
<description>
Hides @window, then reshows it, resetting the
default size and position of the window. Used
by GUI builders only.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_text">
<description>
Sets the text color for a widget in a particular state.  All other
style values are left untouched. The text color is the foreground
color used along with the base color (see gtk_widget_modify_base())
for widgets such as #GtkEntry and #GtkTextView. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the text color
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_text().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_unset_focus_chain">
<description>
Removes a focus chain explicitly set with gtk_container_set_focus_chain().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_reset_shapes">
<description>
Recursively resets the shape on this widget and its descendants.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_style">
<description>
Simply an accessor function that returns @widget-&amp;gt;style.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the widget&apos;s #GtkStyle
</return>
</function>

<function name="gtk_icon_size_lookup">
<description>
Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for the default #GtkSettings.
(See gtk_icon_size_lookup_for_settings().)
Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn&apos;t normally needed, gtk_widget_render_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.


</description>
<parameters>
<parameter name="size">
<parameter_description> an icon size
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store icon width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store icon height
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @size was a valid size
</return>
</function>

<function name="gtk_recent_info_get_applications">
<description>
Retrieves the list of applications that have registered this resource.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the returned list, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated array of strings.
Use g_strfreev() to free it.

Since: 2.10
</return>
</function>

<function name="gtk_box_pack_end">
<description>
Adds @child to @box, packed with reference to the end of @box.  
The @child is packed after (away from end of) any other child 
packed with reference to the end of @box.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to be added to @box
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if the new child is to be given extra space allocated 
to @box. The extra space will be divided evenly between all children 
of @box that use this option
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if space given to @child by the @expand option is
actually allocated to @child, rather than just padding it.  This
parameter has no effect if @expand is set to %FALSE.  A child is
always allocated the full height of a #GtkHBox and the full width 
of a #GtkVBox.  This option affects the other dimension
</parameter_description>
</parameter>
<parameter name="padding">
<parameter_description> extra space in pixels to put between this child and its
neighbors, over and above the global amount specified by
#GtkBox:spacing property.  If @child is a widget at one of the 
reference ends of @box, then @padding pixels are also put between 
@child and the reference edge of @box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_attributes">
<description>
Sets a #PangoAttrList; the attributes in the list are applied to the
label text. The attributes set with this function will be ignored
if the #GtkLabel:use-underline&quot; or #GtkLabel:use-markup properties
are set to %TRUE.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description> a #PangoAttrList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_string">
<description>
Draws a text string on @window with the given parameters.

Deprecated: Use gtk_paint_layout() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_left_margin">
<description>
Sets the default left margin for text in @text_view.
Tags in the buffer may override the default.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="left_margin">
<parameter_description> left margin in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_set_text">
<description>
Sets the contents of the selection from a UTF-8 encoded string.
The string is converted to the form determined by
@selection_data-&amp;gt;target.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @str, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection was successfully set,
otherwise %FALSE.
</return>
</function>

<function name="GtkProgressBar">
<description>
The preferred place to ellipsize the string, if the progressbar does 
not have enough room to display the entire string, specified as a 
#PangoEllisizeMode. 

Note that setting this property to a value other than 
%PANGO_ELLIPSIZE_NONE has the side-effect that the progressbar requests 
only enough space to display the ellipsis &quot;...&quot;. Another means to set a 
progressbar&apos;s width is gtk_widget_set_size_request().

Since: 2.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_custom_finished">
<description>
This is similar to gtk_buildable_parser_finished() but is
called once for each custom tag handled by the @buildable.

Since: 2.12

</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> child object or %NULL for non-child tags
</parameter_description>
</parameter>
<parameter name="tagname">
<parameter_description> the name of the tag
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data created in custom_tag_start
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_remove_column">
<description>
Removes @column from @tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to remove.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after removing.
</return>
</function>

<function name="gtk_print_settings_set">
<description>
Associates @value with @key.

Since: 2.10 

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accelerator_get_label">
<description>
Converts an accelerator keyval and modifier mask into a string 
which can be used to represent the accelerator to the user. 


</description>
<parameters>
<parameter name="accelerator_key">
<parameter_description>  accelerator keyval
</parameter_description>
</parameter>
<parameter name="accelerator_mods">
<parameter_description> accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string representing the accelerator.

Since: 2.6
</return>
</function>

<function name="gtk_tree_selection_path_is_selected">
<description>
Return value: %TRUE if @path is selected.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath to check selection on.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path is selected.
</return>
</function>

<function name="gtk_dialog_get_response_for_widget">
<description>
Gets the response id of a widget in the action area
of a dialog.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget in the action area of @dialog
</parameter_description>
</parameter>
</parameters>
<return> the response id of @widget, or %GTK_RESPONSE_NONE
if @widget doesn&apos;t have a response id set.

Since: 2.8
</return>
</function>

<function name="gtk_range_get_inverted">
<description>
Gets the value set by gtk_range_set_inverted().


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the range is inverted
</return>
</function>

<function name="gtk_file_chooser_select_uri">
<description>
Selects the file to by @uri. If the URI doesn&apos;t refer to a
file in the current folder of @chooser, then the current folder of
@chooser will be changed to the folder containing @filename.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI to select
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if both the folder could be changed and the URI was
selected successfully, %FALSE otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_tool_button_get_use_underline">
<description>
Return value: %TRUE if underscores in the label property are used as

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if underscores in the label property are used as
mnemonics on menu items on the overflow menu.

Since: 2.4
</return>
</function>

<function name="gtk_page_setup_unix_dialog_new">
<description>
Creates a new page setup dialog.


</description>
<parameters>
<parameter name="title">
<parameter_description> the title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkPageSetupUnixDialog

Since: 2.10
</return>
</function>

<function name="gtk_label_set_angle">
<description>
Sets the angle of rotation for the label. An angle of 90 reads from
from bottom to top, an angle of 270, from top to bottom. The angle
setting for the label is ignored if the label is selectable,
wrapped, or ellipsized.

Since: 2.6

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> the angle that the baseline of the label makes with
the horizontal, in degrees, measured counterclockwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_table_get_row_spacing">
<description>
Gets the amount of space between row @row, and
row @row + 1. See gtk_table_set_row_spacing().


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a row in the table, 0 indicates the first row
</parameter_description>
</parameter>
</parameters>
<return> the row spacing
</return>
</function>

<function name="gtk_entry_set_text">
<description>
Sets the text in the widget to the given
value, replacing the current contents.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the new text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_queue_resize_no_redraw">
<description>
This function works like gtk_widget_queue_resize(), 
except that the widget is not invalidated.

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_has_application">
<description>
Checks whether an application registered this resource using @app_name.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="app_name">
<parameter_description> a string containing an application name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an application with name @app_name was found,
%FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_rc_reset_styles">
<description>
This function recomputes the styles for all widgets that use a
particular #GtkSettings object. (There is one #GtkSettings object
per #GdkScreen, see gtk_settings_get_for_screen()); It is useful
when some global parameter has changed that affects the appearance
of all widgets, because when a widget gets a new style, it will
both redraw and recompute any cached information about its
appearance. As an example, it is used when the default font size
set by the operating system changes. Note that this function
doesn&apos;t affect widgets that have a style set explicitely on them
with gtk_widget_set_style().

Since: 2.4

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_add">
<description>
Adds @widget to @container. Typically used for simple containers
such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
layout containers such as #GtkBox or #GtkTable, this function will
pick default packing parameters that may not be correct.  So
consider functions such as gtk_box_pack_start() and
gtk_table_attach() as an alternative to gtk_container_add() in
those cases. A widget may be added to only one container at a time;
you can&apos;t place the same widget inside two different containers.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget to be placed inside @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_sort_order">
<description>
Gets the value set by gtk_tree_view_column_set_sort_order().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> the sort order the sort indicator is indicating
</return>
</function>

<function name="gtk_plug_construct">
<description>
Finish the initialization of @plug for a given #GtkSocket identified by
@socket_id. This function will generally only be used by classes deriving from #GtkPlug.

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug.
</parameter_description>
</parameter>
<parameter name="socket_id">
<parameter_description> the XID of the socket&apos;s window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_tags">
<description>
Return value: list of #GtkTextTag

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> list of #GtkTextTag
</return>
</function>

<function name="gtk_text_iter_forward_visible_line">
<description>
Moves @iter to the start of the next visible line. Returns %TRUE if there
was a next line to move to, and %FALSE if @iter was simply moved to
the end of the buffer and is now not dereferenceable, or if @iter was
already at the end of the buffer.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter can be dereferenced

Since: 2.8
</return>
</function>

<function name="gtk_recent_chooser_select_uri">
<description>
Selects @uri inside @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @uri was found.

Since: 2.10
</return>
</function>

<function name="gtk_button_box_set_child_secondary">
<description>
Sets whether @child should appear in a secondary group of children.
A typical use of a secondary child is the help button in a dialog.

This group appears after the other children if the style
is %GTK_BUTTONBOX_START, %GTK_BUTTONBOX_SPREAD or
%GTK_BUTTONBOX_EDGE, and before the other children if the style
is %GTK_BUTTONBOX_END. For horizontal button boxes, the definition
of before/after depends on direction of the widget (see
gtk_widget_set_direction()). If the style is %GTK_BUTTONBOX_START
or %GTK_BUTTONBOX_END, then the secondary children are aligned at
the other end of the button box from the main children. For the
other styles, they appear immediately next to the main children.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkButtonBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @widget
</parameter_description>
</parameter>
<parameter name="is_secondary">
<parameter_description> if %TRUE, the @child appears in a secondary group of the
button box.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_delete_entries">
<description>
Deletes the menu items which were created from the @entries by the given
item factory.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkItemFactoryEntry&amp;lt;!-- --&amp;gt;s 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_use_underline">
<description>
Return value: %TRUE whether an embedded underline in the label indicates

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE whether an embedded underline in the label indicates
the mnemonic accelerator keys.
</return>
</function>

<function name="gtk_print_operation_preview_is_selected">
<description>
Returns: %TRUE if the page has been selected for printing

</description>
<parameters>
<parameter name="preview">
<parameter_description> a #GtkPrintOperationPreview
</parameter_description>
</parameter>
<parameter name="page_nr">
<parameter_description> a page number
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the page has been selected for printing

Since: 2.10
</return>
</function>

<function name="gtk_icon_theme_get_for_screen">
<description>
Gets the icon theme object associated with @screen; if this
function has not previously been called for the given
screen, a new icon theme object will be created and
associated with the screen. Icon theme objects are
fairly expensive to create, so using this function
is usually a better choice than calling than gtk_icon_theme_new()
and setting the screen yourself; by using this function
a single icon theme object will be shared between users.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> A unique #GtkIconTheme associated with
the given screen. This icon theme is associated with
the screen and can be used as long as the screen
is open. Do not ref or unref it.

Since: 2.4
</return>
</function>

<function name="gtk_spin_button_set_digits">
<description>
Set the precision to be displayed by @spin_button. Up to 20 digit precision
is allowed.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="digits">
<parameter_description> the number of digits after the decimal point to be displayed for the spin button&apos;s value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_iter_at_position">
<description>
Retrieves the iterator pointing to the character at buffer 
coordinates @x and @y. Buffer coordinates are coordinates for 
the entire buffer, not just the currently-displayed portion.  
If you have coordinates from an event, you have to convert 
those to buffer coordinates with 
gtk_text_view_window_to_buffer_coords().

Note that this is different from gtk_text_view_get_iter_at_location(),
which returns cursor locations, i.e. positions &amp;lt;emphasis&amp;gt;between&amp;lt;/emphasis&amp;gt;
characters.

Since: 2.6

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="trailing">
<parameter_description> location to store an integer indicating where
in the grapheme the user clicked. It will either be
zero, or the number of characters in the grapheme. 
0 represents the trailing edge of the grapheme.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x position, in buffer coordinates
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y position, in buffer coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_tool_button_new">
<description>
Return value: a newly created #GtkToggleToolButton

</description>
<parameters>
</parameters>
<return> a newly created #GtkToggleToolButton

Since: 2.4
</return>
</function>

<function name="gtk_option_menu_get_history">
<description>
Retrieves the index of the currently selected menu item. The menu
items are numbered from top to bottom, starting with 0. 


</description>
<parameters>
<parameter name="option_menu">
<parameter_description> a #GtkOptionMenu
</parameter_description>
</parameter>
</parameters>
<return> index of the selected menu item, or -1 if there are no menu items
Deprecated: 2.4: Use #GtkComboBox instead.
</return>
</function>

<function name="gtk_toolbar_prepend_space">
<description>
Adds a new space to the beginning of the toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_type">
<description>
Return value: a #GType.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> a #GType.
</return>
</function>

<function name="gtk_page_setup_new">
<description>
Creates a new #GtkPageSetup. 


</description>
<parameters>
</parameters>
<return> a new #GtkPageSetup.

Since: 2.10
</return>
</function>

<function name="gtk_target_list_add_uri_targets">
<description>
Appends the URI targets supported by #GtkSelection to
the target list. All targets are added with the same @info.

Since: 2.6

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> an ID that will be passed back to the application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_slice">
<description>
Like gtk_text_iter_get_slice (), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
&quot;invisible&quot; attribute turned on has been applied to it.


</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of range
</parameter_description>
</parameter>
</parameters>
<return> slice of text from the buffer
</return>
</function>

<function name="gtk_range_get_fill_level">
<description>
Gets the current position of the fill level indicator.


</description>
<parameters>
<parameter name="range">
<parameter_description> A #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> The current fill level

Since: 2.12
</return>
</function>

<function name="gtk_assistant_append_page">
<description>
Appends a page to the @assistant.


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the index (starting at 0) of the inserted page

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_backward_visible_cursor_positions">
<description>
Moves up to @count visible cursor positions. See
gtk_text_iter_backward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of positions to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable

Since: 2.4
</return>
</function>

<function name="gtk_text_view_place_cursor_onscreen">
<description>
Moves the cursor to the currently visible region of the
buffer, it it isn&apos;t there already.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cursor had to be moved.
</return>
</function>

<function name="gtk_label_get_mnemonic_keyval">
<description>
If the label has been set so that it has an mnemonic key this function
Returns: GDK keyval usable for accelerators, or #GDK_VoidSymbol

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> GDK keyval usable for accelerators, or #GDK_VoidSymbol
</return>
</function>

<function name="gtk_printer_get_location">
<description>
Return value: the location of @printer

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the location of @printer

Since: 2.10
</return>
</function>

<function name="gtk_tool_button_get_icon_widget">
<description>
Return the widget used as icon widget on @button. See
gtk_tool_button_set_icon_widget().


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
</parameters>
<return> The widget used as icon on @button, or %NULL.

Since: 2.4
</return>
</function>

<function name="gtk_accel_map_foreach_unfiltered">
<description>
Loops over all entries in the accelerator map, and execute
@foreach_func on each. The signature of @foreach_func is that of
#GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).

</description>
<parameters>
<parameter name="data">
<parameter_description>         data to be passed into @foreach_func
</parameter_description>
</parameter>
<parameter name="foreach_func">
<parameter_description> function to be executed for each accel map entry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_row_separator_func">
<description>
Sets the row separator function, which is used to determine
whether a row should be drawn as a separator. If the row separator
function is %NULL, no separators are drawn. This is the default value.

Since: 2.6

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GtkTreeViewRowSeparatorFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notifier for @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_char">
<description>
Moves @iter forward by one character offset. Note that images
embedded in the buffer occupy 1 character slot, so
gtk_text_iter_forward_char () may actually move onto an image instead
of a character, if you have images in your buffer.  If @iter is the
end iterator or one character before it, @iter will now point at
the end iterator, and gtk_text_iter_forward_char () returns %FALSE for
convenience when writing loops.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_widget_grab_focus">
<description>
Causes @widget to have the keyboard focus for the #GtkWindow it&apos;s
inside. @widget must be a focusable widget, such as a #GtkEntry;
something like #GtkFrame won&apos;t work. (More precisely, it must have the
%GTK_CAN_FOCUS flag set.)

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_get_size">
<description>
Return value: number of tags in @table

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
</parameters>
<return> number of tags in @table
</return>
</function>

<function name="gtk_text_buffer_get_selection_bounds">
<description>
Return value: whether the selection has nonzero length

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> iterator to initialize with selection start
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator to initialize with selection end
</parameter_description>
</parameter>
</parameters>
<return> whether the selection has nonzero length
</return>
</function>

<function name="gtk_drag_update">
<description>
Updates the status of the drag; called when the
cursor moves or the modifier changes

</description>
<parameters>
<parameter name="info">
<parameter_description> DragSourceInfo for the drag
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> new screen
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> new X position 
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> new y position
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> event received requiring update
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_begins_tag">
<description>
Return value: whether @iter is the start of a range tagged with @tag

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the start of a range tagged with @tag
</return>
</function>

<function name="gtk_page_setup_unix_dialog_set_print_settings">
<description>
Sets the #GtkPrintSettings from which the page setup dialog
takes its values.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPageSetupUnixDialog
</parameter_description>
</parameter>
<parameter name="print_settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_sort_indicator">
<description>
Call this function with a @setting of %TRUE to display an arrow in
the header button indicating the column is sorted. Call
gtk_tree_view_column_set_sort_order() to change the direction of
the arrow.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to display an indicator that the column is sorted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_popup_with_data">
<description>
Pops up the menu constructed from the item factory at (@x, @y). Callbacks
can access the @popup_data while the menu is posted via 
gtk_item_factory_popup_data() and gtk_item_factory_popup_data_from_widget().

The @mouse_button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@mouse_button should be 0.

The @time_ parameter should be the time stamp of the event that
initiated the popup. If such an event is not available, use
gtk_get_current_event_time() instead.

The operation of the @mouse_button and the @time_ parameters is the same
as the @button and @activation_time parameters for gtk_menu_popup().

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory of type #GTK_TYPE_MENU (see gtk_item_factory_new())
</parameter_description>
</parameter>
<parameter name="popup_data">
<parameter_description> data available for callbacks while the menu is posted
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a #GtkDestroyNotify function to be called on @popup_data when
the menu is unposted
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x position 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y position
</parameter_description>
</parameter>
<parameter name="mouse_button">
<parameter_description> the mouse button which was pressed to initiate the popup
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the time at which the activation event occurred
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_program_name">
<description>
Sets the name to display in the about dialog. 
If this is not set, it defaults to g_get_application_name().

Since: 2.12

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the program name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_new_merge_id">
<description>
Return value: an unused merge id.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
</parameters>
<return> an unused merge id.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_get_search_entry">
<description>
Return value: the entry currently in use as search entry.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the entry currently in use as search entry.

Since: 2.10
</return>
</function>

<function name="gtk_label_set_selectable">
<description>
Selectable labels allow the user to select text from the label, for
copy-and-paste.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to allow selecting text in the label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_update_policy">
<description>
Gets the update policy of @range. See gtk_range_set_update_policy().


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> the current update policy
</return>
</function>

<function name="gtk_container_set_focus_chain">
<description>
Sets a focus chain, overriding the one computed automatically by GTK+.

In principle each widget in the chain should be a descendant of the 
container, but this is not enforced by this method, since it&apos;s allowed 
to set the focus chain before you pack the widgets, or have a widget 
in the chain that isn&apos;t always packed. The necessary checks are done 
when the focus chain is actually traversed.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="focusable_widgets">
<parameter_description> the new focus chain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_thaw">
<description>
Does nothing. Previously defrosted a calendar; all the changes made
since the last gtk_calendar_freeze() were displayed.

Deprecated: 2.8: 

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_class_list_style_properties">
<description>

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GtkWidgetClass
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> location to return the number of style properties found
</parameter_description>
</parameter>
</parameters>
<return> an newly allocated array of #GParamSpec*. The array must 
be freed with g_free().
all style properties of a widget class.

Since: 2.2
</return>
</function>

<function name="gtk_window_deiconify">
<description>
Asks to deiconify (i.e. unminimize) the specified @window. Note
that you shouldn&apos;t assume the window is definitely deiconified
afterward, because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could iconify it
again before your code which assumes deiconification gets to run.

You can track iconification via the &quot;window_state_event&quot; signal
on #GtkWidget.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_unselect_uri">
<description>
Unselects the file referred to by @uri. If the file
is not in the current directory, does not exist, or
is otherwise not currently selected, does nothing.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI to unselect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_focus_cell">
<description>
Sets the current keyboard focus to be at @cell, if the column contains
2 or more editable and activatable cells.

Since: 2.2

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkMenu">
<description>
A boolean that indicates whether the menu is torn-off.

Since: 2.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_pixbuf_new">
<description>
Creates a new #GtkCellRendererPixbuf. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the &quot;pixbuf&quot; property on the cell renderer to a pixbuf value
in the model, thus rendering a different image in each row of the
#GtkTreeView.


</description>
<parameters>
</parameters>
<return> the new cell renderer
</return>
</function>

<function name="gtk_entry_set_inner_border">
<description>
Sets %entry&apos;s inner-border property to %border, or clears it if %NULL
is passed. The inner-border is the area around the entry&apos;s text, but
inside its frame.

If set, this property overrides the inner-border style property.
Overriding the style-provided border is useful when you want to do
in-place editing of some text in a canvas or list widget, where
pixel-exact positioning of the entry is important.

Since: 2.10

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="border">
<parameter_description> a #GtkBorder, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_settings_get_default">
<description>
Gets the #GtkSettings object for the default GDK screen, creating
it if necessary. See gtk_settings_get_for_screen().


</description>
<parameters>
</parameters>
<return> a #GtkSettings object. If there is no default
screen, then returns %NULL.
</return>
</function>

<function name="GtkSocket">
<description>
This signal is emitted when a client is removed from the socket. 
The default action is to destroy the #GtkSocket widget, so if you 
want to reuse it you must add a signal handler that returns %TRUE. 


</description>
<parameters>
<parameter name="socket_">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return> %TRUE to stop other handlers from being invoked.
</return>
</function>

<function name="gtk_label_get_justify">
<description>
Return value: #GtkJustification

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> #GtkJustification
</return>
</function>

<function name="gtk_accel_label_get_accel_widget">
<description>
Fetches the widget monitored by this accelerator label. See
gtk_accel_label_set_accel_widget().


</description>
<parameters>
<parameter name="accel_label">
<parameter_description> a #GtkAccelLabel
</parameter_description>
</parameter>
</parameters>
<return> the object monitored by the accelerator label,
or %NULL.
</return>
</function>

<function name="gtk_text_buffer_insert_with_tags_by_name">
<description>
Same as gtk_text_buffer_insert_with_tags(), but allows you
to pass in tag names instead of tag objects.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> position in @buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 text
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text, or -1
</parameter_description>
</parameter>
<parameter name="first_tag_name">
<parameter_description> name of a tag to apply to @text
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> more tag names
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_create_menu_entries">
<description>
Creates the menu items from the @entries.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkMenuEntry&amp;lt;!-- --&amp;gt;s 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_dest_row_at_pos">
<description>
Determines the destination row for a given position.  @drag_x and
@drag_y are expected to be in widget coordinates.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="drag_x">
<parameter_description> the position to determine the destination row for
</parameter_description>
</parameter>
<parameter name="drag_y">
<parameter_description> the position to determine the destination row for
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> Return location for the path of the highlighted row, or %NULL.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> Return location for the drop position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether there is a row at the given position.
</return>
</function>

<function name="gtk_icon_theme_get_default">
<description>
Gets the icon theme for the default screen. See
gtk_icon_theme_get_for_screen().


</description>
<parameters>
</parameters>
<return> A unique #GtkIconTheme associated with
the default screen. This icon theme is associated with
the screen and can be used as long as the screen
is open. Do not ref or unref it.

Since: 2.4
</return>
</function>

<function name="gtk_file_system_volume_mount">
<description>
Tries to mount an unmounted volume.  This may cause the &quot;volumes-changed&quot;
signal in the @file_system to be emitted.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the @volume was mounted successfully, FALSE otherwise.
</return>
</function>

<function name="GtkAssistant">
<description>
Setting the &quot;complete&quot; child property to %TRUE marks a page as complete
(i.e.: all the required fields are filled out). GTK+ uses this information
to control the sensitivity of the navigation buttons.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_box_set_spacing">
<description>
Sets the #GtkBox:spacing property of @box, which is the 
number of pixels to place between children of @box.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> the number of pixels to put between children
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set">
<description>
Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set.
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to &quot;Foo&quot;, you would write &amp;lt;literal&amp;gt;gtk_list_store_set (store, iter,
0, &quot;Foo&quot;, -1)&amp;lt;/literal&amp;gt;.

</description>
<parameters>
<parameter name="list_store">
<parameter_description> a #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> row iterator
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_delete_entry">
<description>
Deletes the menu item which was created from @entry by the given
item factory.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="entry">
<parameter_description> a #GtkItemFactoryEntry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_move_item">
<description>
Changes the location of a recently used resource from @uri to @new_uri.

Please note that this function will not affect the resource pointed
by the URIs, but only the URI used in the recently used resources list.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI of a recently used resource
</parameter_description>
</parameter>
<parameter name="new_uri">
<parameter_description> the new URI of the recently used resource, or %NULL to
remove the item pointed by @uri in the list
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.

Since: 2.10
</return>
</function>

<function name="gtk_print_operation_is_finished">
<description>
A convenience function to find out if the print operation
is finished, either successfully (%GTK_PRINT_STATUS_FINISHED)
or unsuccessfully (%GTK_PRINT_STATUS_FINISHED_ABORTED).

Note: when you enable print status tracking the print operation
can be in a non-finished state even after done has been called, as
the operation status then tracks the print job status on the printer.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the print operation is finished.

Since: 2.10
</return>
</function>

<function name="gtk_icon_set_add_source">
<description>
Icon sets have a list of #GtkIconSource, which they use as base
icons for rendering icons in different states and sizes. Icons are
scaled, made to look insensitive, etc. in
gtk_icon_set_render_icon(), but #GtkIconSet needs base images to
work with. The base images and when to use them are described by
a #GtkIconSource.

This function copies @source, so you can reuse the same source immediately
without affecting the icon set.

An example of when you&apos;d use this function: a web browser&apos;s &quot;Back
to Previous Page&quot; icon might point in a different direction in
Hebrew and in English; it might look different when insensitive;
and it might change size depending on toolbar mode (small/large
icons). So a single icon set would contain all those variants of
the icon, and you might add a separate source for each one.

You should nearly always add a &quot;default&quot; icon source with all
fields wildcarded, which will be used as a fallback if no more
specific source matches. #GtkIconSet always prefers more specific
icon sources to more generic icon sources. The order in which you
add the sources to the icon set does not matter.

gtk_icon_set_new_from_pixbuf() creates a new icon set with a
default icon source based on the given pixbuf.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_filter_convert_path_to_child_path">
<description>
Converts @filter_path to a path on the child model of @filter. That is,
@filter_path points to a location in @filter. The returned path will
point to the same location in the model not being filtered. If @filter_path
does not point to a location in the child model, %NULL is returned.


</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="filter_path">
<parameter_description> A #GtkTreePath to convert.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreePath, or %NULL.

Since: 2.4
</return>
</function>

<function name="gtk_recent_chooser_get_current_uri">
<description>
Gets the URI currently selected by @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string holding a URI.

Since: 2.10
</return>
</function>

<function name="gtk_builder_add_from_file">
<description>
Parses a file containing a &amp;lt;link linkend=&quot;BUILDER-UI&quot;&amp;gt;GtkBuilder 
UI definition&amp;lt;/link&amp;gt; and merges it with the current contents of @builder. 


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the name of the file to parse
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A positive value on success, 0 if an error occurred

Since: 2.12
</return>
</function>

<function name="gtk_statusbar_get_has_resize_grip">
<description>
Returns: %TRUE if the statusbar has a resize grip.

</description>
<parameters>
<parameter name="statusbar">
<parameter_description> a #GtkStatusBar
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the statusbar has a resize grip.
</return>
</function>

<function name="gtk_icon_factory_remove_default">
<description>
Removes an icon factory from the list of default icon
factories. Not normally used; you might use it for a library that
can be unloaded or shut down.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory previously added with gtk_icon_factory_add_default()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_volume_get_base_path">
<description>
Queries the base path for a volume.  For example, a CD-ROM device may yield a
path of &quot;/mnt/cdrom&quot;.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
</parameters>
<return> a #GtkFilePath with the base mount path of the specified
@volume.
</return>
</function>

<function name="gtk_calendar_display_options">
<description>
Sets display options (whether to display the heading and the month headings).

Deprecated: 2.4: Use gtk_calendar_set_display_options() instead

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the display options to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_new">
<description>
Creates a new #GtkAction object. To add the action to a
#GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
See &amp;lt;xref linkend=&quot;XML-UI&quot;/&amp;gt; for information on allowed action
names.


</description>
<parameters>
<parameter name="name">
<parameter_description> A unique name for the action
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label displayed in menu items and on buttons
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a tooltip for the action
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the stock icon to display in widgets representing the action
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkAction

Since: 2.4
</return>
</function>

<function name="_gtk_file_system_model_new">
<description>
Creates a new #GtkFileSystemModel object. The #GtkFileSystemModel
object wraps a #GtkFileSystem interface as a #GtkTreeModel.
Using the @root_path and @max_depth parameters, the tree model
can be restricted to a subportion of the entire file system.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> an object implementing #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="root_path">
<parameter_description> the path of root of the file system to display
</parameter_description>
</parameter>
<parameter name="max_depth">
<parameter_description> the maximum depth from the children of @root_path
or the roots of the file system to display in
the file selector). A depth of 0 displays
only the immediate children of @root_path,
or the roots of the filesystem. -1 for no
maximum depth.
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> a bitmask indicating the types of information
that is desired about the files. This will
determine what information is returned by
_gtk_file_system_model_get_info().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GtkFileSystemModel object, or NULL if there
was an error.
</return>
</function>

<function name="gtk_text_layout_validate">
<description>
Validate regions of a #GtkTextLayout. The ::changed signal will
be emitted for each region validated.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="max_pixels">
<parameter_description> the maximum number of pixels to validate. (No more
than one paragraph beyond this limit will be validated)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_new">
<description>
Creates a new #GtkEntryCompletion object.


</description>
<parameters>
</parameters>
<return> A newly created #GtkEntryCompletion object.

Since: 2.4
</return>
</function>

<function name="gtk_assistant_add_action_widget">
<description>
Adds a widget to the action area of a #GtkAssistant.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_target_table_free">
<description>
This function frees a target table as returned by
gtk_target_table_new_from_list()

Since: 2.10

</description>
<parameters>
<parameter name="targets">
<parameter_description> a #GtkTargetEntry array
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the number of entries in the array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_label">
<description>
Changes the tab label for @child. If %NULL is specified
for @tab_label, then the page will have the label &apos;page N&apos;.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the tab label widget to use, or %NULL for default tab
label.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_backward_display_line_start">
<description>
Moves the given @iter backward to the next display line start.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_file_selection_get_select_multiple">
<description>
Determines whether or not the user is allowed to select multiple files in
the file list. See gtk_file_selection_set_select_multiple().


</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user is allowed to select multiple files in the
file list
</return>
</function>

<function name="gtk_tree_selection_get_user_data">
<description>
Return value: The user data.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return> The user data.
</return>
</function>

<function name="_gtk_file_chooser_embed_delegate_iface_init">
<description>
An interface-initialization function for use in cases where an object is
simply delegating the methods, signals of the #GtkFileChooserEmbed interface
to another object.  _gtk_file_chooser_embed_set_delegate() must be called on
each instance of the object so that the delegate object can be found.

</description>
<parameters>
<parameter name="iface">
<parameter_description> a #GtkFileChoserEmbedIface structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_starts_display_line">
<description>
Determines whether @iter is at the start of a display line.
See gtk_text_view_forward_display_line() for an explanation of
display lines vs. paragraphs.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter begins a wrapped line
</return>
</function>

<function name="gtk_menu_tool_button_get_menu">
<description>
Gets the #GtkMenu associated with #GtkMenuToolButton.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkMenuToolButton
</parameter_description>
</parameter>
</parameters>
<return> the #GtkMenu associated with #GtkMenuToolButton

Since: 2.6
</return>
</function>

<function name="gtk_scrolled_window_get_vscrollbar">
<description>
Returns: the vertical scrollbar of the scrolled window, or

</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return> the vertical scrollbar of the scrolled window, or
%NULL if it does not have one.

Since: 2.8
</return>
</function>

<function name="gtk_widget_has_screen">
<description>
Checks whether there is a #GdkScreen is associated with
this widget. All toplevel widgets have an associated
screen, and all widgets added into a heirarchy with a toplevel
window at the top.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there is a #GdkScreen associcated
with the widget.

Since: 2.2
</return>
</function>

<function name="gtk_container_foreach">
<description>
Invokes @callback on each non-internal child of @container. See
gtk_container_forall() for details on what constitutes an
&quot;internal&quot; child.  Most applications should use
gtk_container_foreach(), rather than gtk_container_forall().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a callback
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> callback user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_region_intersect">
<description>
Computes the intersection of a @widget&apos;s area and @region, returning
the intersection. The result may be empty, use gdk_region_empty() to
check.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion, in the same coordinate system as 
@widget-&amp;gt;allocation. That is, relative to @widget-&amp;gt;window
for %NO_WINDOW widgets; relative to the parent window
of @widget-&amp;gt;window for widgets with their own window.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated region holding the intersection of @widget
and @region. The coordinates of the return value are
relative to @widget-&amp;gt;window for %NO_WINDOW widgets, and
relative to the parent window of @widget-&amp;gt;window for
widgets with their own window.
</return>
</function>

<function name="gtk_tree_model_sort_new_with_model">
<description>
Creates a new #GtkTreeModel, with @child_model as the child model.


</description>
<parameters>
<parameter name="child_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkTreeModel.
</return>
</function>

<function name="gtk_tree_path_prepend_index">
<description>
Prepends a new index to a path.  As a result, the depth of the path is
increased.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_preview_widget">
<description>
Sets an application-supplied widget to use to display a custom preview
of the currently selected file. To implement a preview, after setting the
preview widget, you connect to the ::update-preview
signal, and call gtk_file_chooser_get_preview_filename() or
gtk_file_chooser_get_preview_uri() on each change. If you can
display a preview of the new file, update your widget and
set the preview active using gtk_file_chooser_set_preview_widget_active().
Otherwise, set the preview inactive.

When there is no application-supplied preview widget, or the
application-supplied preview widget is not active, the file chooser
may display an internally generated preview of the current file or
it may display no preview at all.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="preview_widget">
<parameter_description> widget for displaying preview.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_new_from_stock">
<description>
Creates a new #GtkButton containing the image and text from a stock item.
Some stock ids have preprocessor macros like #GTK_STOCK_OK and
#GTK_STOCK_APPLY.

If @stock_id is unknown, then it will be treated as a mnemonic
label (as for gtk_button_new_with_mnemonic()).


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of the stock item 
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkButton
</return>
</function>

<function name="_gtk_icon_cache_validate">
<description>
Validates the icon cache passed in the @cache and
@cache_size fields of the @info structure. The
validator checks that offsets specified in the
cache do not point outside the mapped area, that
strings look reasonable, and that pixbufs can
be deserialized. The amount of validation can
be controlled with the @flags field.  


</description>
<parameters>
<parameter name="info">
<parameter_description> a CacheInfo structure 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cache is valid
</return>
</function>

<function name="gtk_text_iter_compare">
<description>
A qsort()-style function that returns negative if @lhs is less than
@rhs, positive if @lhs is greater than @rhs, and 0 if they&apos;re equal.
Ordering is in character offset order, i.e. the first character in the buffer
is less than the second character in the buffer.


</description>
<parameters>
<parameter name="lhs">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> another #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> -1 if @lhs is less than @rhs, 1 if @lhs is greater, 0 if they are equal
</return>
</function>

<function name="gtk_combo_box_new_with_model">
<description>
Creates a new #GtkComboBox with the model initialized to @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkComboBox.

Since: 2.4
</return>
</function>

<function name="gtk_frame_get_label_widget">
<description>
Retrieves the label widget for the frame. See
gtk_frame_set_label_widget().


</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
</parameters>
<return> the label widget, or %NULL if there is none.
</return>
</function>

<function name="gtk_accelerator_name">
<description>
Converts an accelerator keyval and modifier mask
into a string parseable by gtk_accelerator_parse().
For example, if you pass in #GDK_q and #GDK_CONTROL_MASK,
this function returns &quot;&amp;lt;Control&amp;gt;q&quot;. 

If you need to display accelerators in the user interface,
see gtk_accelerator_get_label().


</description>
<parameters>
<parameter name="accelerator_key">
<parameter_description>  accelerator keyval
</parameter_description>
</parameter>
<parameter name="accelerator_mods">
<parameter_description> accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated accelerator name
</return>
</function>

<function name="gtk_window_parse_geometry">
<description>
Parses a standard X Window System geometry string - see the
manual page for X (type &apos;man X&apos;) for details on this.
gtk_window_parse_geometry() does work on all GTK+ ports
including Win32 but is primarily intended for an X environment.

If either a size or a position can be extracted from the
geometry string, gtk_window_parse_geometry() returns %TRUE
and calls gtk_window_set_default_size() and/or gtk_window_move()
to resize/move the window.

If gtk_window_parse_geometry() returns %TRUE, it will also
set the #GDK_HINT_USER_POS and/or #GDK_HINT_USER_SIZE hints
indicating to the window manager that the size/position of
the window was user-specified. This causes most window
managers to honor the geometry.

Note that for gtk_window_parse_geometry() to work as expected, it has
to be called when the window has its &quot;final&quot; size, i.e. after calling
gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()
on the window.

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
#include &amp;lt;gtk/gtk.h&amp;gt;

static void
fill_with_content (GtkWidget *vbox)
{
/&amp;lt;!-- --&amp;gt;* fill with content... *&amp;lt;!-- --&amp;gt;/
}

int
main (int argc, char *argv[])
{
GtkWidget *window, *vbox;
GdkGeometry size_hints = {
100, 50, 0, 0, 100, 50, 10, 10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST  
};

gtk_init (&amp;amp;argc, &amp;amp;argv);

window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
vbox = gtk_vbox_new (FALSE, 0);

gtk_container_add (GTK_CONTAINER (window), vbox);
fill_with_content (vbox);
gtk_widget_show_all (vbox);

gtk_window_set_geometry_hints (GTK_WINDOW (window),
window,
&amp;amp;size_hints,
GDK_HINT_MIN_SIZE | 
GDK_HINT_BASE_SIZE | 
GDK_HINT_RESIZE_INC);

if (argc &amp;gt; 1)
{
if (!gtk_window_parse_geometry (GTK_WINDOW (window), argv[1]))
fprintf (stderr, &quot;Failed to parse &apos;&amp;percnt;s&apos;\n&quot;, argv[1]);
}

gtk_widget_show_all (window);
gtk_main ();

return 0;
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> geometry string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if string was parsed successfully
</return>
</function>

<function name="gtk_stock_item_free">
<description>
Frees a stock item allocated on the heap, such as one returned by
gtk_stock_item_copy(). Also frees the fields inside the stock item,
if they are not %NULL.


</description>
<parameters>
<parameter name="item">
<parameter_description> a #GtkStockItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_insert_page_menu">
<description>
Insert a page into @notebook at the given position, specifying
the widget to use as the label in the popup menu.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu, if that is enabled. If %NULL, and @tab_label
is a #GtkLabel or %NULL, then the menu label will be
a newly created label with the same text as @tab_label;
If @tab_label is not a #GtkLabel, @menu_label must be
specified if the page-switch menu is to be used.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page after all other pages.
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the inserted
page in the notebook
</return>
</function>

<function name="gtk_color_selection_get_previous_color">
<description>
Fills @color in with the original color value.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to fill in with the original color value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_target_list_add_text_targets">
<description>
Appends the text targets supported by #GtkSelection to
the target list. All targets are added with the same @info.

Since: 2.6

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> an ID that will be passed back to the application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_move_mark_onscreen">
<description>
Moves a mark within the buffer so that it&apos;s
located within the currently-visible text area.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mark moved (wasn&apos;t already onscreen)
</return>
</function>

<function name="gtk_widget_thaw_child_notify">
<description>
Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
This causes all queued #GtkWidget::child-notify signals on @widget to be 
emitted.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_icon_set">
<description>
See gtk_image_new_from_icon_set() for details.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_tree_selection_set_tree_view">
<description>
Sets the #GtkTreeView of @selection.  This function should not be invoked, as
it is used internally by #GtkTreeView.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="tree_view">
<parameter_description> The #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tooltip_set_tip_area">
<description>
Sets the area of the widget, where the contents of this tooltip apply,
to be @rect (in widget coordinates).  This is especially useful for
properly setting tooltips on #GtkTreeView rows and cells, #GtkIconViews,
etc.

For setting tooltips on #GtkTreeView, please refer to the convenience
functions for this: gtk_tree_view_set_tooltip_row() and
gtk_tree_view_set_tooltip_cell().

Since: 2.12

</description>
<parameters>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_set_paper_size">
<description>
Sets the paper size of the #GtkPageSetup without
changing the margins. See 
gtk_page_setup_set_paper_size_and_default_margins().

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #GtkPaperSize 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_set_bookmark_label">
<description>
Sets the label to display for a bookmark.

Since: 2.8

</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of the bookmark 
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label for the bookmark, or %NULL to display
the path itself
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_snap_to_ticks">
<description>
Sets the policy as to whether values are corrected to the nearest step 
increment when a spin button is activated after providing an invalid value.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="snap_to_ticks">
<parameter_description> a flag indicating if invalid values should be corrected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_new_with_font">
<description>
Creates a new font picker widget.


</description>
<parameters>
<parameter name="fontname">
<parameter_description> Name of font to display in font selection dialog
</parameter_description>
</parameter>
</parameters>
<return> a new font picker widget.

Since: 2.4
</return>
</function>

<function name="gtk_im_context_filter_keypress">
<description>
Allow an input method to internally handle key press and release 
events. If this function returns %TRUE, then no further processing
should be done for this key event.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the key event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the input method handled the key event.

</return>
</function>

<function name="GtkComboBox">
<description>
Which kind of shadow to draw around the combo box.

Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_expander_new">
<description>
Creates a new expander using @label as the text of the label.


</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the label
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkExpander widget.

Since: 2.4
</return>
</function>

<function name="gtk_menu_bar_set_pack_direction">
<description>
Sets how items should be packed inside a menubar.

Since: 2.8

</description>
<parameters>
<parameter name="menubar">
<parameter_description> a #GtkMenuBar.
</parameter_description>
</parameter>
<parameter name="pack_dir">
<parameter_description> a new #GtkPackDirection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_begin_resize_drag">
<description>
Starts resizing a window. This function is used if an application
has window resizing controls. When GDK can support it, the resize
will be done using the standard mechanism for the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; or windowing
system. Otherwise, GDK will try to emulate window resizing,
potentially not all that well, depending on the windowing system.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> mouse button that initiated the drag
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> position of the resize control
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> X position where the user clicked to initiate the drag, in root window coordinates
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> Y position where the user clicked to initiate the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp from the click event that initiated the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_documenters">
<description>
Sets the strings which are displayed in the documenters tab
of the secondary credits dialog. 

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="documenters">
<parameter_description> a %NULL-terminated array of strings 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_get_buffer">
<description>
Gets the text buffer used by the layout. See
gtk_text_layout_set_buffer().


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
</parameters>
<return> the text buffer used by the layout.
</return>
</function>

<function name="gtk_widget_get_default_visual">
<description>
Obtains the visual of the default colormap. Not really useful;
used to be useful before gdk_colormap_get_visual() existed.


</description>
<parameters>
</parameters>
<return> visual of the default colormap
</return>
</function>

<function name="gtk_radio_tool_button_new_with_stock_from_widget">
<description>
Creates a new #GtkRadioToolButton adding it to the same group as @group.
The new #GtkRadioToolButton will contain an icon and label from the
stock item indicated by @stock_id.


</description>
<parameters>
<parameter name="group">
<parameter_description> An existing #GtkRadioToolButton.
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the name of a stock item 
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkRadioToolButton

Since: 2.4
</return>
</function>

<function name="gtk_get_current_event_state">
<description>
If there is a current event and it has a state field, place
that state field in @state and return %TRUE, otherwise return
%FALSE.


</description>
<parameters>
<parameter name="state">
<parameter_description> a location to store the state of the current event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a current event and it had a state field
</return>
</function>

<function name="gtk_fixed_get_has_window">
<description>
Gets whether the #GtkFixed has its own #GdkWindow.
See gdk_fixed_set_has_window().


</description>
<parameters>
<parameter name="fixed">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @fixed has its own window.
</return>
</function>

<function name="gtk_entry_completion_get_popup_set_width">
<description>
Return value: %TRUE if the popup window will be resized to the width of 

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the popup window will be resized to the width of 
the entry

Since: 2.8
</return>
</function>

<function name="gtk_printer_compare">
<description>
Compares two printers.


</description>
<parameters>
<parameter name="a">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> another #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> 0 if the printer match, a negative value if @a &amp;lt; @b, 
or a positive value if @a &amp;gt; @b

Since: 2.10
</return>
</function>

<function name="gtk_toolbar_set_orientation">
<description>
Sets whether a toolbar should appear horizontally or vertically.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> a new #GtkOrientation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_new">
<description>
Creates a new entry.


</description>
<parameters>
</parameters>
<return> a new #GtkEntry.
</return>
</function>

<function name="_gtk_socket_remove_grabbed_key">
<description>
@socket: a #GtkSocket
@keyval: a key
@modifiers: modifiers for the key

Called from the GtkSocket backend when the corresponding plug has
told the socket to remove a key grab.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_create_row_drag_icon">
<description>
Creates a #GdkPixmap representation of the row at @path.  
This image is used for a drag icon.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath in @tree_view
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated pixmap of the drag icon.
</return>
</function>

<function name="gtk_print_operation_set_current_page">
<description>
Sets the current page.

If this is called before gtk_print_operation_run(), 
the user will be able to select to print only the current page.

Note that this only makes sense for pre-paginated documents.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="current_page">
<parameter_description> the current page, 0-based
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_select_filename">
<description>
Selects a filename. If the file name isn&apos;t in the current
folder of @chooser, then the current folder of @chooser will
be changed to the folder containing @filename.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the filename to select
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if both the folder could be changed and the file was
selected successfully, %FALSE otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_color_button_get_use_alpha">
<description>
Does the color selection dialog use the alpha channel?


</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the color sample uses alpha channel, %FALSE if not.

Since: 2.4
</return>
</function>

<function name="GtkCellRendererSpin">
<description>
The number of decimal places to display.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_line_at_y">
<description>
Gets the #GtkTextIter at the start of the line containing
the coordinate @y. @y is in buffer coordinates, convert from
window coordinates with gtk_text_view_window_to_buffer_coords().
If non-%NULL, @line_top will be filled with the coordinate of the top
edge of the line.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="target_iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> a y coordinate
</parameter_description>
</parameter>
<parameter name="line_top">
<parameter_description> return location for top coordinate of the line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_new">
<description>
Creates a new toolbar. 
 

</description>
<parameters>
</parameters>
<return> the newly-created toolbar.
</return>
</function>

<function name="gtk_paper_size_is_custom">
<description>
Return value: whether @size is a custom paper size.

</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
</parameters>
<return> whether @size is a custom paper size.
</return>
</function>

<function name="gtk_text_iter_in_range">
<description>
Checks whether @iter falls in the range [@start, @end).
@start and @end must be in ascending order.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of range
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is in the range
</return>
</function>

<function name="gtk_table_get_default_row_spacing">
<description>
Gets the default row spacing for the table. This is
the spacing that will be used for newly added rows.
(See gtk_table_set_row_spacings())


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
</parameters>
<return>value: the default row spacing
</return>
</function>

<function name="gtk_label_get_angle">
<description>
Gets the angle of rotation for the label. See
gtk_label_set_angle().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the angle of rotation for the label

Since: 2.6
</return>
</function>

<function name="gtk_tool_item_rebuild_menu">
<description>
Calling this function signals to the toolbar that the
overflow menu item for @tool_item has changed. If the
overflow menu is visible when this function it called,
the menu will be rebuilt.

The function must be called when the tool item
changes what it will do in response to the &quot;create_menu_proxy&quot;
signal.

Since: 2.6

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_level_indentation">
<description>
Return value: the amount of extra indentation for child levels in

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> the amount of extra indentation for child levels in
@tree_view.  A return value of 0 means that this feature is disabled.

Since: 2.12
</return>
</function>

<function name="gtk_layout_move">
<description>
Moves a current child of @layout to a new position.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="child_widget">
<parameter_description> a current child of @layout
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position to move to
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position to move to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_search_equal_func">
<description>
Return value: the currently used compare function for the search code.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the currently used compare function for the search code.
</return>
</function>

<function name="gtk_text_view_move_visually">
<description>
Move the iterator a given number of characters visually, treating
it as the strong cursor position. If @count is positive, then the
new strong cursor position will be @count positions to the right of
the old cursor position. If @count is negative then the new strong
cursor position will be @count positions to the left of the old
cursor position.

In the presence of bi-directional text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of characters to move (negative moves left, 
positive moves right)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not on the end iterator
</return>
</function>

<function name="gtk_box_pack_end_defaults">
<description>
Adds @widget to @box, packed with reference to the end of @box.
The child is packed after any other child packed with reference 
to the start of @box. 

Parameters for how to pack the child @widget, #GtkBox:expand, 
#GtkBox:fill and #GtkBox:padding, are given their default
values, %TRUE, %TRUE, and 0, respectively.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the #GtkWidget to be added to @box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_statusbar_pop">
<description>
Removes the first message in the #GtkStatusBar&apos;s stack
with the given context id. 

Note that this may not change the displayed message, if 
the message at the top of the stack has a different 
context id.

</description>
<parameters>
<parameter name="statusbar">
<parameter_description> a #GtkStatusBar
</parameter_description>
</parameter>
<parameter name="context_id">
<parameter_description> a context identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_get_display">
<description>
Gets the #GdkDisplay associated with @clipboard


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @clipboard

Since: 2.2
</return>
</function>

<function name="gtk_range_get_upper_stepper_sensitivity">
<description>
Gets the sensitivity policy for the stepper that points to the
&apos;upper&apos; end of the GtkRange&apos;s adjustment.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> The upper stepper&apos;s sensitivity policy.

Since: 2.10
</return>
</function>

<function name="gtk_color_selection_get_previous_alpha">
<description>
Return value: an integer between 0 and 65535.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> an integer between 0 and 65535.
</return>
</function>

<function name="_gtk_file_system_model_set_show_folders">
<description>
Sets whether folders should be included in the #GtkTreeModel for
display.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="show_folders">
<parameter_description> whether folders should be displayed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_default_size">
<description>
Gets the default size of the window. A value of -1 for the width or
height indicates that a default size has not been explicitly set
for that dimension, so the &quot;natural&quot; size of the window will be
used.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store the default width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store the default height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_add_child_in_window">
<description>
Adds a child at fixed coordinates in one of the text widget&apos;s
windows. The window must have nonzero size (see
gtk_text_view_set_border_window_size()). Note that the child
coordinates are given relative to the #GdkWindow in question, and
that these coordinates have no sane relationship to scrolling. When
placing a child in #GTK_TEXT_WINDOW_WIDGET, scrolling is
irrelevant, the child floats above all scrollable areas. But when
placing a child in one of the scrollable windows (border windows or
text window), you&apos;ll need to compute the child&apos;s correct position
in buffer coordinates any time scrolling occurs or buffer changes
occur, and then call gtk_text_view_move_child() to update the
child&apos;s position. Unfortunately there&apos;s no good way to detect that
scrolling has occurred, using the current API; a possible hack
would be to update all child positions when the scroll adjustments
change or the text buffer changes. See bug 64518 on
bugzilla.gnome.org for status of fixing this issue.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="which_window">
<parameter_description> which window the child should appear in
</parameter_description>
</parameter>
<parameter name="xpos">
<parameter_description> X position of child in window coordinates
</parameter_description>
</parameter>
<parameter name="ypos">
<parameter_description> Y position of child in window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_layout_set_cell_data_func">
<description>
Sets the #GtkCellLayoutDataFunc to use for @cell_layout. This function
is used instead of the standard attributes mapping for setting the
column value, and should set the value of @cell_layout&apos;s cell renderer(s)
as appropriate. @func may be %NULL to remove and older one.

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The #GtkCellLayoutDataFunc to use.
</parameter_description>
</parameter>
<parameter name="func_data">
<parameter_description> The user data for @func.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> The destroy notification for @func_data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_create_items_ac">
<description>
Creates the menu items from the @entries.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkItemFactoryEntry&amp;lt;!-- --&amp;gt;s 
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> data passed to the callback functions of all entries
</parameter_description>
</parameter>
<parameter name="callback_type">
<parameter_description> 1 if the callback functions in @entries are of type
#GtkItemFactoryCallback1, 2 if they are of type #GtkItemFactoryCallback2 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_lock">
<description>
Locks the given accelerator group.

Locking an acelerator group prevents the accelerators contained
within it to be changed during runtime. Refer to
gtk_accel_map_change_entry() about runtime accelerator changes.

If called more than once, @accel_group remains locked until
gtk_accel_group_unlock() has been called an equivalent number
of times.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_invisible_char">
<description>
Retrieves the character displayed in place of the real characters
for entries with visibility set to false. See gtk_entry_set_invisible_char().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the current invisible char, or 0, if the entry does not
show invisible text at all. 
</return>
</function>

<function name="gtk_ui_manager_new">
<description>
Creates a new ui manager object.


</description>
<parameters>
</parameters>
<return> a new ui manager object.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_enable_model_drag_dest">
<description>
Turns @tree_view into a drop destination for automatic DND.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the table of targets that the drag will support
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the number of items in @targets
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> the bitmask of possible actions for a drag from this
widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_scrollable">
<description>
Return value: %TRUE if arrows for scrolling are present

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if arrows for scrolling are present
</return>
</function>

<function name="gtk_print_settings_get_n_copies">
<description>
Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the number of copies to print

Since: 2.10
</return>
</function>

<function name="gtk_frame_get_label_align">
<description>
Retrieves the X and Y alignment of the frame&apos;s label. See
gtk_frame_set_label_align().

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> location to store X alignment of frame&apos;s label, or %NULL
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> location to store X alignment of frame&apos;s label, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_unref">
<description>
Decreases the reference count of @info by one.  If the reference
count reaches zero, @info is deallocated, and the memory freed.

Since: 2.10

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_text">
<description>
Return value: array of characters from the buffer

</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of a range
</parameter_description>
</parameter>
</parameters>
<return> array of characters from the buffer
</return>
</function>

<function name="gtk_tree_view_get_headers_clickable">
<description>
Return value: %TRUE if all header columns are clickable, otherwise %FALSE

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all header columns are clickable, otherwise %FALSE

Since: 2.10
</return>
</function>

<function name="gtk_tree_model_filter_convert_child_iter_to_iter">
<description>
Sets @filter_iter to point to the row in @filter that corresponds to the
row pointed at by @child_iter.  If @filter_iter was not set, %FALSE is
returned.


</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="filter_iter">
<parameter_description> An uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="child_iter">
<parameter_description> A valid #GtkTreeIter pointing to a row on the child model.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @filter_iter was set, i.e. if @child_iter is a
valid iterator pointing to a visible row in child model.

Since: 2.4
</return>
</function>

<function name="GtkPrintJob">
<description>
Gets emitted when the status of a job changes. The signal handler
can use gtk_print_job_get_status() to obtain the new status.

Since: 2.10

</description>
<parameters>
<parameter name="job">
<parameter_description> the #GtkPrintJob object on which the signal was emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_visible_word_end">
<description>
Moves forward to the next visible word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 

Since: 2.4
</return>
</function>

<function name="gtk_cell_view_set_value">
<description>
Sets a property of a cell renderer of @cell_view, and
makes sure the display of @cell_view is updated.

Since: 2.6

</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView widget
</parameter_description>
</parameter>
<parameter name="renderer">
<parameter_description> one of the renderers of @cell_view
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the name of the property of @renderer to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value to set the property to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_scroll_to_iter">
<description>
Scrolls @text_view so that @iter is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center. 
If @use_align is %FALSE, the text scrolls the minimal distance to 
get the mark onscreen, possibly not scrolling at all. The effective 
screen for purposes of this function is reduced by a margin of size 
@within_margin.

Note that this function uses the currently-computed height of the
lines in the text buffer. Line heights are computed in an idle 
handler; so this function may not have the desired effect if it&apos;s 
called before the height computations. To avoid oddness, consider 
using gtk_text_view_scroll_to_mark() which saves a point to be 
scrolled to after line validation.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="within_margin">
<parameter_description> margin as a [0.0,0.5) fraction of screen size
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments (if %FALSE, 
just get the mark onscreen)
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> horizontal alignment of mark within visible area
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> vertical alignment of mark within visible area
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if scrolling occurred
</return>
</function>

<function name="gtk_entry_new_with_max_length">
<description>
Creates a new #GtkEntry widget with the given maximum length.

Note: the existence of this function is inconsistent
with the rest of the GTK+ API. The normal setup would
be to just require the user to make an extra call
to gtk_entry_set_max_length() instead. It is not
expected that this function will be removed, but
it would be better practice not to use it.


</description>
<parameters>
<parameter name="max">
<parameter_description> the maximum length of the entry, or 0 for no maximum.
(other than the maximum length of entries.) The value passed in will
be clamped to the range 0-65536.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkEntry.
</return>
</function>

<function name="gtk_item_factory_popup_data">
<description>
Obtains the @popup_data which was passed to 
gtk_item_factory_popup_with_data(). This data is available until the menu
is popped down again.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
</parameters>
<return> @popup_data associated with @ifactory
</return>
</function>

<function name="gtk_assistant_set_page_side_image">
<description>
Sets a header image for @page. This image is displayed in the side
area of the assistant when @page is the current page.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the new header image @page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_vborder">
<description>
Sets the width of the vertical border of tab labels.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="tab_vborder">
<parameter_description> width of the vertical border of tab labels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_socket_unmap_notify">
<description>
@socket: a #GtkSocket

Called from the GtkSocket backend when the plug has been unmapped ???

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_target_list_add_image_targets">
<description>
Appends the image targets supported by #GtkSelection to
the target list. All targets are added with the same @info.

Since: 2.6

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> an ID that will be passed back to the application
</parameter_description>
</parameter>
<parameter name="writable">
<parameter_description> whether to add only targets for which GTK+ knows
how to convert a pixbuf into the format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_paper_size">
<description>
Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
%GTK_PRINT_SETTINGS_PAPER_WIDTH and
%GTK_PRINT_SETTINGS_PAPER_HEIGHT.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="paper_size">
<parameter_description> a paper size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_default">
<description>
Return value: the name of the default paper size. The string

</description>
<parameters>
</parameters>
<return> the name of the default paper size. The string
is owned by GTK+ and should not be modified.

Since: 2.10
</return>
</function>

<function name="gtk_accelerator_get_default_mod_mask">
<description>
Gets the value set by gtk_accelerator_set_default_mod_mask().

</description>
<parameters>
</parameters>
<return> the default accelerator modifier mask
</return>
</function>

<function name="GtkRecentManager">
<description>
Emitted when the current recently used resources manager changes its
contents.

Since: 2.10

</description>
<parameters>
<parameter name="recent_manager">
<parameter_description> the recent manager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ruler_get_metric">
<description>
Gets the units used for a #GtkRuler. See gtk_ruler_set_metric().


</description>
<parameters>
<parameter name="ruler">
<parameter_description> a #GtkRuler
</parameter_description>
</parameter>
</parameters>
<return> the units currently used for @ruler
</return>
</function>

<function name="gtk_icon_set_get_sizes">
<description>
Obtains a list of icon sizes this icon set can render. The returned
array must be freed with g_free().


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="sizes">
<parameter_description> return location for array of sizes
</parameter_description>
</parameter>
<parameter name="n_sizes">
<parameter_description> location to store number of elements in returned array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_get_orientation">
<description>
Gets the page orientation of the #GtkPageSetup.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
</parameters>
<return> the page orientation

Since: 2.10
</return>
</function>

<function name="gtk_file_chooser_get_uri">
<description>
Gets the URI for the currently selected file in
the file selector. If multiple files are selected,
one of the filenames will be returned at random.

If the file chooser is in folder mode, this function returns the selected
folder.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> The currently selected URI, or %NULL
if no file is selected. Free with g_free()

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_scroll_to_cell">
<description>
Moves the alignments of @tree_view to the position specified by @column and
@path.  If @column is %NULL, then no horizontal scrolling occurs.  Likewise,
if @path is %NULL no vertical scrolling occurs.  At a minimum, one of @column
or @path need to be non-%NULL.  @row_align determines where the row is
placed, and @col_align determines where @column is placed.  Both are expected
to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
right/bottom alignment, 0.5 means center.

If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the cell onto the screen.
This means that the cell will be scrolled to the edge closest to its current
position.  If the cell is currently visible on the screen, nothing is done.

This function only works if the model is set, and @path is a valid row on the
model.  If the model changes before the @tree_view is realized, the centered
path will be modified to reflect this change.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path of the row to move to, or %NULL.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to move horizontally to, or %NULL.
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments, or %FALSE.
</parameter_description>
</parameter>
<parameter name="row_align">
<parameter_description> The vertical alignment of the row specified by @path.
</parameter_description>
</parameter>
<parameter name="col_align">
<parameter_description> The horizontal alignment of the column specified by @column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_new">
<description>
Creates a new #GtkTreePath.  This structure refers to a row.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreePath.
</return>
</function>

<function name="gtk_draw_option">
<description>
Draws a radio button indicator in the given rectangle on @window with 
the given parameters.

Deprecated: Use gtk_paint_option() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the option in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_tab_detachable">
<description>
Return Value: TRUE if the tab is detachable.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the tab is detachable.

Since: 2.10
</return>
</function>

<function name="gtk_combo_box_set_row_span_column">
<description>
Sets the column with row span information for @combo_box to be @row_span.
The row span column contains integers which indicate how many rows
an item should span.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox.
</parameter_description>
</parameter>
<parameter name="row_span">
<parameter_description> A column in the model passed during construction.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_set_icon_stock">
<description>
Sets the icon that will be used for drags from a particular source
to a stock icon. 

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the ID of the stock icon to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_custom_tag_end">
<description>
This is called at the end of each custom element handled by 
the buildable.

Since: 2.12

</description>
<parameters>
<parameter name="buildable">
<parameter_description> A #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> #GtkBuilder used to construct this object
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> child object or %NULL for non-child tags
</parameter_description>
</parameter>
<parameter name="tagname">
<parameter_description> name of tag
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data that will be passed in to parser functions
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_toggle_new">
<description>
Creates a new #GtkCellRendererToggle. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the &quot;active&quot; property on the cell renderer to a boolean value
in the model, thus causing the check button to reflect the state of
the model.


</description>
<parameters>
</parameters>
<return> the new cell renderer
</return>
</function>

<function name="gtk_recent_info_get_added">
<description>
Gets the timestamp (seconds from system&apos;s Epoch) when the resource
was added to the recently used resources list.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the number of seconds elapsed from system&apos;s Epoch when
the resource was added to the list, or -1 on failure.

Since: 2.10
</return>
</function>

<function name="gtk_tree_model_filter_convert_child_path_to_path">
<description>
Converts @child_path to a path relative to @filter. That is, @child_path
points to a path in the child model. The rerturned path will point to the
same row in the filtered model. If @child_path isn&apos;t a valid path on the
child model or points to a row which is not visible in @filter, then %NULL
is returned.


</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="child_path">
<parameter_description> A #GtkTreePath to convert.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreePath, or %NULL.

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_new_with_model">
<description>
Creates a new #GtkIconView widget with the model @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> The model.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkIconView widget.

Since: 2.6 
</return>
</function>

<function name="gtk_text_mark_get_buffer">
<description>
Gets the buffer this mark is located inside,
or %NULL if the mark is deleted.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> the mark&apos;s #GtkTextBuffer
</return>
</function>

<function name="gtk_rc_parse_color">
<description>
Parses a color in the &amp;lt;link linkend=&quot;color=format&quot;&amp;gt;format&amp;lt;/link&amp;gt; expected
in a RC file. 

Note that theme engines should use gtk_rc_parse_color_full() in 
order to support symbolic colors.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a pointer to a #GtkColor structure in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %G_TOKEN_NONE if parsing succeeded, otherwise the token
that was expected but not found
</return>
</function>

<function name="gtk_text_layout_get_cursor_visible">
<description>
Return value: if %FALSE, the insertion cursor will not be

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
</parameters>
<return> if %FALSE, the insertion cursor will not be
    shown, even if the text is editable.
</return>
</function>

<function name="gtk_text_buffer_copy_clipboard">
<description>
Copies the currently-selected text to a clipboard.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard object to copy to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_end_user_action">
<description>
Should be paired with a call to gtk_text_buffer_begin_user_action().
See that function for a full explanation.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_child_anchor">
<description>
Inserts a child widget anchor into the text buffer at @iter. The
anchor will be counted as one character in character counts, and
when obtaining the buffer contents as a string, will be represented
by the Unicode &quot;object replacement character&quot; 0xFFFC. Note that the
&quot;slice&quot; variants for obtaining portions of the buffer as a string
include this character for child anchors, but the &quot;text&quot; variants do
not. E.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text(). Consider
gtk_text_buffer_create_child_anchor() as a more convenient
alternative to this function. The buffer will add a reference to
the anchor, so you can unref it after insertion.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location to insert the anchor
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_sentence_ends">
<description>
Calls gtk_text_iter_forward_sentence_end() @count times (or until
gtk_text_iter_forward_sentence_end() returns %FALSE). If @count is
negative, moves backward instead of forward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of sentences to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_spin_button_set_update_policy">
<description>
Sets the update behavior of a spin button. This determines whether the
spin button is always updated or only when a valid value is set.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> a #GtkSpinButtonUpdatePolicy value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_drag_source_drag_data_delete">
<description>
Asks the #GtkTreeDragSource to delete the row at @path, because
it was moved somewhere else via drag-and-drop. Returns %FALSE
if the deletion fails because @path no longer exists, or for
some model-specific reason. Should robustly handle a @path no
longer found in the model!


</description>
<parameters>
<parameter name="drag_source">
<parameter_description> a #GtkTreeDragSource
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row that was being dragged
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row was successfully deleted
</return>
</function>

<function name="gtk_tool_item_get_relief_style">
<description>
Return value: a #GtkReliefStyle indicating the relief style used

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return> a #GtkReliefStyle indicating the relief style used
for @tool_item.

Since: 2.4
</return>
</function>

<function name="gtk_status_icon_get_pixbuf">
<description>
Gets the #GdkPixbuf being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_status_icon_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> the displayed pixbuf, or %NULL if the image is empty.

Since: 2.10
</return>
</function>

<function name="gtk_widget_get_size_request">
<description>
Gets the size request that was explicitly set for the widget using
gtk_widget_set_size_request(). A value of -1 stored in @width or
@height indicates that that dimension has not been set explicitly
and the natural requisition of the widget will be used intead. See
gtk_widget_set_size_request(). To get the size a widget will
actually use, call gtk_widget_size_request() instead of
this function.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_button_get_icon_name">
<description>
Returns: the icon name or %NULL if the tool button has

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
</parameters>
<return> the icon name or %NULL if the tool button has
no themed icon

Since: 2.8
</return>
</function>

<function name="gtk_stock_item_copy">
<description>
Copies a stock item, mostly useful for language bindings and not in applications.


</description>
<parameters>
<parameter name="item">
<parameter_description> a #GtkStockItem
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkStockItem
</return>
</function>

<function name="gtk_icon_view_set_margin">
<description>
Sets the ::margin property which specifies the space 
which is inserted at the top, bottom, left and right 
of the icon view.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_set_default_files">
<description>
Sets the list of files that GTK+ will read at the
end of gtk_init().

</description>
<parameters>
<parameter name="filenames">
<parameter_description> A %NULL-terminated list of filenames.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_interactive">
<description>
Like gtk_text_buffer_insert(), but the insertion will not occur if
@iter is at a non-editable location in the buffer. Usually you
want to prevent insertions at ineditable locations if the insertion
results from a user action (is interactive).

@default_editable indicates the editability of text that doesn&apos;t
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> some UTF-8 text
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text in bytes, or -1
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of buffer
</parameter_description>
</parameter>
</parameters>
<return> whether text was actually inserted
</return>
</function>

<function name="gtk_tree_path_next">
<description>
Moves the @path to point to the next node at the current depth.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_set_accel_path">
<description>
Sets the accel path for this action.  All proxy widgets associated
with the action will have this accel path, so that their
accelerators are consistent.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> the accelerator path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_save">
<description>
Saves current accelerator specifications (accelerator path, key
and modifiers) to @file_name.
The file is written in a format suitable to be read back in by
gtk_accel_map_load().

</description>
<parameters>
<parameter name="file_name">
<parameter_description> the name of the file to contain accelerator specifications,
in the GLib file name encoding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_is_important">
<description>
Return value: %TRUE if @tool_item is considered important.

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tool_item is considered important.

Since: 2.4
</return>
</function>

<function name="gtk_icon_factory_add_default">
<description>
Adds an icon factory to the list of icon factories searched by
gtk_style_lookup_icon_set(). This means that, for example,
gtk_image_new_from_stock() will be able to find icons in @factory.
There will normally be an icon factory added for each library or
application that comes with icons. The default icon factories
can be overridden by themes.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_label">
<description>
Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup. (See
gtk_label_get_text()).


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the text of the label widget. This string is
owned by the widget and must not be modified or freed.
</return>
</function>

<function name="gtk_recent_action_set_show_numbers">
<description>
Sets whether a number should be added to the items shown by the
widgets representing @action. The numbers are shown to provide
a unique character for a mnemonic to be used inside the menu item&apos;s
label. Only the first ten items get a number to avoid clashes.

Since: 2.12

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkRecentAction
</parameter_description>
</parameter>
<parameter name="show_numbers">
<parameter_description> %TRUE if the shown items should be numbered
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_nth_page">
<description>
Return value: the child widget, or %NULL if @page_num is

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> the index of a page in the notebook, or -1
to get the last page.
</parameter_description>
</parameter>
</parameters>
<return> the child widget, or %NULL if @page_num is
out of bounds.
</return>
</function>

<function name="gtk_text_view_get_right_margin">
<description>
Gets the default right margin for text in @text_view. Tags
in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> right margin in pixels
</return>
</function>

<function name="gtk_layout_get_hadjustment">
<description>
This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the horizontal scrollbar and @layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return> horizontal scroll adjustment
</return>
</function>

<function name="gtk_print_settings_set_print_pages">
<description>
Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="pages">
<parameter_description> a #GtkPrintPages value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_unselect_path">
<description>
Unselects the row at @path.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be unselected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_style">
<description>
Modifies style values on the widget. Modifications made using this
technique take precedence over style values set via an RC file,
however, they will be overriden if a style is explicitely set on
the widget using gtk_widget_set_style(). The #GtkRcStyle structure
is designed so each field can either be set or unset, so it is
possible, using this function, to modify some style values and
leave the others unchanged.

Note that modifications made with this function are not cumulative
with previous calls to gtk_widget_modify_style() or with such
functions as gtk_widget_modify_fg(). If you wish to retain
previous values, you must first call gtk_widget_get_modifier_style(),
make your modifications to the returned style, then call
gtk_widget_modify_style() with that style. On the other hand,
if you first call gtk_widget_modify_style(), subsequent calls
to such functions gtk_widget_modify_fg() will have a cumulative
effect with the initial modifications.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> the #GtkRcStyle holding the style modifications
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_new">
<description>
Creates a new #GtkNotebook widget with no pages.


</description>
<parameters>
</parameters>
<return> the newly created #GtkNotebook
</return>
</function>

<function name="gtk_tree_view_set_cursor">
<description>
Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user&apos;s attention on a particular row.  If
@focus_column is not %NULL, then focus is given to the column specified by 
it. Additionally, if @focus_column is specified, and @start_editing is 
%TRUE, then editing should be started in the specified cell.  
This function is often followed by @gtk_widget_grab_focus (@tree_view) 
in order to give keyboard focus to the widget.  Please note that editing 
can only happen when the widget is realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
<parameter name="focus_column">
<parameter_description> A #GtkTreeViewColumn, or %NULL
</parameter_description>
</parameter>
<parameter name="start_editing">
<parameter_description> %TRUE if the specified cell should start being edited.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_icon_factory_list_ids">
<description>
Gets all known IDs stored in an existing icon factory.
The strings in the returned list aren&apos;t copied.
The list itself should be freed.


</description>
<parameters>
</parameters>
<return> List of ids in icon factories
</return>
</function>

<function name="gtk_invisible_set_screen">
<description>
Sets the #GdkScreen where the #GtkInvisible object will be displayed.

Since: 2.2

</description>
<parameters>
<parameter name="invisible">
<parameter_description> a #GtkInvisible.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_set_draw_as_radio">
<description>
Sets whether @check_menu_item is drawn like a #GtkRadioMenuItem

Since: 2.4

</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
<parameter name="draw_as_radio">
<parameter_description> whether @check_menu_item is drawn like a #GtkRadioMenuItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_layout_set_attributes">
<description>
Sets the attributes in list as the attributes of @cell_layout. The
attributes should be in attribute/column order, as in
gtk_cell_layout_add_attribute(). All existing attributes are removed, and
replaced with the new attributes.

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_translate_coordinates">
<description>
Translate coordinates relative to @src_widget&apos;s allocation to coordinates
relative to @dest_widget&apos;s allocations. In order to perform this
operation, both widgets must be realized, and must share a common
toplevel.


</description>
<parameters>
<parameter name="src_widget">
<parameter_description>  a #GtkWidget
</parameter_description>
</parameter>
<parameter name="dest_widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> X position relative to @src_widget
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Y position relative to @src_widget
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> location to store X position relative to @dest_widget
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> location to store Y position relative to @dest_widget
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if either widget was not realized, or there
was no common ancestor. In this case, nothing is stored in
*@dest_x and *@dest_y. Otherwise %TRUE.
</return>
</function>

<function name="gtk_text_buffer_get_line_count">
<description>
Obtains the number of lines in the buffer. This value is cached, so
the function is very fast.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> number of lines in the buffer
</return>
</function>

<function name="gtk_file_chooser_set_filename">
<description>
Sets @filename as the current filename for the file chooser, by changing
to the file&apos;s parent folder and actually selecting the file in list.  If
the @chooser is in #GTK_FILE_CHOOSER_ACTION_SAVE mode, the file&apos;s base name
will also appear in the dialog&apos;s file name entry.

If the file name isn&apos;t in the current folder of @chooser, then the current
folder of @chooser will be changed to the folder containing @filename. This
is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
gtk_file_chooser_select_filename().

Note that the file must exist, or nothing will be done except
for the directory change.

If you are implementing a &amp;lt;guimenuitem&amp;gt;File/Save As...&amp;lt;/guimenuitem&amp;gt; dialog, you
should use this function if you already have a file name to which the user may save; for example,
when the user opens an existing file and then does &amp;lt;guimenuitem&amp;gt;File/Save As...&amp;lt;/guimenuitem&amp;gt;
on it.  If you don&apos;t have a file name already &amp;mdash; for example, if the user just created
a new file and is saving it for the first time, do not call this function.  Instead, use
something similar to this:

&amp;lt;programlisting&amp;gt;
if (document_is_new)
{
/&amp;lt;!-- --&amp;gt;* the user just created a new document *&amp;lt;!-- --&amp;gt;/
gtk_file_chooser_set_current_folder (chooser, default_folder_for_saving);
gtk_file_chooser_set_current_name (chooser, &quot;Untitled document&quot;);
}
else
{
/&amp;lt;!-- --&amp;gt;* the user edited an existing document *&amp;lt;!-- --&amp;gt;/ 
gtk_file_chooser_set_filename (chooser, existing_filename);
}
&amp;lt;/programlisting&amp;gt;


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the filename to set as current
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if both the folder could be changed and the file was
selected successfully, %FALSE otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_forward_chars">
<description>
Moves @count characters if possible (if @count would move past the
start or end of the buffer, moves to the start or end of the
buffer). The return value indicates whether the new position of
@iter is different from its original position, and dereferenceable
(the last iterator in the buffer is not dereferenceable). If @count
is 0, the function does nothing and returns %FALSE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of characters to move, may be negative
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_link_button_new">
<description>
Creates a new #GtkLinkButton with the URI as its text.


</description>
<parameters>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
</parameters>
<return> a new link button widget.

Since: 2.10
</return>
</function>

<function name="gtk_label_set_width_chars">
<description>
Sets the desired width in characters of @label to @n_chars.

Since: 2.6

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the new desired width, in characters.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_new">
<description>
Create a new empty #GtkSocket.


</description>
<parameters>
</parameters>
<return>  the new #GtkSocket.
</return>
</function>

<function name="gtk_handle_box_get_snap_edge">
<description>
Gets the edge used for determining reattachment of the handle box. See
gtk_handle_box_set_snap_edge().


</description>
<parameters>
<parameter name="handle_box">
<parameter_description> a #GtkHandleBox
</parameter_description>
</parameter>
</parameters>
<return> the edge used for determining reattachment, or (GtkPositionType)-1 if this
is determined (as per default) from the handle position. 
</return>
</function>

<function name="gtk_tree_view_set_destroy_count_func">
<description>
This function should almost never be used.  It is meant for private use by
ATK for determining the number of visible children that are removed when the
user collapses a row, or a row is deleted.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> Function to be called when a view row is destroyed, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to be passed to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier for @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_justify">
<description>
Sets the alignment of the lines in the text of the label relative to
each other. %GTK_JUSTIFY_LEFT is the default value when the
widget is first created with gtk_label_new(). If you instead want
to set the alignment of the label as a whole, use
gtk_misc_set_alignment() instead. gtk_label_set_justify() has no
effect on labels containing only a single line.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="jtype">
<parameter_description> a #GtkJustification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_double">
<description>
Sets @key to a double value.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key 
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a double value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_add_radio_actions_full">
<description>
This variant of gtk_action_group_add_radio_actions() adds a 
#GDestroyNotify callback for @user_data. 

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of radio action descriptions
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the number of entries
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the action to activate initially, or -1 if
no action should be activated
</parameter_description>
</parameter>
<parameter name="on_change">
<parameter_description> the callback to connect to the changed signal
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the action callbacks
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notification callback for @user_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_new_text">
<description>
Convenience function which constructs a new text combo box, which is a
#GtkComboBox just displaying strings. If you use this function to create
a text combo box, you should only manipulate its data source with the
following convenience functions: gtk_combo_box_append_text(),
gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and
gtk_combo_box_remove_text().


</description>
<parameters>
</parameters>
<return> A new text combo box.

Since: 2.4
</return>
</function>

<function name="gtk_tree_row_reference_valid">
<description>
Return value: %TRUE if @reference points to a valid path.

</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @reference points to a valid path.
</return>
</function>

<function name="gtk_text_iter_forward_visible_cursor_positions">
<description>
Moves up to @count visible cursor positions. See
gtk_text_iter_forward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of positions to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable

Since: 2.4
</return>
</function>

<function name="gtk_text_view_set_wrap_mode">
<description>
Sets the line wrapping for the view.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="wrap_mode">
<parameter_description> a #GtkWrapMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_info_load_icon">
<description>
Renders an icon previously looked up in an icon theme using
gtk_icon_theme_lookup_icon(); the size will be based on the size
passed to gtk_icon_theme_lookup_icon(). Note that the resulting
pixbuf may not be exactly this size; an icon theme may have icons
that differ slightly from their nominal sizes, and in addition GTK+
will avoid scaling icons that it considers sufficiently close to the
requested size or for which the source image would have to be scaled
up too far. (This maintains sharpness.) 


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo structure from gtk_icon_theme_lookup_icon()
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error information on failure, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the rendered icon; this may be a newly created icon
or a new reference to an internal icon, so you must not modify
the icon. Use g_object_unref() to release your reference to the
icon.

Since: 2.4
</return>
</function>

<function name="gtk_text_layout_set_keyboard_direction">
<description>
Sets the keyboard direction; this is used as for the bidirectional
base direction for the line with the cursor if the line contains
only neutral characters.

</description>
<parameters>
<parameter name="keyboard_dir">
<parameter_description> the current direction of the keyboard.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_style">
<description>
Sets the #GtkStyle for a widget (@widget-&amp;gt;style). You probably don&apos;t
want to use this function; it interacts badly with themes, because
themes work by replacing the #GtkStyle. Instead, use
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> a #GtkStyle, or %NULL to remove the effect of a previous
gtk_widget_set_style() and go back to the default style
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_get_selected_rows">
<description>
Creates a list of path of all selected rows. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReference&amp;lt;!-- --&amp;gt;s.
To do this, you can use gtk_tree_row_reference_new().

To free the return value, use:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
g_list_foreach (list, gtk_tree_path_free, NULL);
g_list_free (list);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A pointer to set to the #GtkTreeModel, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GList containing a #GtkTreePath for each selected row.

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_insert_column_with_attributes">
<description>
Creates a new #GtkTreeViewColumn and inserts it into the @tree_view at
@position.  If @position is -1, then the newly created column is inserted at
the end.  The column is initialized with the attributes given. If @tree_view
has &quot;fixed_height&quot; mode enabled, then the new column will have its sizing
property set to be GTK_TREE_VIEW_COLUMN_FIXED.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position to insert the new column in.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> The title to set the header to.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after insertion.
</return>
</function>

<function name="GtkWindow">
<description>
The requested opacity of the window. See gtk_window_set_opacity() for
more details about window opacity.

Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_lookup">
<description>
Look up a named tag.


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable 
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a tag
</parameter_description>
</parameter>
</parameters>
<return> The tag, or %NULL if none by that name is in the table.
</return>
</function>

<function name="gtk_accel_group_disconnect">
<description>
Removes an accelerator previously installed through
gtk_accel_group_connect().

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> the accelerator group to remove an accelerator from
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description>     the closure to remove from this accelerator group
</parameter_description>
</parameter>
</parameters>
<return>     %TRUE if the closure was found and got disconnected
</return>
</function>

<function name="gtk_paned_get_child1">
<description>
Obtains the first child of the paned widget.


</description>
<parameters>
<parameter name="paned">
<parameter_description> a #GtkPaned widget
</parameter_description>
</parameter>
</parameters>
<return> first child, or %NULL if it is not set.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_column_set_max_width">
<description>
Sets the maximum width of the @tree_column.  If @max_width is -1, then the
maximum width is unset.  Note, the column can actually be wider than max
width if it&apos;s the last column in a view.  In this case, the column expands to
fill any extra space.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> The maximum width of the column in pixels, or -1.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_child_anchor_get_deleted">
<description>
Determines whether a child anchor has been deleted from
the buffer. Keep in mind that the child anchor will be
unreferenced when removed from the buffer, so you need to
hold your own reference (with g_object_ref()) if you plan
to use this function &amp;mdash; otherwise all deleted child anchors
will also be finalized.


</description>
<parameters>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the child anchor has been deleted from its buffer
</return>
</function>

<function name="gtk_file_chooser_get_current_folder">
<description>
Gets the current folder of @chooser as a local filename.
See gtk_file_chooser_set_current_folder().

Note that this is the folder that the file chooser is currently displaying
(e.g. &quot;/home/username/Documents&quot;), which is &amp;lt;emphasis&amp;gt;not the same&amp;lt;/emphasis&amp;gt;
as the currently-selected folder if the chooser is in
#GTK_FILE_CHOOSER_SELECT_FOLDER mode
(e.g. &quot;/home/username/Documents/selected-folder/&quot;.  To get the
currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
usual way to get the selection.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the full path of the current folder, or %NULL if the current
path cannot be represented as a local filename.  Free with g_free().  This
function will also return %NULL if the file chooser was unable to load the
last folder that was requested from it; for example, as would be for calling
gtk_file_chooser_set_current_folder() on a nonexistent folder.

Since: 2.4
</return>
</function>

<function name="GtkWidget">
<description>
The &quot;scroll-arrow-vlength&quot; style property defines the length of 
vertical scroll arrows.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="GtkNotebook">
<description>
The ::create-window signal is emitted when a detachable
tab is dropped on the root window. 

A handler for this signal can create a window containing 
a notebook where the tab will be attached. It is also 
responsible for moving/resizing the window and adding the 
necessary properties to the notebook (e.g. the 
#GtkNotebook:group-id ).

The default handler uses the global window creation hook,
if one has been set with gtk_notebook_set_window_creation_hook().


</description>
<parameters>
<parameter name="notebook">
<parameter_description> the #GtkNotebook emitting the signal
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> the tab of @notebook that is being detached
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate where the drop happens
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate where the drop happens
</parameter_description>
</parameter>
</parameters>
<return> a #GtkNotebook that @page should be added to, or %NULL.

Since: 2.12
</return>
</function>

<function name="gtk_im_context_set_surrounding">
<description>
Sets surrounding context around the insertion point and preedit
string. This function is expected to be called in response to the
GtkIMContext::retrieve_surrounding signal, and will likely have no
effect if called at other times.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext 
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text surrounding the insertion point, as UTF-8.
the preedit string should not be included within
@text.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @text, or -1 if @text is nul-terminated
</parameter_description>
</parameter>
<parameter name="cursor_index">
<parameter_description> the byte index of the insertion cursor within @text.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_remove_item">
<description>
Removes a resource pointed by @uri from the recently used resources
list handled by a recent manager.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI of the item you wish to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item pointed by @uri has been successfully
removed by the recently used resources list, and %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_accel_map_load_scanner">
<description>
#GScanner variant of gtk_accel_map_load().

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner which has already been provided with an input file
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_drag_dest_row">
<description>
Gets information about the row that is highlighted for feedback.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> Return location for the path of the highlighted row, or %NULL.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> Return location for the drop position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_visible_word_ends">
<description>
Calls gtk_text_iter_forward_visible_word_end() up to @count times.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of times to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 

Since: 2.4
</return>
</function>

<function name="gtk_print_context_create_pango_context">
<description>
Creates a new #PangoContext that can be used with the
#GtkPrintContext.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext 
</parameter_description>
</parameter>
</parameters>
<return> a new Pango context for @context

Since: 2.10
</return>
</function>

<function name="gtk_file_chooser_get_local_only">
<description>
Gets whether only local files can be selected in the
file selector. See gtk_file_chooser_set_local_only()


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChoosre
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if only local files can be selected.

Since: 2.4
</return>
</function>

<function name="gtk_print_operation_preview_end_preview">
<description>
Ends a preview. 

This function must be called to finish a custom print preview.

Since: 2.10

</description>
<parameters>
<parameter name="preview">
<parameter_description> a #GtkPrintOperationPreview
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_local_only">
<description>
Sets whether only local files can be selected in the
file selector. If @local_only is %TRUE (the default),
then the selected file are files are guaranteed to be
accessible through the operating systems native file
file system and therefore the application only
needs to worry about the filename functions in
#GtkFileChooser, like gtk_file_chooser_get_filename(),
rather than the URI functions like
gtk_file_chooser_get_uri(),

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="local_only">
<parameter_description> %TRUE if only local files can be selected
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_filter_add_pixbuf_formats">
<description>
Adds a rule allowing image files in the formats supported
by GdkPixbuf.

Since: 2.6

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_set_size">
<description>
Sets the size of the scrollable area of the layout.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of entire scrollable area
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of entire scrollable area
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_append_page_menu">
<description>
Appends a page to @notebook, specifying the widget to use as the
label in the popup menu.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu, if that is enabled. If %NULL, and @tab_label
is a #GtkLabel or %NULL, then the menu label will be
a newly created label with the same text as @tab_label;
If @tab_label is not a #GtkLabel, @menu_label must be
specified if the page-switch menu is to be used.
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the appended
page in the notebook, or -1 if function fails
</return>
</function>

<function name="gtk_printer_get_name">
<description>
Return value: the name of @printer

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the name of @printer

Since: 2.10
</return>
</function>

<function name="gtk_image_new_from_pixbuf">
<description>
Creates a new #GtkImage displaying @pixbuf.
The #GtkImage does not assume a reference to the
pixbuf; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.

Note that this function just creates an #GtkImage from the pixbuf. The
#GtkImage created will not react to state changes. Should you want that, 
you should use gtk_image_new_from_icon_set().


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="spin_button_get_shadow_type">
<description>
Convenience function to Get the shadow type from the underlying widget&apos;s
style.


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
</parameters>
<return> the #GtkShadowType
</return>
</function>

<function name="gtk_notebook_set_show_border">
<description>
Sets whether a bevel will be drawn around the notebook pages.
This only has a visual effect when the tabs are not shown.
See gtk_notebook_set_show_tabs().

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="show_border">
<parameter_description> %TRUE if a bevel should be drawn around the notebook.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_retrieve_proxy_menu_item">
<description>
Return value: The #GtkMenuItem that is going to appear in the

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return> The #GtkMenuItem that is going to appear in the
overflow menu for @tool_item.

Since: 2.4
</return>
</function>

<function name="gtk_ruler_get_range">
<description>
Retrieves values indicating the range and current position of a #GtkRuler.
See gtk_ruler_set_range().

</description>
<parameters>
<parameter name="ruler">
<parameter_description> a #GtkRuler
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> location to store lower limit of the ruler, or %NULL
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> location to store upper limit of the ruler, or %NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> location to store the current position of the mark on the ruler, or %NULL
</parameter_description>
</parameter>
<parameter name="max_size">
<parameter_description> location to store the maximum size of the ruler used when calculating
the space to leave for the text, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_is_focus">
<description>
Determines if the widget is the focus widget within its
toplevel. (This does not mean that the %HAS_FOCUS flag is
necessarily set; %HAS_FOCUS will only be set if the
toplevel widget additionally has the global input focus.)


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget is the focus widget.
</return>
</function>

<function name="gtk_tree_view_expand_to_path">
<description>
Expands the row at @path. This will also expand all parent rows of
@path as necessary.

Since: 2.2

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path to a row.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_toggles_tag">
<description>
This is equivalent to (gtk_text_iter_begins_tag () ||
gtk_text_iter_ends_tag ()), i.e. it tells you whether a range with
@tag applied to it begins &amp;lt;emphasis&amp;gt;or&amp;lt;/emphasis&amp;gt; ends at @iter.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @tag is toggled on or off at @iter
</return>
</function>

<function name="gtk_tree_view_get_column">
<description>
Gets the #GtkTreeViewColumn at the given position in the #tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> The position of the column, counting from 0.
</parameter_description>
</parameter>
</parameters>
<return> The #GtkTreeViewColumn, or %NULL if the position is outside the
range of columns.
</return>
</function>

<function name="gtk_assistant_set_forward_page_func">
<description>
Sets the page forwarding function to be @page_func, this function will
be used to determine what will be the next page when the user presses
the forward button. Setting @page_func to %NULL will make the assistant
to use the default forward function, which just goes to the next visible 
page.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page_func">
<parameter_description> the #GtkAssistantPageFunc, or %NULL to use the default one
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data for @page_func
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notifier for @data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_get_name">
<description>
Gets the name of the action group.


</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
</parameters>
<return> the name of the action group.

Since: 2.4
</return>
</function>

<function name="gtk_radio_action_get_group">
<description>
Returns: the list representing the radio group for this object

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> the list representing the radio group for this object

Since: 2.4
</return>
</function>

<function name="gtk_widget_ref">
<description>
Adds a reference to a widget. This function is exactly the same
as calling g_object_ref(), and exists mostly for historical
reasons. It can still be convenient to avoid casting a widget
to a #GObject, it saves a small amount of typing.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the widget that was referenced

Deprecated:2.12: Use g_object_ref() instead.
</return>
</function>

<function name="gtk_tree_store_append">
<description>
Appends a new row to @tree_store.  If @parent is non-%NULL, then it will append the
new row after the last child of @parent, otherwise it will append a row to
the top level.  @iter will be changed to point to this new row.  The row will
be empty after this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the appended row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_set_use_markup">
<description>
Sets whether the text of the label contains markup in &amp;lt;link
linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango&apos;s text markup
language&amp;lt;/link&amp;gt;. See gtk_label_set_markup().

Since: 2.4

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
<parameter name="use_markup">
<parameter_description> %TRUE if the label&apos;s text should be parsed for markup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_vscale_new_with_range">
<description>
Creates a new vertical scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it&apos;s the distance the
slider moves when using the arrow keys to adjust the scale value.

Note that the way in which the precision is derived works best if @step 
is a power of ten. If the resulting precision is not suitable for your 
needs, use gtk_scale_set_digits() to correct it. 


</description>
<parameters>
<parameter name="min">
<parameter_description> minimum value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum value
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> step increment (tick size) used with keyboard shortcuts
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkVScale
</return>
</function>

<function name="gtk_menu_item_set_right_justified">
<description>
Sets whether the menu item appears justified at the right
side of a menu bar. This was traditionally done for &quot;Help&quot; menu
items, but is now considered a bad idea. (If the widget
layout is reversed for a right-to-left language like Hebrew
or Arabic, right-justified-menu-items appear at the left.)

</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem.
</parameter_description>
</parameter>
<parameter name="right_justified">
<parameter_description> if %TRUE the menu item will appear at the 
far right if added to a menu bar.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_unregister_deserialize_format">
<description>
This function unregisters a rich text format that was previously
registered using gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset().

Since: 2.10

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GdkAtom representing a registered rich text format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_show">
<description>
Flags a widget to be displayed. Any widget that isn&apos;t shown will
not appear on the screen. If you want to show all the widgets in a
container, it&apos;s easier to call gtk_widget_show_all() on the
container, instead of individually showing the widgets.

Remember that you have to show the containers containing a widget,
in addition to the widget itself, before it will appear onscreen.

When a toplevel container is shown, it is immediately realized and
mapped; other shown widgets are realized and mapped when their
toplevel container is realized and mapped.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_completion">
<description>
Return value: The auxiliary completion object currently in use by @entry.

</description>
<parameters>
<parameter name="entry">
<parameter_description> A #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> The auxiliary completion object currently in use by @entry.

Since: 2.4
</return>
</function>

<function name="gtk_recent_manager_add_item">
<description>
Adds a new resource, pointed by @uri, into the recently used
resources list.

This function automatically retrieving some of the needed
metadata and setting other metadata to common default values; it
then feeds the data to gtk_recent_manager_add_full().

See gtk_recent_manager_add_full() if you want to explicitely
define the metadata for the resource pointed by @uri.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the new item was successfully added
to the recently used resources list

Since: 2.10
</return>
</function>

<function name="gtk_file_selection_get_selections">
<description>
Retrieves the list of file selections the user has made in the dialog box.
This function is intended for use when the user can select multiple files
in the file list. 

The filenames are in the GLib file name encoding. To convert to
UTF-8, call g_filename_to_utf8() on each string.


</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated %NULL-terminated array of strings. Use
g_strfreev() to free it.
</return>
</function>

<function name="gtk_drag_check_threshold">
<description>
Checks to see if a mouse drag starting at (@start_x, @start_y) and ending
at (@current_x, @current_y) has passed the GTK+ drag threshold, and thus
should trigger the beginning of a drag-and-drop operation.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="start_x">
<parameter_description> X coordinate of start of drag
</parameter_description>
</parameter>
<parameter name="start_y">
<parameter_description> Y coordinate of start of drag
</parameter_description>
</parameter>
<parameter name="current_x">
<parameter_description> current X coordinate
</parameter_description>
</parameter>
<parameter name="current_y">
<parameter_description> current Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drag threshold has been passed.
</return>
</function>

<function name="gtk_label_set_line_wrap_mode">
<description>
If line wrapping is on (see gtk_label_set_line_wrap()) this controls how
the line wrapping is done. The default is %PANGO_WRAP_WORD which means
wrap on word boundaries.

Since: 2.10

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="wrap_mode">
<parameter_description> the line wrapping mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_new">
<description>
Creates a new #GtkAboutDialog.


</description>
<parameters>
</parameters>
<return> a newly created #GtkAboutDialog

Since: 2.6
</return>
</function>

<function name="gtk_text_view_get_line_yrange">
<description>
Gets the y coordinate of the top of the line containing @iter,
and the height of the line. The coordinate is a buffer coordinate;
convert to window coordinates with gtk_text_view_buffer_to_window_coords().

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for a y coordinate
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for a height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_single_line_mode">
<description>
Return value: %TRUE when the label is in single line mode.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE when the label is in single line mode.

Since: 2.6
</return>
</function>

<function name="gtk_tree_view_column_pack_end">
<description>
Adds the @cell to end of the column. If @expand is %FALSE, then the @cell
is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is %TRUE.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer. 
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if @cell is to be given extra space allocated to @tree_column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_label">
<description>
Sets the text of the label. The label is interpreted as
including embedded underlines and/or Pango markup depending
on the values of the #GtkLabel:use-underline&quot; and
#GtkLabel:use-markup properties.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the new text to set for the label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_accepts_tab">
<description>
Sets the behavior of the text widget when the Tab key is pressed. 
If @accepts_tab is %TRUE, a tab character is inserted. If @accepts_tab 
is %FALSE the keyboard focus is moved to the next widget in the focus 
chain.

Since: 2.4

</description>
<parameters>
<parameter name="text_view">
<parameter_description> A #GtkTextView
</parameter_description>
</parameter>
<parameter name="accepts_tab">
<parameter_description> %TRUE if pressing the Tab key should insert a tab 
character, %FALSE, if pressing the Tab key should move the 
keyboard focus.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_short_name">
<description>
Computes a valid UTF-8 string that can be used as the name of the item in a
menu or list.  For example, calling this function on an item that refers to
&quot;file:///foo/bar.txt&quot; will yield &quot;bar.txt&quot;.


</description>
<parameters>
<parameter name="info">
<parameter_description> an #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string in UTF-8 encoding; free it with
g_free().

Since: 2.10
</return>
</function>

<function name="gtk_recent_chooser_set_sort_func">
<description>
Sets the comparison function used when sorting to be @sort_func.  If
the @chooser has the sort type set to #GTK_RECENT_SORT_CUSTOM then
the chooser will sort using this function.

To the comparison function will be passed two #GtkRecentInfo structs and
@sort_data;  @sort_func should return a positive integer if the first
item comes before the second, zero if the two items are equal and
a negative integer if the first item comes after the second.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="sort_func">
<parameter_description> the comparison function
</parameter_description>
</parameter>
<parameter name="sort_data">
<parameter_description> user data to pass to @sort_func, or %NULL
</parameter_description>
</parameter>
<parameter name="data_destroy">
<parameter_description> destroy notifier for @sort_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_get">
<description>
Gets the singleton global #GtkAccelMap object. This object
is useful only for notification of changes to the accelerator
map via the ::changed signal; it isn&apos;t a parameter to the
other accelerator map functions.


</description>
<parameters>
</parameters>
<return> the global #GtkAccelMap object

Since: 2.4
</return>
</function>

<function name="gtk_toolbar_prepend_element">
<description>
Adds a new element to the beginning of a toolbar.

If @type == %GTK_TOOLBAR_CHILD_WIDGET, @widget is used as the new element.
If @type == %GTK_TOOLBAR_CHILD_RADIOBUTTON, @widget is used to determine
the radio group for the new element. In all other cases, @widget must
be %NULL.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a value of type #GtkToolbarChildType that determines what @widget will be.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget, or %NULL
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the element&apos;s label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that provides pictorial representation of the element&apos;s function.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> any data you wish to pass to the callback.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar element as a #GtkWidget.
</return>
</function>

<function name="gtk_tree_model_get_valist">
<description>
See gtk_tree_model_get(), this version takes a &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; 
for language bindings to use.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a row in @tree_model
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; of column/return location pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_unmark_day">
<description>
Removes the visual marker from a particular day.


</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar.
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day number to unmark between 1 and 31.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, always
</return>
</function>

<function name="gtk_label_set_markup_with_mnemonic">
<description>
Parses @str which is marked up with the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;,
setting the label&apos;s text and attribute list based on the parse results.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.

The mnemonic key can be used to activate another widget, chosen 
automatically, or explicitly using gtk_label_set_mnemonic_widget().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a markup string (see &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_get_line_yrange">
<description>
Find the range of y coordinates for the paragraph containing
the given iter.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>      location to store the top of the paragraph in pixels,
or %NULL.
@height  location to store the height of the paragraph in pixels,
or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_url_hook">
<description>
Installs a global function to be called whenever the user activates a
URL link in an about dialog.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call when a URL link is activated.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> #GDestroyNotify for @data
</parameter_description>
</parameter>
</parameters>
<return> the previous URL hook.

Since: 2.6
</return>
</function>

<function name="gtk_builder_get_object">
<description>
Gets the object named @name. Note that this function does not
increment the reference count of the returned object. 


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of object to get
</parameter_description>
</parameter>
</parameters>
<return> the object named @name or %NULL if it could not be 
found in the object tree. 

Since: 2.12
</return>
</function>

<function name="gtk_status_icon_get_stock">
<description>
Gets the id of the stock icon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_status_icon_get_storage_type()).
The returned string is owned by the #GtkStatusIcon and should not
be freed or modified.


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> stock id of the displayed stock icon,
or %NULL if the image is empty.

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_scroll_to_path">
<description>
Moves the alignments of @icon_view to the position specified by @path.  
@row_align determines where the row is placed, and @col_align determines 
where @column is placed.  Both are expected to be between 0.0 and 1.0. 
0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means 
center.

If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the item onto the screen.
This means that the item will be scrolled to the edge closest to its current
position.  If the item is currently visible on the screen, nothing is done.

This function only works if the model is set, and @path is a valid row on 
the model. If the model changes before the @icon_view is realized, the 
centered path will be modified to reflect this change.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path of the item to move to.
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments, or %FALSE.
</parameter_description>
</parameter>
<parameter name="row_align">
<parameter_description> The vertical alignment of the item specified by @path.
</parameter_description>
</parameter>
<parameter name="col_align">
<parameter_description> The horizontal alignment of the item specified by @path.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_add_image_targets">
<description>
Add the image targets supported by #GtkSelection to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_image_targets() and
gtk_drag_dest_set_target_list().

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_remove_mnemonic_label">
<description>
Removes a widget from the list of mnemonic labels for
this widget. (See gtk_widget_list_mnemonic_labels()). The widget
must have previously been added to the list with
gtk_widget_add_mnemonic_label().

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a #GtkWidget that was previously set as a mnemnic label for
@widget with gtk_widget_add_mnemonic_label().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_add_uri_targets">
<description>
Add the URI targets supported by #GtkSelection to
the target list of the drag source.  The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_uri_targets() and
gtk_drag_source_set_target_list().

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s is a drag source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_get">
<description>
Gets the values of one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_prop_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of property names and #GValue*, 
starting with @first_prop_name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_set_use_underline">
<description>
If true, an underline in the text of the button label indicates
the next character should be used for the mnemonic accelerator key.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> %TRUE if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_reorder_child">
<description>
Moves @child to a new @position in the list of @box children.  
The list is the &amp;lt;structfield&amp;gt;children&amp;lt;/structfield&amp;gt; field of
#GtkBox-struct, and contains both widgets packed #GTK_PACK_START 
as well as widgets packed #GTK_PACK_END, in the order that these 
widgets were added to @box.

A widget&apos;s position in the @box children list determines where 
the widget is packed into @box.  A child widget at some position 
in the list will be packed just after all other widgets of the 
same packing type that appear earlier in the list.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to move
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the new position for @child in the list of children 
of @box, starting from 0. If negative, indicates the end of 
the list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_get_show_style">
<description>
Return value: whether the font style will be shown in the label.

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
</parameters>
<return> whether the font style will be shown in the label.

Since: 2.4
</return>
</function>

<function name="gtk_recent_manager_new">
<description>
Creates a new recent manager object.  Recent manager objects are used to
handle the list of recently used resources.  A #GtkRecentManager object
monitors the recently used resources list, and emits the &quot;changed&quot; signal
each time something inside the list changes.

#GtkRecentManager objects are expensive: be sure to create them only when
needed. You should use gtk_recent_manager_get_default() instead.


</description>
<parameters>
</parameters>
<return> A newly created #GtkRecentManager object.

Since: 2.10
</return>
</function>

<function name="gtk_menu_tool_button_set_menu">
<description>
Sets the #GtkMenu that is popped up when the user clicks on the arrow.
If @menu is NULL, the arrow button becomes insensitive.

Since: 2.6

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkMenuToolButton
</parameter_description>
</parameter>
<parameter name="menu">
<parameter_description> the #GtkMenu associated with #GtkMenuToolButton
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_new_from_indices">
<description>
Creates a new path with @first_index and @varargs as indices.


</description>
<parameters>
<parameter name="first_index">
<parameter_description> first integer
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> list of integers terminated by -1
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreePath.

Since: 2.2
</return>
</function>

<function name="gtk_text_tag_event">
<description>
Emits the &quot;event&quot; signal on the #GtkTextTag.


</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="event_object">
<parameter_description> object that received the event, such as a widget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the event
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location where the event was received
</parameter_description>
</parameter>
</parameters>
<return> result of signal emission (whether the event was handled)
</return>
</function>

<function name="gtk_text_buffer_create_mark">
<description>
Creates a mark at position @where. If @mark_name is %NULL, the mark
is anonymous; otherwise, the mark can be retrieved by name using
gtk_text_buffer_get_mark(). If a mark has left gravity, and text is
inserted at the mark&apos;s current location, the mark will be moved to
the left of the newly-inserted text. If the mark has right gravity
(@left_gravity = %FALSE), the mark will end up on the right of
newly-inserted text. The standard left-to-right cursor is a mark
with right gravity (when you type, the cursor stays on the right
side of the text you&apos;re typing).

The caller of this function does &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; own a 
reference to the returned #GtkTextMark, so you can ignore the 
return value if you like. Marks are owned by the buffer and go 
away when the buffer does.

Emits the &quot;mark_set&quot; signal as notification of the mark&apos;s initial
placement.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark_name">
<parameter_description> name for mark, or %NULL
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> location to place mark
</parameter_description>
</parameter>
<parameter name="left_gravity">
<parameter_description> whether the mark has left gravity
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkTextMark object
</return>
</function>

<function name="gtk_frame_set_label_align">
<description>
Sets the alignment of the frame widget&apos;s label. The
default values for a newly created frame are 0.0 and 0.5.

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> The position of the label along the top edge
of the widget. A value of 0.0 represents left alignment;
1.0 represents right alignment.
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> The y alignment of the label. A value of 0.0 aligns under 
the frame; 1.0 aligns above the frame. If the values are exactly
0.0 or 1.0 the gap in the frame won&apos;t be painted because the label
will be completely above or below the frame.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_get_inconsistent">
<description>
Retrieves the value set by gtk_check_menu_item_set_inconsistent().


</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if inconsistent
</return>
</function>

<function name="gtk_spin_button_get_snap_to_ticks">
<description>
Return value: %TRUE if values are snapped to the nearest step.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if values are snapped to the nearest step.
</return>
</function>

<function name="gtk_print_settings_get_reverse">
<description>
Gets the value of %GTK_PRINT_SETTINGS_REVERSE.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> whether to reverse the order of the printed pages

Since: 2.10
</return>
</function>

<function name="gtk_text_view_set_buffer">
<description>
Sets @buffer as the buffer being displayed by @text_view. The previous
buffer displayed by the text view is unreferenced, and a reference is
added to @buffer. If you owned a reference to @buffer before passing it
to this function, you must remove that reference yourself; #GtkTextView
will not &quot;adopt&quot; it.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_reordered">
<description>
Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the &quot;rows_reordered&quot; signal.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GObject
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The parent path of the reordered signal
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The iter pointing to the parent of the reordered
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> The new order of rows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_change_palette_with_screen_hook">
<description>
Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
&quot;gtk-color-palette&quot; so all GtkColorSelection widgets will be modified.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call when the custom palette needs saving.
</parameter_description>
</parameter>
</parameters>
<return> the previous change palette hook (that was replaced).

Since: 2.2
</return>
</function>

<function name="gtk_tree_selection_selected_foreach">
<description>
Calls a function for each selected node. Note that you cannot modify
the tree or selection from within this function. As a result,
gtk_tree_selection_get_selected_rows() might be more useful.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The function to call for each selected node.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_get_current_color">
<description>
Sets @color to be the current color in the GtkColorSelection widget.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to fill in with the current color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_editable_get_editable">
<description>
Retrieves whether @editable is editable. See
gtk_editable_set_editable().


</description>
<parameters>
<parameter name="editable">
<parameter_description> a #GtkEditable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @editable is editable.
</return>
</function>

<function name="gtk_tree_view_column_get_sort_indicator">
<description>
Gets the value set by gtk_tree_view_column_set_sort_indicator().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> whether the sort indicator arrow is displayed
</return>
</function>

<function name="gtk_tree_path_new_first">
<description>
Creates a new #GtkTreePath.  The string representation of this path is &quot;0&quot;


</description>
<parameters>
</parameters>
<return> A new #GtkTreePath.
</return>
</function>

<function name="gtk_widget_class_install_style_property">
<description>
Installs a style property on a widget class. The parser for the
style property is determined by the value type of @pspec.

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GtkWidgetClass
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_to_string">
<description>
Generates a string representation of the path.  This string is a &apos;:&apos;
separated list of numbers.  For example, &quot;4:10:0:3&quot; would be an acceptable return value for this string.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string.  Must be freed with g_free().
</return>
</function>

<function name="gtk_drag_set_default_icon">
<description>
Changes the default drag icon. GTK+ retains references for the
arguments, and will release them when they are no longer needed.
This function is obsolete. The default icon should now be changed
via the stock system by changing the stock pixbuf for #GTK_STOCK_DND.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> the colormap of the icon
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the image data for the icon
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the transparency mask for an image.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> The X offset within @widget of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> The Y offset within @widget of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_row_inserted">
<description>
Emits the &quot;row_inserted&quot; signal on @tree_model

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the inserted row
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the inserted row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_get_active">
<description>
Return value: An integer which is the index of the currently active item, 

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> An integer which is the index of the currently active item, 
or -1 if there&apos;s no active item.

Since: 2.4
</return>
</function>

<function name="gtk_icon_source_set_size">
<description>
Sets the icon size this icon source is intended to be used
with.

Setting the icon size on an icon source makes no difference
if the size is wildcarded. Therefore, you should usually
call gtk_icon_source_set_size_wildcarded() to un-wildcard it
in addition to calling this function.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> icon size this source applies to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_append_element">
<description>
Adds a new element to the end of a toolbar.

If @type == %GTK_TOOLBAR_CHILD_WIDGET, @widget is used as the new element.
If @type == %GTK_TOOLBAR_CHILD_RADIOBUTTON, @widget is used to determine
the radio group for the new element. In all other cases, @widget must
be %NULL.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a value of type #GtkToolbarChildType that determines what @widget will be.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget, or %NULL.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the element&apos;s label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that provides pictorial representation of the element&apos;s function.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> any data you wish to pass to the callback.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar element as a #GtkWidget.
</return>
</function>

<function name="gtk_widget_set_default_direction">
<description>
Sets the default reading direction for widgets where the
direction has not been explicitly set by gtk_widget_set_direction().

</description>
<parameters>
<parameter name="dir">
<parameter_description> the new default direction. This cannot be
%GTK_TEXT_DIR_NONE.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_set_manual_capabilities">
<description>
This lets you specify the printing capabilities your application
supports. For instance, if you can handle scaling the output then
you pass #GTK_PRINT_CAPABILITY_SCALE. If you don&apos;t pass that, then
the dialog will only let you select the scale if the printing
system automatically handles scaling.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
<parameter name="capabilities">
<parameter_description> the printing capabilities of your application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_get_hadjustment">
<description>
Return value: the horizontal adjustment of @viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
</parameters>
<return> the horizontal adjustment of @viewport.
</return>
</function>

<function name="gtk_icon_theme_set_search_path">
<description>
Sets the search path for the icon theme object. When looking
for an icon theme, GTK+ will search for a subdirectory of
one or more of the directories in @path with the same name
as the icon theme. (Themes from multiple of the path elements
are combined to allow themes to be extended by adding icons
in the user&apos;s home directory.)

In addition if an icon found isn&apos;t found either in the current
icon theme or the default icon theme, and an image file with
the right name is found directly in one of the elements of
@path, then that image will be used for the icon name.
(This is legacy feature, and new icons should be put
into the default icon theme, which is called DEFAULT_THEME_NAME,
rather than directly on the icon path.)

Since: 2.4

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> array of directories that are searched for icon themes
</parameter_description>
</parameter>
<parameter name="n_elements">
<parameter_description> number of elements in @path.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_default_left_margin">
<description>
Gets the default left margin for the #GtkPaperSize.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the default left margin

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_get_markup_column">
<description>
Returns: the markup column, or -1 if it&apos;s unset.

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return> the markup column, or -1 if it&apos;s unset.

Since: 2.6
</return>
</function>

<function name="gtk_text_iter_is_end">
<description>
Return value: whether @iter is the end iterator

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the end iterator
</return>
</function>

<function name="gtk_tree_drag_source_row_draggable">
<description>
Asks the #GtkTreeDragSource whether a particular row can be used as
the source of a DND operation. If the source doesn&apos;t implement
this interface, the row is assumed draggable.


</description>
<parameters>
<parameter name="drag_source">
<parameter_description> a #GtkTreeDragSource
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row on which user is initiating a drag
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row can be dragged
</return>
</function>

<function name="gtk_stock_lookup">
<description>
Fills @item with the registered values for @stock_id, returning %TRUE
if @stock_id was known.



</description>
<parameters>
<parameter name="stock_id">
<parameter_description> a stock item name
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> stock item to initialize with values
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @item was initialized
</return>
</function>

<function name="gtk_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkMenuItem
</return>
</function>

<function name="gtk_progress_bar_set_orientation">
<description>
Causes the progress bar to switch to a different orientation
(left-to-right, right-to-left, top-to-bottom, or bottom-to-top). 

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> orientation of the progress bar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_private_hint">
<description>
Gets the value of the &quot;private&quot; flag.  Resources in the recently used
list that have this flag set to %TRUE should only be displayed by the
applications that have registered them.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the private flag was found, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_volume_button_new">
<description>
Creates a #GtkVolumeButton, with a range between 0 and 100, with
a stepping of 2. Volume values can be obtained and modified using
the functions from #GtkScaleButton.


</description>
<parameters>
</parameters>
<return> a new #GtkVolumeButton

Since: 2.12
</return>
</function>

<function name="gtk_calendar_clear_marks">
<description>
Remove all visual markers.

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_action_new_for_manager">
<description>
Creates a new #GtkRecentAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().


</description>
<parameters>
<parameter name="name">
<parameter_description> a unique name for the action
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label displayed in menu items and on buttons
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a tooltip for the action
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the stock icon to display in widgets representing the action
</parameter_description>
</parameter>
<parameter name="manager">
<parameter_description> a #GtkRecentManager or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GtkRecentAction

Since: 2.12
</return>
</function>

<function name="gtk_tree_view_set_enable_tree_lines">
<description>
Sets whether to draw lines interconnecting the expanders in @tree_view.
This does not have any visible effects for lists.

Since: 2.10

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> %TRUE to enable tree line drawing, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_get_documenters">
<description>
Return value: A %NULL-terminated string array containing

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> A %NULL-terminated string array containing
the documenters. The array is owned by the about dialog 
and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_print_settings_to_file">
<description>
This function saves the print settings from @settings to @file_name.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="file_name">
<parameter_description> the file to save to
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success

Since: 2.12
</return>
</function>

<function name="gtk_widget_get_accessible">
<description>
Returns: the #AtkObject associated with @widget

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #AtkObject associated with @widget
</return>
</function>

<function name="gtk_window_is_active">
<description>
Return value: %TRUE if the window part of the current active window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window part of the current active window.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_editable">
<description>
Return value: whether @iter is inside an editable range

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="default_setting">
<parameter_description> %TRUE if text is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is inside an editable range
</return>
</function>

<function name="gtk_tree_store_insert">
<description>
Creates a new row at @position.  If parent is non-%NULL, then the row will be
made a child of @parent.  Otherwise, the row will be created at the toplevel.
If @position is larger than the number of rows at that level, then the new
row will be inserted to the end of the list.  @iter will be changed to point
to this new row.  The row will be empty after this function is called.  To
fill in values, you need to call gtk_tree_store_set() or
gtk_tree_store_set_value().


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_xembed_send_focus_message">
<description>
Sends a XEMBED message for moving the focus along the focus
chain to a window. The flags field that these messages share
will be correctly filled in.

</description>
<parameters>
<parameter name="recipient">
<parameter_description> window to which to send the window, or %NULL
in which case nothing will be sent
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description>   type of message
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description>    detail field of message
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_move_child">
<description>
Updates the position of a child, as for gtk_text_view_add_child_in_window().

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> child widget already added to the text view
</parameter_description>
</parameter>
<parameter name="xpos">
<parameter_description> new X position in window coordinates
</parameter_description>
</parameter>
<parameter name="ypos">
<parameter_description> new Y position in window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_get_orientation">
<description>
Retrieves the current progress bar orientation.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> orientation of the progress bar
</return>
</function>

<function name="gtk_list_store_iter_is_valid">
<description>
&amp;lt;warning&amp;gt;This function is slow. Only use it for debugging and/or testing
purposes.&amp;lt;/warning&amp;gt;

Checks if the given iter is a valid iter for this #GtkListStore.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iter is valid, %FALSE if the iter is invalid.

Since: 2.2
</return>
</function>

<function name="gtk_widget_hide_all">
<description>
Recursively hides a widget and any child widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_show_about_dialog">
<description>
This is a convenience function for showing an application&apos;s about box.
The constructed dialog is associated with the parent window and 
reused for future invocations of this function.

Since: 2.6

</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent, or %NULL for none
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property 
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value of first property, followed by more properties, %NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_menu_item_new">
<description>
Creates a new #GtkImageMenuItem with an empty label.

</description>
<parameters>
</parameters>
<return> a new #GtkImageMenuItem.
</return>
</function>

<function name="gtk_entry_get_layout">
<description>
Gets the #PangoLayout used to display the entry.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_entry_get_layout_offsets().
The returned layout is owned by the entry and must not be 
modified or freed by the caller.

Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this entry
</return>
</function>

<function name="gtk_selection_data_get_text">
<description>
Gets the contents of the selection data as a UTF-8 string.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
</parameters>
<return> if the selection data contained a recognized
text type and it could be converted to UTF-8, a newly allocated
string containing the converted text, otherwise %NULL.
If the result is non-%NULL it must be freed with g_free().
</return>
</function>

<function name="gtk_cell_renderer_toggle_get_radio">
<description>
Return value: %TRUE if we&apos;re rendering radio toggles rather than checkboxes

</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we&apos;re rendering radio toggles rather than checkboxes
</return>
</function>

<function name="gtk_layout_get_vadjustment">
<description>
This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the vertical scrollbar and @layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return> vertical scroll adjustment
</return>
</function>

<function name="gtk_tree_view_scroll_to_point">
<description>
Scrolls the tree view such that the top-left corner of the visible
area is @tree_x, @tree_y, where @tree_x and @tree_y are specified
in tree coordinates.  The @tree_view must be realized before
this function is called.  If it isn&apos;t, you probably want to be
using gtk_tree_view_scroll_to_cell().

If either @tree_x or @tree_y are -1, then that direction isn&apos;t scrolled.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tree_x">
<parameter_description> X coordinate of new top-left pixel of visible area, or -1
</parameter_description>
</parameter>
<parameter name="tree_y">
<parameter_description> Y coordinate of new top-left pixel of visible area, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_init_with_args">
<description>
This function does the same work as gtk_init_check(). 
Additionally, it allows you to add your own commandline options, 
and it automatically generates nicely formatted 
&amp;lt;option&amp;gt;--help&amp;lt;/option&amp;gt; output. Note that your program will
be terminated after writing out the help output.


</description>
<parameters>
<parameter name="argc">
<parameter_description> a pointer to the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> a pointer to the array of command line arguments.
</parameter_description>
</parameter>
<parameter name="parameter_string">
<parameter_description> a string which is displayed in
the first line of &amp;lt;option&amp;gt;--help&amp;lt;/option&amp;gt; output, after 
&amp;lt;literal&amp;gt;&amp;lt;replaceable&amp;gt;programname&amp;lt;/replaceable&amp;gt; [OPTION...]&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> a %NULL-terminated array of #GOptionEntry&amp;lt;!-- --&amp;gt;s
describing the options of your program
</parameter_description>
</parameter>
<parameter name="translation_domain">
<parameter_description> a translation domain to use for translating
the &amp;lt;option&amp;gt;--help&amp;lt;/option&amp;gt; output for the options in @entries
with gettext(), or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for errors 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the GUI has been successfully initialized, 
%FALSE otherwise.

Since: 2.6
</return>
</function>

<function name="gtk_tree_store_insert_before">
<description>
Inserts a new row before @sibling.  If @sibling is %NULL, then the row will
be appended to @parent &apos;s children.  If @parent and @sibling are %NULL, then
the row will be appended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
@parent is optional.

@iter will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_set_delegate">
<description>
Establishes that calls on @receiver for #GtkFileChooser
methods should be delegated to @delegate, and that
#GtkFileChooser signals emitted on @delegate should be
forwarded to @receiver. Must be used in conjunction with
_gtk_file_chooser_delegate_iface_init().

</description>
<parameters>
<parameter name="receiver">
<parameter_description> a #GObject implementing #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="delegate">
<parameter_description> another #GObject implementing #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_size_from_name">
<description>
Looks up the icon size associated with @name.

</description>
<parameters>
<parameter name="name">
<parameter_description> the name to look up.
</parameter_description>
</parameter>
</parameters>
<return> the icon size with the given name.
</return>
</function>

<function name="_gtk_clipboard_handle_event">
<description>
Emits the #GtkClipboard::owner-change signal on the appropriate @clipboard.

Since: 2.6

</description>
<parameters>
<parameter name="event">
<parameter_description> a owner change event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scale_button_set_adjustment">
<description>
Sets the #GtkAdjustment to be used as a model 
for the #GtkScaleButton&apos;s scale.
See gtk_range_set_adjustment() for details.

Since: 2.12

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkScaleButton
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_attach">
<description>
Attaches a style to a window; this process allocates the
colors and creates the GC&apos;s for the style - it specializes
it to a particular visual and colormap. The process may 
involve the creation of a new style if the style has already 
been attached to a window with a different style and colormap.

Since this function may return a new object, you have to use it 
in the following way: 
&amp;lt;literal&amp;gt;style = gtk_style_attach (style, window)&amp;lt;/literal&amp;gt;


</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> Either @style, or a newly-created #GtkStyle.
If the style is newly created, the style parameter
will be unref&apos;ed, and the new style will have
a reference count belonging to the caller.
</return>
</function>

<function name="gtk_progress_bar_get_ellipsize">
<description>
Return value: #PangoEllipsizeMode

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> #PangoEllipsizeMode

Since: 2.6
</return>
</function>

<function name="gtk_window_set_icon">
<description>
Sets up the icon representing a #GtkWindow. This icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.

The icon should be provided in whatever size it was naturally
drawn; that is, don&apos;t scale the image before passing it to
GTK+. Scaling is postponed until the last minute, when the desired
final size is known, to allow best quality.

If you have your icon hand-drawn in multiple sizes, use
gtk_window_set_icon_list(). Then the best size will be used.

This function is equivalent to calling gtk_window_set_icon_list()
with a 1-element list.

See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> icon image, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_system_model_get_info">
<description>
Gets the #GtkFileInfo structure for a particular row
of @model. The information included in this structure
is determined by the @types parameter to
_gtk_file_system_model_new().


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTreeIter pointing to a row of @model
</parameter_description>
</parameter>
</parameters>
<return> a #GtkFileInfo structure. This structure
is owned by @model and must not be modified or freed.
If you want to save the information for later use,
you must make a copy, since the structure may be
freed on later changes to the file system.  If you have
called _gtk_file_system_model_add_editable() and the @iter
corresponds to the row that this function returned, the
return value will be NULL.
</return>
</function>

<function name="gtk_cell_view_set_displayed_row">
<description>
Sets the row of the model that is currently displayed
by the #GtkCellView. If the path is unset, then the
contents of the cellview &quot;stick&quot; at their last value;
this is not normally a desired result, but may be
a needed intermediate state if say, the model for
the #GtkCellView becomes temporarily empty.

Since: 2.6

</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath or %NULL to unset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkImage">
<description>
The name of the icon in the icon theme. If the icon theme is
changed, the image will be updated automatically.

Since: 2.6

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_action_set_accel_group">
<description>
Sets the #GtkAccelGroup in which the accelerator for this action
will be installed.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_get_date">
<description>
Obtains the selected date from a #GtkCalendar.

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> location to store the year number, or %NULL
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> location to store the month number (between 0 and 11), or %NULL
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> location to store the day number (between 1 and 31), or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_focus_out">
<description>
Notify the input method that the widget to which this
input context corresponds has lost focus. The input method
may, for example, change the displayed feedback or reset the contexts
state to reflect this change.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_set_focus_vadjustment">
<description>
Hooks up an adjustment to focus handling in a container, so when a 
child of the container is focused, the adjustment is scrolled to 
show that widget. This function sets the vertical alignment. See 
gtk_scrolled_window_get_vadjustment() for a typical way of obtaining 
the adjustment and gtk_container_set_focus_hadjustment() for setting
the horizontal adjustment.

The adjustments have to be in pixel units and in the same coordinate 
system as the allocation for immediate children of the container. 

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> an adjustment which should be adjusted when the focus 
is moved among the descendents of @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_up">
<description>
Moves the @path to point to its parent node, if it has a parent.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path has a parent, and the move was made.
</return>
</function>

<function name="gtk_text_iter_get_marks">
<description>
Return value: list of #GtkTextMark

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> list of #GtkTextMark
</return>
</function>

<function name="gtk_assistant_new">
<description>
Creates a new #GtkAssistant.


</description>
<parameters>
</parameters>
<return> a newly created #GtkAssistant

Since: 2.10
</return>
</function>

<function name="gtk_targets_include_image">
<description>
Determines if any of the targets in @targets can be used to
provide a #GdkPixbuf.


</description>
<parameters>
<parameter name="targets">
<parameter_description> an array of #GdkAtom&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the length of @targets
</parameter_description>
</parameter>
<parameter name="writable">
<parameter_description> whether to accept only targets for which GTK+ knows
how to convert a pixbuf into the format
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @targets include a suitable target for images,
otherwise %FALSE.

Since: 2.10
</return>
</function>

<function name="gtk_dialog_set_alternative_button_order">
<description>
Sets an alternative button order. If the 
#GtkSettings:gtk-alternative-button-order setting is set to %TRUE, 
the dialog buttons are reordered according to the order of the 
response ids passed to this function.

By default, GTK+ dialogs use the button order advocated by the Gnome 
&amp;lt;ulink url=&quot;http://developer.gnome.org/projects/gup/hig/2.0/&quot;&amp;gt;Human 
Interface Guidelines&amp;lt;/ulink&amp;gt; with the affirmative button at the far 
right, and the cancel button left of it. But the builtin GTK+ dialogs
and #GtkMessageDialog&amp;lt;!-- --&amp;gt;s do provide an alternative button order,
which is more suitable on some platforms, e.g. Windows.

Use this function after adding all the buttons to your dialog, as the 
following example shows:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
cancel_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
GTK_STOCK_CANCEL,
GTK_RESPONSE_CANCEL);

ok_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
GTK_STOCK_OK,
GTK_RESPONSE_OK);

gtk_widget_grab_default (ok_button);

help_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
GTK_STOCK_HELP,
GTK_RESPONSE_HELP);

gtk_dialog_set_alternative_button_order (GTK_DIALOG (dialog),
GTK_RESPONSE_OK,
GTK_RESPONSE_CANCEL,
GTK_RESPONSE_HELP,
-1);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 2.6

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="first_response_id">
<parameter_description> a response id used by one @dialog&apos;s buttons
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of more response ids of @dialog&apos;s buttons, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_path_bar_up">
<description>
If the selected button in the pathbar is not the furthest button &quot;up&quot; (in the
root direction), act as if the user clicked on the next button up.

</description>
<parameters>
<parameter name="path_bar">
<parameter_description> a #GtkPathBar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_get_option_group">
<description>
Returns a #GOptionGroup for the commandline arguments recognized

</description>
<parameters>
<parameter name="open_default_display">
<parameter_description> whether to open the default display 
when parsing the commandline arguments
</parameter_description>
</parameter>
</parameters>
<return>a #GOptionGroup for the commandline arguments recognized
by GTK+

Since: 2.6
</return>
</function>

<function name="gtk_rc_parse_color_full">
<description>
Parses a color in the &amp;lt;link linkend=&quot;color=format&quot;&amp;gt;format&amp;lt;/link&amp;gt; expected
in a RC file. If @style is not %NULL, it will be consulted to resolve
references to symbolic colors.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> a #GtkRcStyle, or %NULL
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a pointer to a #GtkColor structure in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %G_TOKEN_NONE if parsing succeeded, otherwise the token
that was expected but not found

Since: 2.12
</return>
</function>

<function name="gtk_text_iter_ends_line">
<description>
Return value: whether @iter is at the end of a line

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is at the end of a line
</return>
</function>

<function name="gtk_container_class_list_child_properties">
<description>

</description>
<parameters>
<parameter name="cclass">
<parameter_description> a #GtkContainerClass
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> location to return the number of child properties found
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %NULL-terminated array of #GParamSpec*. 
The array must be freed with g_free().
all child properties of a container class.
</return>
</function>

<function name="gtk_text_view_set_cursor_visible">
<description>
Toggles whether the insertion point is displayed. A buffer with no editable
text probably shouldn&apos;t have a visible cursor, so you may want to turn
the cursor off.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to show the insertion cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_text_index_to_layout_index">
<description>
Converts from a position in the entry&apos;s #PangoLayout (returned by
gtk_entry_get_layout()) to a position in the entry contents
(returned by gtk_entry_get_text()).


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="text_index">
<parameter_description> byte index into the entry contents
</parameter_description>
</parameter>
</parameters>
<return> byte index into the entry layout text
</return>
</function>

<function name="gtk_tree_view_append_column">
<description>
Appends @column to the list of columns. If @tree_view has &quot;fixed_height&quot;
mode enabled, then @column must have its &quot;sizing&quot; property set to be
GTK_TREE_VIEW_COLUMN_FIXED.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to add.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after appending.
</return>
</function>

<function name="gtk_recent_chooser_get_show_icons">
<description>
Retrieves whether @chooser should show an icon near the resource.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the icons should be displayed, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_combo_box_get_title">
<description>
Gets the current title of the menu in tearoff mode. See
gtk_combo_box_set_add_tearoffs().


</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the menu&apos;s title in tearoff mode. This is an internal copy of the
string which must not be freed.

Since: 2.10
</return>
</function>

<function name="gtk_tree_row_reference_inserted">
<description>
Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the &quot;row_inserted&quot; signal.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GObject
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The row position that was inserted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_use_drag_window">
<description>
Sets whether @tool_item has a drag window. When %TRUE the
toolitem can be used as a drag source through gtk_drag_source_set().
When @tool_item has a drag window it will intercept all events,
even those that would otherwise be sent to a child of @tool_item.

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem 
</parameter_description>
</parameter>
<parameter name="use_drag_window">
<parameter_description> Whether @tool_item has a drag window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_requisition_free">
<description>
Frees a #GtkRequisition.

</description>
<parameters>
<parameter name="requisition">
<parameter_description> a #GtkRequisition
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_icon">
<description>
Sets an icon to be used as fallback for windows that haven&apos;t
had gtk_window_set_icon() called on them from a pixbuf.

Since: 2.4

</description>
<parameters>
<parameter name="icon">
<parameter_description> the icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_add_action_with_accel">
<description>
Adds an action object to the action group and sets up the accelerator.

If @accelerator is %NULL, attempts to use the accelerator associated 
with the stock_id of the action. 

Accel paths are set to
&amp;lt;literal&amp;gt;&amp;lt;Actions&amp;gt;/&amp;lt;replaceable&amp;gt;group-name&amp;lt;/replaceable&amp;gt;/&amp;lt;replaceable&amp;gt;action-name&amp;lt;/replaceable&amp;gt;&amp;lt;/literal&amp;gt;.

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group 
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the action to add 
</parameter_description>
</parameter>
<parameter name="accelerator">
<parameter_description> the accelerator for the action, in
the format understood by gtk_accelerator_parse(), or &quot;&quot; for no accelerator, or 
%NULL to use the stock accelerator 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_set_ellipsize">
<description>
Sets the mode used to ellipsize (add an ellipsis: &quot;...&quot;) the text 
if there is not enough space to render the entire string.

Since: 2.6

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a #PangoEllipsizeMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_new">
<description>
Creates a new #GtkIconView widget


</description>
<parameters>
</parameters>
<return> A newly created #GtkIconView widget

Since: 2.6
</return>
</function>

<function name="_gtk_socket_end_embedding">
<description>
@socket: a #GtkSocket

Called to end the embedding of a plug in the socket.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_preview_widget_active">
<description>
Sets whether the preview widget set by
gtk_file_chooser_set_preview_widget() should be shown for the
current filename. When @active is set to false, the file chooser
may display an internally generated preview of the current file
or it may display no preview at all. See
gtk_file_chooser_set_preview_widget() for more details.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> whether to display the user-specified preview widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_set_bottom_margin">
<description>
Sets the bottom margin of the #GtkPageSetup.

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the new bottom margin in units of @unit
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the units for @margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_extension_events">
<description>
Sets the extension events mask to @mode. See #GdkExtensionMode
and gdk_input_set_extension_events().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> bitfield of extension events to receive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_bindings_activate">
<description>
Find a key binding matching @keyval and @modifiers and activate the
binding on @object.


</description>
<parameters>
<parameter name="object">
<parameter_description> object to activate when binding found
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> key value of the binding
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> key modifier of the binding
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a binding was found and activated
</return>
</function>

<function name="gtk_spin_button_spin">
<description>
Increment or decrement a spin button&apos;s value in a specified direction
by a specified amount. 

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> a #GtkSpinType indicating the direction to spin.
</parameter_description>
</parameter>
<parameter name="increment">
<parameter_description> step increment to apply in the specified direction.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_item_index">
<description>
Return value: the position of item on the toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> a #GtkToolItem that is a child of @toolbar
</parameter_description>
</parameter>
</parameters>
<return> the position of item on the toolbar.

Since: 2.4
</return>
</function>

<function name="gtk_combo_box_set_add_tearoffs">
<description>
Sets whether the popup menu should have a tearoff 
menu item.

Since: 2.6

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox 
</parameter_description>
</parameter>
<parameter name="add_tearoffs">
<parameter_description> %TRUE to add tearoff menu items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_get_model">
<description>
Return value: A #GtkTreeModel which was passed during construction.

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeModel which was passed during construction.

Since: 2.4
</return>
</function>

<function name="_gtk_socket_claim_focus">
<description>
@socket: a #GtkSocket
@send_event: huh?

Claims focus for the socket. XXX send_event?

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_get_page_side_image">
<description>
Gets the header image for @page. 


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
</parameters>
<return> the side image for @page, or %NULL
if there&apos;s no side image for the page.

Since: 2.10
</return>
</function>

<function name="gtk_drag_source_set_target_list">
<description>
Changes the target types that this widget offers for drag-and-drop.
The widget must first be made into a drag source with
gtk_drag_source_set().

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag source
</parameter_description>
</parameter>
<parameter name="target_list">
<parameter_description> list of draggable targets, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_background_area">
<description>
Fills the bounding rectangle in bin_window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a node not found in the tree, the @y and @height fields of
the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The returned rectangle is equivalent to the
@background_area passed to gtk_cell_renderer_render().  These background
areas tile to cover the entire bin window.  Contrast with the @cell_area,
returned by gtk_tree_view_get_cell_area(), which returns only the cell
itself, excluding surrounding borders and the tree expander area.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordiantes
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with cell background rect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_hline">
<description>
Draws a horizontal line from (@x1, @y) to (@x2, @y) in @window
using the given style and state.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> rectangle to which the output is clipped, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x1">
<parameter_description> the starting x coordinate
</parameter_description>
</parameter>
<parameter name="x2">
<parameter_description> the ending x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkClipboard">
<description>
The ::owner-change signal is emitted when GTK+ receives an
event that indicates that the ownership of the selection 
associated with @clipboard has changed.

Since: 2.6

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the @GdkEventOwnerChange event 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_context_get_cairo_context">
<description>
Obtains the cairo context that is associated with the
#GtkPrintContext.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the cairo context of @context

Since: 2.10
</return>
</function>

<function name="gtk_container_get_border_width">
<description>
Retrieves the border width of the container. See
gtk_container_set_border_width().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the current border width
</return>
</function>

<function name="gtk_tree_view_expand_all">
<description>
Recursively expands all nodes in the @tree_view.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkRange">
<description>
Whether to draw the trough across the full length of the range or
to exclude the steppers and their spacing. Note that setting the
#GtkRange:stepper-spacing style property to any value &amp;gt; 0 will
automatically enable trough-under-steppers too.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_container_remove">
<description>
Removes @widget from @container. @widget must be inside @container.
Note that @container will own a reference to @widget, and that this
may be the last reference held; so removing a widget from its
container can destroy that widget. If you want to use @widget
again, you need to add a reference to it while it&apos;s not inside
a container, using g_object_ref(). If you don&apos;t want to use @widget
again it&apos;s usually more efficient to simply destroy it directly
using gtk_widget_destroy() since this will remove it from the
container and help break any circular reference count cycles.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a current child of @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_add_shortcut_folder">
<description>
Adds a folder to be displayed with the shortcut folders in a file chooser.
Internal function, see gtk_file_chooser_add_shortcut_folder().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of the folder to add
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be added successfully, %FALSE
otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_column_clear_attributes">
<description>
Clears all existing attributes previously set with
gtk_tree_view_column_set_attributes().

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> a #GtkCellRenderer to clear the attribute mapping on.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_query_tab_label_packing">
<description>
Query the packing attributes for the tab label of the page
containing @child.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> location to store the expand value (or NULL)
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> location to store the fill value (or NULL)
</parameter_description>
</parameter>
<parameter name="pack_type">
<parameter_description> location to store the pack_type (or NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_cursor_visible">
<description>
Find out whether the cursor is being displayed.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> whether the insertion mark is visible
</return>
</function>

<function name="gtk_print_settings_get_print_pages">
<description>
Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> which pages to print

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_set_item_width">
<description>
Sets the ::item-width property which specifies the width 
to use for each item. If it is set to -1, the icon view will 
automatically determine a suitable item size.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="item_width">
<parameter_description> the width for each item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_activates_default">
<description>
If @setting is %TRUE, pressing Enter in the @entry will activate the default
widget for the window containing the entry. This usually means that
the dialog box containing the entry will be closed, since the default
widget is usually one of the dialog buttons.

(For experts: if @setting is %TRUE, the entry calls
gtk_window_activate_default() on the window containing the entry, in
the default handler for the #GtkWidget::activate signal.)

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to activate window&apos;s default widget on Enter keypress
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_get_stock">
<description>
Gets the stock icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> place to store a stock icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> place to store a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_printer_request_details">
<description>
Requests the printer details. When the details are available,
the #GtkPrinter::details-acquired signal will be emitted on @printer.

Since: 2.12

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_search">
<description>
Same as gtk_text_iter_forward_search(), but moves backward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter where the search begins
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> search string
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> bitmask of flags affecting the search
</parameter_description>
</parameter>
<parameter name="match_start">
<parameter_description> return location for start of match, or %NULL
</parameter_description>
</parameter>
<parameter name="match_end">
<parameter_description> return location for end of match, or %NULL
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> location of last possible @match_start, or %NULL for start of buffer
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_tree_path_append_index">
<description>
Appends a new index to a path.  As a result, the depth of the path is
increased.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_request_contents">
<description>
Requests the contents of clipboard as the given target.
When the results of the result are later received the supplied callback
will be called.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description>    an atom representing the form into which the clipboard
owner should convert the selection.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  A function to call when the results are received
(or the retrieval fails). If the retrieval fails
the length field of @selection_data will be
negative.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_tool_item_toolbar_reconfigured">
<description>
Emits the signal #GtkToolItem::toolbar_reconfigured on @tool_item. This
internal function is called by #GtkToolbar when some aspect of its
configuration changes.

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_add_text_targets">
<description>
Add the text targets supported by #GtkSelection to
the target list of the drag source.  The targets
are added with @info = 0. If you need another value, 
use gtk_target_list_add_text_targets() and
gtk_drag_source_set_target_list().

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s is a drag source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_child_anchor_get_widgets">
<description>
Gets a list of all widgets anchored at this child anchor.
The returned list should be freed with g_list_free().



</description>
<parameters>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return> list of widgets anchored at @anchor
</return>
</function>

<function name="gtk_window_set_startup_id">
<description>
Startup notification identifiers are used by desktop environment to 
track application startup, to provide user feedback and other 
features. This function changes the corresponding property on the
underlying GdkWindow. Normally, startup identifier is managed 
automatically and you should only use this function in special cases
like transferring focus from other processes. You should use this
function before calling gtk_window_present() or any equivalent
function generating a window map event.

This function is only useful on X11, not with other GTK+ targets.

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> a string with startup-notification identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_get_volume_for_path">
<description>
Queries the file system volume that corresponds to a specific path.
There might not be a volume for all paths (consinder for instance remote
shared), so this can return NULL.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkFilePath
</parameter_description>
</parameter>
</parameters>
<return> the #GtkFileSystemVolume that corresponds to the specified
@path, or NULL if there is no such volume. You should free this value with
gtk_file_system_volume_free().
</return>
</function>

<function name="gtk_printer_accepts_ps">
<description>
Return value: %TRUE if @printer accepts PostScript

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @printer accepts PostScript

Since: 2.10
</return>
</function>

<function name="gtk_print_job_get_surface">
<description>
Gets a cairo surface onto which the pages of
the print job should be rendered.


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the cairo surface of @job

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_set_visible_line_offset">
<description>
Like gtk_text_iter_set_line_offset(), but the offset is in visible
characters, i.e. text with a tag making it invisible is not
counted in the offset.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="char_on_line">
<parameter_description> a character offset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_handle_box_get_shadow_type">
<description>
Gets the type of shadow drawn around the handle box. See
gtk_handle_box_set_shadow_type().


</description>
<parameters>
<parameter name="handle_box">
<parameter_description> a #GtkHandleBox
</parameter_description>
</parameter>
</parameters>
<return> the type of shadow currently drawn around the handle box.
</return>
</function>

<function name="gtk_tooltip_set_custom">
<description>
Replaces the widget packed into the tooltip with @custom_widget.  
By default a box with a #GtkImage and #GtkLabel is embedded in 
the tooltip, which can be configured using gtk_tooltip_set_markup() 
and gtk_tooltip_set_icon().

Since: 2.12

</description>
<parameters>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="custom_widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_get_needed">
<description>
Gets the fields that need to be filled in for the structure
passed to gtk_recent_filter_filter()

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkRecentChooser.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
</parameters>
<return> bitfield of flags indicating needed fields when
calling gtk_recent_filter_filter()

Since: 2.10
</return>
</function>

<function name="gtk_target_list_unref">
<description>
Decreases the reference count of a #GtkTargetList by one.
If the resulting reference count is zero, frees the list.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_foreach">
<description>
Calls @func on each tag in @table, with user data @data.
Note that the table may not be modified while iterating 
over it (you can&apos;t add/remove tags).

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function to call on each tag
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_job_new">
<description>
Creates a new #GtkPrintJob.


</description>
<parameters>
<parameter name="title">
<parameter_description> the job title
</parameter_description>
</parameter>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="page_setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPrintJob

Since: 2.10
</return>
</function>

<function name="gtk_print_job_get_title">
<description>
Gets the job title.


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
</parameters>
<return> the title of @job

Since: 2.10
</return>
</function>

<function name="gtk_tree_store_is_ancestor">
<description>
Return value: %TRUE, if @iter is an ancestor of @descendant

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter is an ancestor of @descendant
</return>
</function>

<function name="gtk_print_settings_set_use_color">
<description>
Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="use_color">
<parameter_description> whether to use color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_polygon">
<description>
Draws a polygon on @window with the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="npoints">
<parameter_description> length of @points
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if the polygon should be filled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_set_priority">
<description>
Sets the priority of a #GtkTextTag. Valid priorities are
start at 0 and go to one less than gtk_text_tag_table_get_size().
Each tag in a table has a unique priority; setting the priority
of one tag shifts the priorities of all the other tags in the
table to maintain a unique priority for each tag. Higher priority
tags &quot;win&quot; if two tags both set the same text attribute. When adding
a tag to a tag table, it will be assigned the highest priority in
the table by default; so normally the precedence of a set of tags
is the order in which they were added to the table, or created with
gtk_text_buffer_create_tag(), which adds the tag to the buffer&apos;s table
automatically.

</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the new priority
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_hide_on_delete">
<description>
Utility function; intended to be connected to the #GtkWidget::delete-event
signal on a #GtkWindow. The function calls gtk_widget_hide() on its
argument, then returns %TRUE. If connected to ::delete-event, the
result is that clicking the close button for a window (on the
window frame, top right corner usually) will hide but not destroy
the window. By default, GTK+ destroys windows when ::delete-event
is received.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE
</return>
</function>

<function name="gtk_widget_reparent">
<description>
Moves a widget from one #GtkContainer to another, handling reference
count issues to avoid destroying the widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> a #GtkContainer to move the widget into
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_get_print_settings">
<description>
Return value: the current print settings of @op.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
</parameters>
<return> the current print settings of @op.

Since: 2.10
</return>
</function>

<function name="gtk_toolbar_unset_icon_size">
<description>
Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that
user preferences will be used to determine the icon size.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_delete_surrounding">
<description>
Asks the widget that the input context is attached to to delete
characters around the cursor position by emitting the
GtkIMContext::delete_surrounding signal. Note that @offset and @n_chars
are in characters not in bytes which differs from the usage other
places in #GtkIMContext.

In order to use this function, you should first call
gtk_im_context_get_surrounding() to get the current context, and
call this function immediately afterwards to make sure that you
know what you are deleting. You should also account for the fact
that even if the signal was handled, the input context might not
have deleted all the characters that were requested to be deleted.

This function is used by an input method that wants to make
subsitutions in the existing text in response to new input. It is
not useful for applications.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset from cursor position in chars;
a negative value means start before the cursor.
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> number of characters to delete.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the signal was handled.
</return>
</function>

<function name="gtk_entry_completion_get_inline_selection">
<description>
Returns: %TRUE if inline-selection mode is on

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if inline-selection mode is on

Since: 2.12
</return>
</function>

<function name="gtk_tree_sortable_set_default_sort_func">
<description>
Sets the default comparison function used when sorting to be @sort_func.  
If the current sort column id of @sortable is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using 
this function.

If @sort_func is %NULL, then there will be no default comparison function.
This means that once the model  has been sorted, it can&apos;t go back to the
default state. In this case, when the current sort column id of @sortable is
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_func">
<parameter_description> The comparison function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to @sort_func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier of @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_embed_set_delegate">
<description>
Establishes that calls on @receiver for #GtkFileChooser methods should be
delegated to @delegate, and that #GtkFileChooser signals emitted on @delegate
should be forwarded to @receiver. Must be used in conjunction with
_gtk_file_chooser_embed_delegate_iface_init().

</description>
<parameters>
<parameter name="receiver">
<parameter_description> a GOobject implementing #GtkFileChooserEmbed
</parameter_description>
</parameter>
<parameter name="delegate">
<parameter_description> another GObject implementing #GtkFileChooserEmbed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_get_display_options">
<description>
Return value: the display options.

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
</parameters>
<return> the display options.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_row_activated">
<description>
Activates the cell determined by @path and @column.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be activated.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to be activated.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_set_model">
<description>
Sets the model for a #GtkEntryCompletion. If @completion already has
a model set, it will remove it before setting the new model.
If model is %NULL, then it will unset the model.

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> The #GtkTreeModel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_unlock">
<description>
Undoes the last call to gtk_accel_group_lock() on this @accel_group.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_util_create_drag_icon">
<description>
Creates a drag and drop icon from @text.

</description>
<parameters>
<parameter name="widget">
<parameter_description> #GtkWidget to extract the pango context
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> a #gchar to render the icon
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text, or -1 for NUL-terminated text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_entry_get_file_part">
<description>
Gets the non-folder portion of whatever the user has entered
into the file selector. What is returned is a UTF-8 string,
and if a filename path is needed, gtk_file_system_make_path()
must be used


</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooserEntry
</parameter_description>
</parameter>
</parameters>
<return> the entered filename - this value is owned by the
chooser entry and must not be modified or freed.
</return>
</function>

<function name="gtk_radio_menu_item_new_with_mnemonic_from_widget">
<description>
Creates a new GtkRadioMenuItem containing a label. The label will be
created using gtk_label_new_with_mnemonic(), so underscores in label
indicate the mnemonic for the menu item.

The new #GtkRadioMenuItem is added to the same group as @group.


</description>
<parameters>
<parameter name="group">
<parameter_description> An existing #GtkRadioMenuItem
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> The new #GtkRadioMenuItem

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_set_media_type">
<description>
Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

The set of media types is defined in PWG 5101.1-2002 PWG.
&amp;lt;!-- FIXME link here --&amp;gt;

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="media_type">
<parameter_description> the media type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_set_style">
<description>
Alters the view of @toolbar to display either icons only, text only, or both.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> the new style for @toolbar.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_completion">
<description>
Sets @completion to be the auxiliary completion object to use with @entry.
All further configuration of the completion mechanism is done on
@completion using the #GtkEntryCompletion API. Completion is disabled if
@completion is set to %NULL.

Since: 2.4

</description>
<parameters>
<parameter name="entry">
<parameter_description> A #GtkEntry
</parameter_description>
</parameter>
<parameter name="completion">
<parameter_description> The #GtkEntryCompletion or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_visible_horizontal">
<description>
Sets whether @tool_item is visible when the toolbar is docked horizontally.

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem
</parameter_description>
</parameter>
<parameter name="visible_horizontal">
<parameter_description> Whether @tool_item is visible when in horizontal mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_popup">
<description>
Displays a menu and makes it available for selection.  Applications can use
this function to display context-sensitive menus, and will typically supply
%NULL for the @parent_menu_shell, @parent_menu_item, @func and @data 
parameters. The default menu positioning function will position the menu
at the current mouse cursor position.

The @button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@button should be 0.

The @activate_time parameter should be the time stamp of the event that
initiated the popup. If such an event is not available, use
gtk_get_current_event_time() instead.


</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu.
</parameter_description>
</parameter>
<parameter name="parent_menu_shell">
<parameter_description> the menu shell containing the triggering menu item, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_menu_item">
<parameter_description> the menu item whose activation triggered the popup, or %NULL
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a user supplied function used to position the menu, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user supplied data to be passed to @func.
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the mouse button which was pressed to initiate the event.
</parameter_description>
</parameter>
<parameter name="activate_time">
<parameter_description> the time at which the activation event occurred.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_group_remove_window">
<description>
Removes a window from a #GtkWindowGroup.

</description>
<parameters>
<parameter name="window_group">
<parameter_description> a #GtkWindowGroup
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the #GtkWindow to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_present_with_time">
<description>
Presents a window to the user in response to a user interaction.
If you need to present a window without a timestamp, use 
gtk_window_present(). See gtk_window_present() for details. 

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the timestamp of the user interaction (typically a 
button or key press event) which triggered this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_update_policy">
<description>
Sets the update policy for the range. #GTK_UPDATE_CONTINUOUS means that
anytime the range slider is moved, the range value will change and the
value_changed signal will be emitted. #GTK_UPDATE_DELAYED means that
the value will be updated after a brief timeout where no slider motion
occurs, so updates are spaced by a short time rather than
continuous. #GTK_UPDATE_DISCONTINUOUS means that the value will only
be updated when the user releases the button and ends the slider
drag operation.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> update policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_new">
<description>
Creates a new text buffer.


</description>
<parameters>
<parameter name="table">
<parameter_description> a tag table, or %NULL to create a new one
</parameter_description>
</parameter>
</parameters>
<return> a new text buffer
</return>
</function>

<function name="gtk_entry_select_region">
<description>
Selects a region of text. The characters that are selected are 
those characters at positions from @start_pos up to, but not 
including @end_pos. If @end_pos is negative, then the the characters 
selected will be those characters from @start_pos to the end of 
the text. 

Deprecated: Use gtk_editable_select_region() instead.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the starting position
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> the end position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_value">
<description>
Get the value in the @spin_button.


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the value of @spin_button
</return>
</function>

<function name="gtk_print_error_quark">
<description>
Registers an error quark for #GtkPrintOperation if necessary.


</description>
<parameters>
</parameters>
<return> The error quark used for #GtkPrintOperation errors.

Since: 2.10
</return>
</function>

<function name="gtk_menu_bar_set_child_pack_direction">
<description>
Sets how widgets should be packed inside the children of a menubar.

Since: 2.8

</description>
<parameters>
<parameter name="menubar">
<parameter_description> a #GtkMenuBar.
</parameter_description>
</parameter>
<parameter name="child_pack_dir">
<parameter_description> a new #GtkPackDirection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_convert_widget_to_bin_window_coords">
<description>
Converts widget coordinates to coordinates for the bin_window,
as expected by e.g. gtk_icon_view_get_path_at_pos(). 

Since: 2.12

</description>
<parameters>
<parameter name="wx">
<parameter_description> X coordinate relative to the widget
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> Y coordinate relative to the widget
</parameter_description>
</parameter>
<parameter name="bx">
<parameter_description> return location for bin_window X coordinate
</parameter_description>
</parameter>
<parameter name="by">
<parameter_description> return location for bin_window Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_option">
<description>
Draws a radio button indicator in the given rectangle on @window with 
the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the option in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_printer_is_active">
<description>
Return value: %TRUE if @printer is active

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @printer is active

Since: 2.10
</return>
</function>

<function name="gtk_window_activate_focus">
<description>
Activates the current focused widget within the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a widget got activated.
</return>
</function>

<function name="gtk_entry_completion_delete_action">
<description>
Deletes the action at @index_ from @completion&apos;s action list.

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index of the item to Delete.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_dither">
<description>
Gets the value of %GTK_PRINT_SETTINGS_DITHER.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the dithering that is used

Since: 2.10
</return>
</function>

<function name="gtk_text_view_window_to_buffer_coords">
<description>
Converts coordinates on the window identified by @win to buffer
coordinates, storing the result in (@buffer_x,@buffer_y).

Note that you can&apos;t convert coordinates for a nonexisting window (see 
gtk_text_view_set_border_window_size()).

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="win">
<parameter_description> a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
</parameter_description>
</parameter>
<parameter name="window_x">
<parameter_description> window x coordinate
</parameter_description>
</parameter>
<parameter name="window_y">
<parameter_description> window y coordinate
</parameter_description>
</parameter>
<parameter name="buffer_x">
<parameter_description> buffer x coordinate return location
</parameter_description>
</parameter>
<parameter name="buffer_y">
<parameter_description> buffer y coordinate return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkScaleButton">
<description>
The ::popdown signal is a 
&amp;lt;link linkend=&quot;keybinding-signals&quot;&amp;gt;keybinding signal&amp;lt;/link&amp;gt; 
which gets emitted to popdown the scale widget.

The default binding for this signal is Escape.

Since: 2.12

</description>
<parameters>
<parameter name="button">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_button_set_color">
<description>
Sets the current color to be @color.

Since: 2.4

</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #GdkColor to set the current color with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_finishings">
<description>
Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the finishings

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_backward_line">
<description>
Moves @iter to the start of the previous line. Returns %TRUE if
@iter could be moved; i.e. if @iter was at character offset 0, this
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved
</return>
</function>

<function name="gtk_scale_button_set_value">
<description>
Sets the current value of the scale; if the value is outside 
the minimum or maximum range values, it will be clamped to fit 
inside them. The scale button emits the #GtkScaleButton::value-changed 
signal if the value changes.

Since: 2.12

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkScaleButton
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value of the scale button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_resolution">
<description>
Sets the value of %GTK_PRINT_SETTINGS_RESOLUTION.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="resolution">
<parameter_description> the resolution in dpi
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_visibility">
<description>
Sets whether the contents of the entry are visible or not. 
When visibility is set to %FALSE, characters are displayed 
as the invisible char, and will also appear that way when 
the text in the entry widget is copied elsewhere.

The default invisible char is the asterisk &apos;*&apos;, but it can
be changed with gtk_entry_set_invisible_char().

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> %TRUE if the contents of the entry are displayed
as plaintext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_menu_item_new_with_label_from_widget">
<description>
Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.
The new #GtkRadioMenuItem is added to the same group as @group.


</description>
<parameters>
<parameter name="group">
<parameter_description> an existing #GtkRadioMenuItem 
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text for the label
</parameter_description>
</parameter>
</parameters>
<return> The new #GtkRadioMenuItem

Since: 2.4
</return>
</function>

<function name="gtk_icon_info_get_base_size">
<description>
Gets the base size for the icon. The base size
is a size for the icon that was specified by
the icon theme creator. This may be different
than the actual size of image; an example of
this is small emblem icons that can be attached
to a larger icon. These icons will be given
the same base size as the larger icons to which
they are attached.


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
</parameters>
<return> the base size, or 0, if no base
size is known for the icon.

Since: 2.4
</return>
</function>

<function name="gtk_viewport_set_hadjustment">
<description>
Sets the horizontal adjustment of the viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_change_palette_hook">
<description>
Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
&quot;gtk-color-palette&quot; so all GtkColorSelection widgets will be modified.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call when the custom palette needs saving.
</parameter_description>
</parameter>
</parameters>
<return> the previous change palette hook (that was replaced).

Deprecated: This function is deprecated in favor of 
gtk_color_selection_set_change_palette_with_screen_hook(), and does
not work in multihead environments.

</return>
</function>

<function name="gtk_widget_set_tooltip_markup">
<description>
Sets @markup as the contents of the tooltip, which is marked up with
the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;.

This function will take care of setting GtkWidget:has-tooltip to %TRUE
and of the default handler for the GtkWidget::query-tooltip signal.

See also the GtkWidget:tooltip-markup property and
gtk_tooltip_set_markup().

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> the contents of the tooltip for @widget, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_for_targets">
<description>
Return value: %TRUE if any targets are present on the clipboard,

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> location to store an array of targets. The result
stored here must be freed with g_free().
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> location to store number of items in @targets.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if any targets are present on the clipboard,
otherwise %FALSE.

Since: 2.4
</return>
</function>

<function name="gtk_text_buffer_get_iter_at_child_anchor">
<description>
Obtains the location of @anchor within @buffer.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> an iterator to be initialized
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> a child anchor that appears in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_insert_action_text">
<description>
Inserts an action in @completion&apos;s action item list at position @index_
with text @text. If you want the action item to have markup, use
gtk_entry_completion_insert_action_markup().

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index of the item to insert.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> Text of the item to insert.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unparent">
<description>
This function is only for use in widget implementations.
Should be called by implementations of the remove method
on #GtkContainer, to dissociate a child from the container.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_toggled_tags">
<description>
Return value: tags toggled at this point

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="toggled_on">
<parameter_description> %TRUE to get toggled-on tags
</parameter_description>
</parameter>
</parameters>
<return> tags toggled at this point
</return>
</function>

<function name="gtk_radio_tool_button_new">
<description>
Creates a new #GtkRadioToolButton, adding it to @group.


</description>
<parameters>
<parameter name="group">
<parameter_description> An existing radio button group, or %NULL if you are creating a new group
</parameter_description>
</parameter>
</parameters>
<return> The new #GtkRadioToolButton

Since: 2.4
</return>
</function>

<function name="gtk_label_set_use_underline">
<description>
If true, an underline in the text indicates the next character should be
used for the mnemonic accelerator key.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_key_hash_new">
<description>
Create a new key hash object for doing binding resolution. 


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="item_destroy_notify">
<parameter_description> function to be called when items are removed
from the hash or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the newly created object. Free with _gtk_key_hash_free().
</return>
</function>

<function name="gtk_style_set_font">
<description>
Sets the #GdkFont to use for a given style. This is
meant only as a replacement for direct access to style-&amp;gt;font
and should not be used in new code. New code should
use style-&amp;gt;font_desc instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont, or %NULL to use the #GdkFont corresponding
to style-&amp;gt;font_desc.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_find_char">
<description>
Advances @iter, calling @pred on each character. If
@pred returns %TRUE, returns %TRUE and stops scanning.
If @pred never returns %TRUE, @iter is set to @limit if
@limit is non-%NULL, otherwise to the end iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="pred">
<parameter_description> a function to be called on each character
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @pred
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> search limit, or %NULL for none 
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_about_dialog_get_copyright">
<description>
Return value: The copyright string. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The copyright string. The string is owned by the about
dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_combo_box_get_row_separator_func">
<description>
Return value: the current row separator function.

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the current row separator function.

Since: 2.6
</return>
</function>

<function name="gtk_file_filter_filter">
<description>
Tests whether a file should be displayed according to @filter.
The #GtkFileFilterInfo structure @filter_info should include
the fields returned from gtk_file_filter_get_needed().

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkFileChooser.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
<parameter name="filter_info">
<parameter_description> a #GtkFileFilterInfo structure containing information
about a file.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file should be displayed

Since: 2.4
</return>
</function>

<function name="gtk_container_get_children">
<description>
Return value: a newly-allocated list of the container&apos;s non-internal children.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated list of the container&apos;s non-internal children.
</return>
</function>

<function name="gtk_calendar_select_day">
<description>
Selects a day from the current month.

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar.
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day number between 1 and 31, or 0 to unselect 
the currently selected day.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_push_colormap">
<description>
Pushes @cmap onto a global stack of colormaps; the topmost
colormap on the stack will be used to create all widgets.
Remove @cmap with gtk_widget_pop_colormap(). There&apos;s little
reason to use this function.

</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_stick">
<description>
Asks to stick @window, which means that it will appear on all user
desktops. Note that you shouldn&apos;t assume the window is definitely
stuck afterward, because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could unstick it
again, and some window managers do not support sticking
windows. But normally the window will end up stuck. Just don&apos;t
write code that crashes if not.

It&apos;s permitted to call this function before showing a window.

You can track stickiness via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_set_with_data">
<description>
Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description>  a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description>    array containing information about the available forms for the
clipboard data
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description>  number of elements in @targets
</parameter_description>
</parameter>
<parameter name="get_func">
<parameter_description>   function to call to get the actual clipboard data
</parameter_description>
</parameter>
<parameter name="clear_func">
<parameter_description> when the clipboard contents are set again, this function will
be called, and @get_func will not be subsequently called.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description>  user data to pass to @get_func and @clear_func.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the clipboard data succeeded. If setting
the clipboard data failed the provided callback functions
will be ignored.
</return>
</function>

<function name="gtk_notebook_set_tab_label_packing">
<description>
Sets the packing parameters for the tab label of the page
containing @child. See gtk_box_pack_start() for the exact meaning
of the parameters.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> whether to expand the bookmark or not
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> whether the bookmark should fill the allocated area or not
</parameter_description>
</parameter>
<parameter name="pack_type">
<parameter_description> the position of the bookmark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_set_icon">
<description>
Sets the icon that will be used for drags from a particular widget
from a pixmap/mask. GTK+ retains references for the arguments, and 
will release them when they are no longer needed.
Use gtk_drag_source_set_icon_pixbuf() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> the colormap of the icon
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the image data for the icon
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the transparency mask for an image.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_get_use_underline">
<description>
Return value: %TRUE if an embedded underline in the button label

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an embedded underline in the button label
indicates the mnemonic accelerator keys.
</return>
</function>

<function name="gtk_print_operation_set_export_filename">
<description>
Sets up the #GtkPrintOperation to generate a file instead
of showing the print dialog. The indended use of this function
is for implementing &quot;Export to PDF&quot; actions. Currently, PDF
is the only supported format.

&quot;Print to PDF&quot; support is independent of this and is done
by letting the user pick the &quot;Print to PDF&quot; item from the list
of printers in the print dialog.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the filename for the exported file
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_forall">
<description>
Invokes @callback on each child of @container, including children
that are considered &quot;internal&quot; (implementation details of the
container). &quot;Internal&quot; children generally weren&apos;t added by the user
of the container, but were added by the container implementation
itself.  Most applications should use gtk_container_foreach(),
rather than gtk_container_forall().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a callback
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> callback user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_overwrite">
<description>
Return value: whether @text_view is in overwrite mode or not.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> whether @text_view is in overwrite mode or not.

Since: 2.4
</return>
</function>

<function name="GtkCalendar">
<description>
Determines whether week numbers are displayed.

Since: 2.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_get_mode">
<description>
Gets the selection mode for @selection. See
gtk_tree_selection_set_mode().


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GtkTreeSelection
</parameter_description>
</parameter>
</parameters>
<return> the current selection mode
</return>
</function>

<function name="gtk_text_attributes_ref">
<description>
Increments the reference count on @values.


</description>
<parameters>
<parameter name="values">
<parameter_description> a #GtkTextAttributes
</parameter_description>
</parameter>
</parameters>
<return> the #GtkTextAttributes that were passed in
</return>
</function>

<function name="gtk_cell_editable_start_editing">
<description>
Begins editing on a @cell_editable. @event is the #GdkEvent that began 
the editing process. It may be %NULL, in the instance that editing was 
initiated through programatic means.

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> A #GtkCellEditable
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> A #GdkEvent, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_value">
<description>
Sets the current value of the range; if the value is outside the
minimum or maximum range values, it will be clamped to fit inside
them. The range emits the #GtkRange::value-changed signal if the 
value changes.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value of the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_button_set_use_underline">
<description>
If set, an underline in the label property indicates that the next character
should be used for the mnemonic accelerator key in the overflow menu. For
example, if the label property is &quot;_Open&quot; and @use_underline is %TRUE,
the label on the tool button will be &quot;Open&quot; and the item on the overflow
menu will have an underlined &apos;O&apos;.

Labels shown on tool buttons never have mnemonics on them; this property
only affects the menu item on the overflow menu.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> whether the button label has the form &quot;_Open&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_input_shape_combine_mask">
<description>
Sets an input shape for this widget&apos;s GDK window. This allows for
windows which react to mouse click in a nonrectangular region, see 
gdk_window_input_shape_combine_mask() for more information.

Since: 2.10

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="shape_mask">
<parameter_description> shape to be added, or %NULL to remove an existing shape
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of shape mask with respect to @window
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of shape mask with respect to @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_extension_events">
<description>
Retrieves the extension events the widget will receive; see
gdk_input_set_extension_events().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> extension events for @widget
</return>
</function>

<function name="gtk_range_set_upper_stepper_sensitivity">
<description>
Sets the sensitivity policy for the stepper that points to the
&apos;upper&apos; end of the GtkRange&apos;s adjustment.

Since: 2.10

</description>
<parameters>
<parameter name="range">
<parameter_description>       a #GtkRange
</parameter_description>
</parameter>
<parameter name="sensitivity">
<parameter_description> the upper stepper&apos;s sensitivity policy.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_targets_include_rich_text">
<description>
Determines if any of the targets in @targets can be used to
provide rich text.


</description>
<parameters>
<parameter name="targets">
<parameter_description> an array of #GdkAtom&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the length of @targets
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @targets include a suitable target for rich text,
otherwise %FALSE.

Since: 2.10
</return>
</function>

<function name="gtk_page_setup_set_top_margin">
<description>
Sets the top margin of the #GtkPageSetup.

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="margin">
<parameter_description> the new top margin in units of @unit
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the units for @margin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_remove_accelerator">
<description>
Removes an accelerator from @widget, previously installed with
gtk_widget_add_accelerator().

</description>
<parameters>
<parameter name="widget">
<parameter_description>       widget to install an accelerator on
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description>  accel group for this widget
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>    GDK keyval of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>   modifier key combination of the accelerator
</parameter_description>
</parameter>
</parameters>
<return>      whether an accelerator was installed and could be removed
</return>
</function>

<function name="_gtk_widget_get_aux_info">
<description>
Get the #GtkWidgetAuxInfo structure for the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="create">
<parameter_description> if %TRUE, create the structure if it doesn&apos;t exist
</parameter_description>
</parameter>
</parameters>
<return> the #GtkAuxInfo structure for the widget, or
%NULL if @create is %FALSE and one doesn&apos;t already exist.
</return>
</function>

<function name="gtk_tree_view_get_hover_expand">
<description>
Return value: %TRUE if @tree_view is in hover expansion mode

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tree_view is in hover expansion mode

Since: 2.6 
</return>
</function>

<function name="gtk_tree_view_column_get_spacing">
<description>
Return value: the spacing of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> the spacing of @tree_column.
</return>
</function>

<function name="gtk_entry_completion_get_model">
<description>
Returns %NULL if the model is unset.
Return value: A #GtkTreeModel, or %NULL if none is currently being used.

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeModel, or %NULL if none is currently being used.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_get_char">
<description>
returns 0.
Return value: a Unicode character, or 0 if @iter is not dereferenceable

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character, or 0 if @iter is not dereferenceable
</return>
</function>

<function name="gtk_window_get_role">
<description>
Return value: the role of the window if set, or %NULL. The

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the role of the window if set, or %NULL. The
returned is owned by the widget and must not be modified
or freed.
</return>
</function>

<function name="gtk_entry_completion_insert_action_markup">
<description>
Inserts an action in @completion&apos;s action item list at position @index_
with markup @markup.

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index of the item to insert.
</parameter_description>
</parameter>
<parameter name="markup">
<parameter_description> Markup of the item to insert.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_key_hash_free">
<description>
Destroys a key hash created with gtk_key_hash_new()

</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_widget_new">
<description>
Creates a new #GtkFileChooserWidget.  This is a file chooser widget that can
be embedded in custom windows, and it is the same widget that is used by
#GtkFileChooserDialog.


</description>
<parameters>
<parameter name="action">
<parameter_description> Open or save mode for the widget
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkFileChooserWidget

Since: 2.4
</return>
</function>

<function name="gtk_notebook_set_window_creation_hook">
<description>
Installs a global function used to create a window
when a detached tab is dropped in an empty area.

Since: 2.10

</description>
<parameters>
<parameter name="func">
<parameter_description> the #GtkNotebookWindowCreationFunc, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data for @func
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier for @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_get_label">
<description>
If the frame&apos;s label widget is a #GtkLabel, returns the
text in the label widget. (The frame will have a #GtkLabel
for the label widget if a non-%NULL argument was passed
to gtk_frame_new().)


</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
</parameters>
<return> the text in the label, or %NULL if there
was no label widget or the lable widget was not
a #GtkLabel. This string is owned by GTK+ and
must not be modified or freed.
</return>
</function>

<function name="gtk_size_group_set_mode">
<description>
Sets the #GtkSizeGroupMode of the size group. The mode of the size
group determines whether the widgets in the size group should
all have the same horizontal requisition (%GTK_SIZE_GROUP_MODE_HORIZONTAL)
all have the same vertical requisition (%GTK_SIZE_GROUP_MODE_VERTICAL),
or should all have the same requisition in both directions
(%GTK_SIZE_GROUP_MODE_BOTH).

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to set for the size group.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_begin_user_action">
<description>
Called to indicate that the buffer operations between here and a
call to gtk_text_buffer_end_user_action() are part of a single
user-visible operation. The operations between
gtk_text_buffer_begin_user_action() and
gtk_text_buffer_end_user_action() can then be grouped when creating
an undo stack. #GtkTextBuffer maintains a count of calls to
gtk_text_buffer_begin_user_action() that have not been closed with
a call to gtk_text_buffer_end_user_action(), and emits the 
&quot;begin_user_action&quot; and &quot;end_user_action&quot; signals only for the 
outermost pair of calls. This allows you to build user actions 
from other user actions.

The &quot;interactive&quot; buffer mutation functions, such as
gtk_text_buffer_insert_interactive(), automatically call begin/end
user action around the buffer operations they perform, so there&apos;s
no need to add extra calls if you user action consists solely of a
single call to one of those functions.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_new">
<description>
Creates a new #GtkTreeView widget.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreeView widget.
</return>
</function>

<function name="gtk_print_job_get_settings">
<description>
Gets the #GtkPrintSettings of the print job.


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
</parameters>
<return> the settings of @job

Since: 2.10
</return>
</function>

<function name="gtk_combo_box_get_row_span_column">
<description>
Returns: the row span column.

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the row span column.

Since: 2.6
</return>
</function>

<function name="gtk_page_setup_unix_dialog_set_page_setup">
<description>
Sets the #GtkPageSetup from which the page setup
dialog takes its values.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPageSetupUnixDialog
</parameter_description>
</parameter>
<parameter name="page_setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_ensure_update">
<description>
Makes sure that all pending updates to the UI have been completed.

This may occasionally be necessary, since #GtkUIManager updates the 
UI in an idle function. A typical example where this function is
useful is to enforce that the menubar and toolbar have been added to 
the main window before showing it:
&amp;lt;informalexample&amp;gt;
&amp;lt;programlisting&amp;gt;
gtk_container_add (GTK_CONTAINER (window), vbox); 
g_signal_connect (merge, &quot;add_widget&quot;, 
G_CALLBACK (add_widget), vbox);
gtk_ui_manager_add_ui_from_file (merge, &quot;my-menus&quot;);
gtk_ui_manager_add_ui_from_file (merge, &quot;my-toolbars&quot;);
gtk_ui_manager_ensure_update (merge);  
gtk_widget_show (window);
&amp;lt;/programlisting&amp;gt;
&amp;lt;/informalexample&amp;gt;

Since: 2.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_widget">
<description>
Sets the widget in the header to be @widget.  If widget is %NULL, then the
header button is set with a #GtkLabel set to the title of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> A child #GtkWidget, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_swap">
<description>
Swaps @a and @b in the same level of @tree_store. Note that this function
only works with unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Another #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_reverse">
<description>
Sets the value of %GTK_PRINT_SETTINGS_REVERSE.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="reverse">
<parameter_description> whether to reverse the output
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_columns">
<description>
Return value: the number of columns, or -1

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the number of columns, or -1

Since: 2.6
</return>
</function>

<function name="_gtk_file_chooser_unselect_path">
<description>
Unselects the file referred to by @path. An internal
function. See _gtk_file_chooser_unselect_uri().

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the filename to path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_disconnect_key">
<description>
Removes an accelerator previously installed through
gtk_accel_group_connect().

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install an accelerator in
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>        key value of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>       modifier combination of the accelerator
</parameter_description>
</parameter>
</parameters>
<return>          %TRUE if there was an accelerator which could be 
removed, %FALSE otherwise
</return>
</function>

<function name="gtk_print_settings_foreach">
<description>
Calls @func for each key-value pair of @settings.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_intersect">
<description>
Computes the intersection of a @widget&apos;s area and @area, storing
the intersection in @intersection, and returns %TRUE if there was
an intersection.  @intersection may be %NULL if you&apos;re only
interested in whether there was an intersection.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> a rectangle
</parameter_description>
</parameter>
<parameter name="intersection">
<parameter_description> rectangle to store intersection of @widget and @area
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was an intersection
</return>
</function>

<function name="gtk_image_new_from_animation">
<description>
Creates a #GtkImage displaying the given animation.
The #GtkImage does not assume a reference to the
animation; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.

Note that the animation frames are shown using a timeout with
#G_PRIORITY_DEFAULT. When using animations to indicate busyness,
keep in mind that the animation will only be shown if the main loop
is not busy with something that has a higher priority.


</description>
<parameters>
<parameter name="animation">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage widget
</return>
</function>

<function name="gtk_style_render_icon">
<description>
Renders the icon specified by @source at the given @size 
according to the given parameters and returns the result in a 
pixbuf.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> the #GtkIconSource specifying the icon to render
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> a text direction
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size to render the icon at. A size of (GtkIconSize)-1
means render at the size of the source and don&apos;t scale.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget 
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail
</parameter_description>
</parameter>
</parameters>
<return> a newly-created #GdkPixbuf containing the rendered icon
</return>
</function>

<function name="gtk_box_get_homogeneous">
<description>
Return value: %TRUE if the box is homogeneous.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the box is homogeneous.
</return>
</function>

<function name="gtk_target_list_add">
<description>
Appends another target to a #GtkTargetList.

</description>
<parameters>
<parameter name="list">
<parameter_description>  a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the interned atom representing the target
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags for this target
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> an ID that will be passed back to the application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkLinkButton">
<description>
The URI bound to this button.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_icon_set_new">
<description>
Creates a new #GtkIconSet. A #GtkIconSet represents a single icon
in various sizes and widget states. It can provide a #GdkPixbuf
for a given size and state on request, and automatically caches
some of the rendered #GdkPixbuf objects.

Normally you would use gtk_widget_render_icon() instead of
using #GtkIconSet directly. The one case where you&apos;d use
#GtkIconSet is to create application-specific icon sets to place in
a #GtkIconFactory.


</description>
<parameters>
</parameters>
<return> a new #GtkIconSet
</return>
</function>

<function name="gtk_file_selection_set_filename">
<description>
Sets a default path for the file requestor. If @filename includes a
directory path, then the requestor will open with that path as its
current working directory.

This has the consequence that in order to open the requestor with a 
working directory and an empty filename, @filename must have a trailing
directory separator.

The encoding of @filename is preferred GLib file name encoding, which
may not be UTF-8. See g_filename_from_utf8().

</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description>  a string to set as the default file name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_get_vadjustment">
<description>
Return value: the vertical adjustment of @viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
</parameters>
<return> the vertical adjustment of @viewport.
</return>
</function>

<function name="gtk_recent_chooser_set_show_icons">
<description>
Sets whether @chooser should show an icon near the resource when
displaying it.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="show_icons">
<parameter_description> whether to show an icon near the resource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_select_range">
<description>
Selects a range of nodes, determined by @start_path and @end_path inclusive.
@selection must be set to #GTK_SELECTION_MULTIPLE mode. 

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="start_path">
<parameter_description> The initial node of the range.
</parameter_description>
</parameter>
<parameter name="end_path">
<parameter_description> The final node of the range.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_get_icon_sizes">
<description>
Return value: An newly allocated array describing the sizes at

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the name of an icon
</parameter_description>
</parameter>
</parameters>
<return> An newly allocated array describing the sizes at
which the icon is available. The array should be freed with g_free()
when it is no longer needed.

Since: 2.6
</return>
</function>

<function name="gtk_text_iter_backward_sentence_starts">
<description>
Calls gtk_text_iter_backward_sentence_start() up to @count times,
or until it returns %FALSE. If @count is negative, moves forward
instead of backward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of sentences to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_recent_chooser_select_all">
<description>
Selects all the items inside @chooser, if the @chooser supports
multiple selection.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_opacity">
<description>
Request the windowing system to make @window partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) On X11
this has any effect only on X screens with a compositing manager
running. See gtk_widget_is_composited(). On Windows it should work
always.

Note that setting a window&apos;s opacity after the window has been
shown causes it to flicker once on Windows.

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> desired opacity, between 0 and 1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_default_source">
<description>
Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="default_source">
<parameter_description> the default source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_remove_shortcut_folder">
<description>
Removes a folder from the shortcut folders in a file chooser.  Internal
function, see gtk_file_chooser_remove_shortcut_folder().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of the folder to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be removed successfully, %FALSE
otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_tree_model_get_value">
<description>
Sets initializes and sets @value to that at @column.  When done with @value,
g_value_unset() needs to be called to free any allocated memory.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The column to lookup the value at.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> An empty #GValue to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete">
<description>
Deletes text between @start and @end. The order of @start and @end
is not actually relevant; gtk_text_buffer_delete() will reorder
them. This function actually emits the &quot;delete_range&quot; signal, and
the default handler of that signal deletes the text. Because the
buffer is modified, all outstanding iterators become invalid after
calling this function; however, the @start and @end will be
re-initialized to point to the location where text was deleted.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> another position in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_get_depth">
<description>
Return value: The depth of @path

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> The depth of @path
</return>
</function>

<function name="gtk_image_set_from_file">
<description>
See gtk_image_new_from_file() for details.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> a filename or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_add_targets">
<description>
Prepends a table of targets to the list of supported targets
for a given widget and selection.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> the selection
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> a table of targets to add
</parameter_description>
</parameter>
<parameter name="ntargets">
<parameter_description>  number of entries in @targets
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_get_current_event">
<description>
Obtains a copy of the event currently being processed by GTK+.  For
example, if you get a &quot;clicked&quot; signal from #GtkButton, the current
event will be the #GdkEventButton that triggered the &quot;clicked&quot;
signal. The returned event must be freed with gdk_event_free().
If there is no current event, the function returns %NULL.


</description>
<parameters>
</parameters>
<return> a copy of the current event, or %NULL if no current event.
</return>
</function>

<function name="gtk_target_table_new_from_list">
<description>
This function creates an #GtkTargetEntry array that contains the
same targets as the passed %list. The returned table is newly
allocated and should be freed using gtk_target_table_free() when no
longer needed.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> return location for the number ot targets in the table
</parameter_description>
</parameter>
</parameters>
<return> the new table.

Since: 2.10
</return>
</function>

<function name="gtk_notebook_popup_disable">
<description>
Disables the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_set_new_from_pixbuf">
<description>
Creates a new #GtkIconSet with @pixbuf as the default/fallback
source image. If you don&apos;t add any additional #GtkIconSource to the
icon set, all variants of the icon will be created from @pixbuf,
using scaling, pixelation, etc. as required to adjust the icon size
or make the icon look insensitive/prelighted.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkIconSet
</return>
</function>

<function name="_gtk_text_btree_validate">
<description>
Validate a single contiguous invalid region of a #GtkTextBTree for
a given view.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextBTree
</parameter_description>
</parameter>
<parameter name="view_id">
<parameter_description> view id
</parameter_description>
</parameter>
<parameter name="max_pixels">
<parameter_description> the maximum number of pixels to validate. (No more
than one paragraph beyond this limit will be validated)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store starting y coordinate of validated region
</parameter_description>
</parameter>
<parameter name="old_height">
<parameter_description> location to store old height of validated region
</parameter_description>
</parameter>
<parameter name="new_height">
<parameter_description> location to store new height of validated region
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a region has been validated, %FALSE if the
entire tree was already valid.
</return>
</function>

<function name="gtk_text_iter_set_offset">
<description>
Sets @iter to point to @char_offset. @char_offset counts from the start
of the entire text buffer, starting with 0.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="char_offset">
<parameter_description> a character number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_search_position_func">
<description>
Sets the function to use when positioning the seach dialog.

Since: 2.10

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to use to position the search dialog, or %NULL
to use the default search position function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier for @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_convert_tree_to_widget_coords">
<description>
Converts tree coordinates (coordinates in full scrollable area of the tree)
to widget coordinates.

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> X coordinate relative to the tree
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> Y coordinate relative to the tree
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> return location for widget X coordinate
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> return location for widget Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_stop_editing">
<description>
Informs the cell renderer that the editing is stopped.
If @canceled is %TRUE, the cell renderer will emit the 
#GtkCellRenderer::editing-canceled signal. 

This function should be called by cell renderer implementations 
in response to the #GtkCellEditable::editing-done signal of 
#GtkCellEditable.

Since: 2.6

</description>
<parameters>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="canceled">
<parameter_description> %TRUE if the editing has been canceled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_icon_list">
<description>
Sets an icon list to be used as fallback for windows that haven&apos;t
had gtk_window_set_icon_list() called on them to set up a
window-specific icon list. This function allows you to set up the
icon for all windows in your app at once.

See gtk_window_set_icon_list() for more details.


</description>
<parameters>
<parameter name="list">
<parameter_description> a list of #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_is_local">
<description>
Checks whether the resource is local or not by looking at the
scheme of its URI.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the resource is local.

Since: 2.10
</return>
</function>

<function name="gtk_clipboard_set_image">
<description>
Sets the contents of the clipboard to the given #GdkPixbuf. 
GTK+ will take responsibility for responding for requests 
for the image, and for converting the image into the 
requested format.

Since: 2.6

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard object
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description>    a #GdkPixbuf 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_homogeneous">
<description>
Return value: %TRUE if the item is the same size as other homogeneous

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item is the same size as other homogeneous
item.s

Since: 2.4
</return>
</function>

<function name="gtk_image_menu_item_new_from_stock">
<description>
Creates a new #GtkImageMenuItem containing the image and text from a 
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK 
and #GTK_STOCK_APPLY.

If you want this menu item to have changeable accelerators, then pass in
%NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an
appropriate path for the menu item, use gtk_stock_lookup() to look up the
standard accelerator for the stock item, and if one is found, call
gtk_accel_map_add_entry() to register it.

</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of the stock item.
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> the #GtkAccelGroup to add the menu items accelerator to,
or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImageMenuItem.
</return>
</function>

<function name="gtk_item_factory_from_widget">
<description>
Obtains the item factory from which a widget was created.

Deprecated: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return> the item factory from which @widget was created, or %NULL
</return>
</function>

<function name="gtk_icon_factory_new">
<description>
Creates a new #GtkIconFactory. An icon factory manages a collection
of #GtkIconSet&amp;lt;!-- --&amp;gt;s; a #GtkIconSet manages a set of variants of a
particular icon (i.e. a #GtkIconSet contains variants for different
sizes and widget states). Icons in an icon factory are named by a
stock ID, which is a simple string identifying the icon. Each
#GtkStyle has a list of #GtkIconFactory&amp;lt;!-- --&amp;gt;s derived from the current
theme; those icon factories are consulted first when searching for
an icon. If the theme doesn&apos;t set a particular icon, GTK+ looks for
the icon in a list of default icon factories, maintained by
gtk_icon_factory_add_default() and
gtk_icon_factory_remove_default(). Applications with icons should
add a default icon factory with their icons, which will allow
themes to override the icons for the application.


</description>
<parameters>
</parameters>
<return> a new #GtkIconFactory
</return>
</function>

<function name="gtk_widget_queue_shallow_draw">
<description>
Like gtk_widget_queue_draw(), but only windows owned
by @widget are invalidated.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_set_tooltip">
<description>
Sets the tooltip of the status icon.

Since: 2.10

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the tooltip text, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_add_age">
<description>
Adds a rule that allows resources based on their age - that is, the number
of days elapsed since they were last modified.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="days">
<parameter_description> number of days
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_new">
<description>
Creates a new empty #GtkComboBox.


</description>
<parameters>
</parameters>
<return> A new #GtkComboBox.

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_new">
<description>
Creates a new #GtkPrintSettings object.


</description>
<parameters>
</parameters>
<return> a new #GtkPrintSettings object

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_get_line_index">
<description>
Return value: distance from start of line, in bytes

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> distance from start of line, in bytes
</return>
</function>

<function name="gtk_tree_model_iter_n_children">
<description>
Return value: The number of children of @iter.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The number of children of @iter.
</return>
</function>

<function name="gtk_recent_chooser_get_current_item">
<description>
Gets the #GtkRecentInfo currently selected by @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> a #GtkRecentInfo.  Use gtk_recent_info_unref() when
when you have finished using it.

Since: 2.10
</return>
</function>

<function name="gtk_image_set_from_image">
<description>
See gtk_image_new_from_image() for details.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="gdk_image">
<parameter_description> a #GdkImage or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_get_top_margin">
<description>
Gets the top margin in units of @unit.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the top margin

Since: 2.10
</return>
</function>

<function name="GtkToggleToolButton">
<description>
Emitted whenever the toggle tool button changes state.

</description>
<parameters>
<parameter name="toggle_tool_button">
<parameter_description> the object that emitted the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_targets_include_image">
<description>
Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide a #GdkPixbuf.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
<parameter name="writable">
<parameter_description> whether to accept only targets for which GTK+ knows
how to convert a pixbuf into the format
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data holds a list of targets,
and a suitable target for images is included, otherwise %FALSE.

Since: 2.6
</return>
</function>

<function name="gtk_color_selection_palette_from_string">
<description>
Parses a color palette string; the string is a colon-separated
list of color names readable by gdk_color_parse().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string encoding a color palette.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> return location for allocated array of #GdkColor.
</parameter_description>
</parameter>
<parameter name="n_colors">
<parameter_description> return location for length of array.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a palette was successfully parsed.
</return>
</function>

<function name="gtk_about_dialog_get_name">
<description>
Return value: The program name. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The program name. The string is owned by the about
dialog and must not be modified.

Since: 2.6

@Deprecated: 2.12: Use gtk_about_dialog_get_program_name() instead.
</return>
</function>

<function name="gtk_scrolled_window_get_policy">
<description>
Retrieves the current policy values for the horizontal and vertical
scrollbars. See gtk_scrolled_window_set_policy().

</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
<parameter name="hscrollbar_policy">
<parameter_description> location to store the policy for the horizontal scrollbar, or %NULL.
</parameter_description>
</parameter>
<parameter name="vscrollbar_policy">
<parameter_description> location to store the policy for the horizontal scrollbar, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_class_path">
<description>
Same as gtk_widget_path(), but always uses the name of a widget&apos;s type,
never uses a custom name set with gtk_widget_set_name().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="path_length">
<parameter_description> location to store the length of the class path, or %NULL
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> location to store the class path as an allocated string, or %NULL
</parameter_description>
</parameter>
<parameter name="path_reversed">
<parameter_description> location to store the reverse class path as an allocated 
string, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_value">
<description>
Set the value of @spin_button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_builder_add_from_string">
<description>
Parses a string containing a &amp;lt;link linkend=&quot;BUILDER-UI&quot;&amp;gt;GtkBuilder 
UI definition&amp;lt;/link&amp;gt; and merges it with the current contents of @builder. 


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the string to parse
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @buffer (may be -1 if @buffer is nul-terminated)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A positive value on success, 0 if an error occurred

Since: 2.12
</return>
</function>

<function name="gtk_list_store_append">
<description>
Appends a new row to @list_store.  @iter will be changed to point to this new
row.  The row will be empty after this function is called.  To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the appended row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_fixed_width">
<description>
Gets the fixed width of the column.  This value is only meaning may not be
the actual width of the column on the screen, just what is requested.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> the fixed width of the column
</return>
</function>

<function name="gtk_recent_info_get_uri_display">
<description>
Gets a displayable version of the resource&apos;s URI.  If the resource
is local, it returns a local path; if the resource is not local,
it returns the UTF-8 encoded content of gtk_recent_info_get_uri().


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string containing the resource&apos;s URI or %NULL

Since: 2.10
</return>
</function>

<function name="gtk_notebook_set_tab_border">
<description>
Sets the width the border around the tab labels
in a notebook. This is equivalent to calling
gtk_notebook_set_tab_hborder (@notebook, @border_width) followed
by gtk_notebook_set_tab_vborder (@notebook, @border_width).

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="border_width">
<parameter_description> width of the border around the tab labels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_dither">
<description>
Sets the value of %GTK_PRINT_SETTINGS_DITHER.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> the dithering that is used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_propagate_event">
<description>
Sends an event to a widget, propagating the event to parent widgets
if the event remains unhandled. Events received by GTK+ from GDK
normally begin in gtk_main_do_event(). Depending on the type of
event, existence of modal dialogs, grabs, etc., the event may be
propagated; if so, this function is used. gtk_propagate_event()
calls gtk_widget_event() on each widget it decides to send the
event to.  So gtk_widget_event() is the lowest-level function; it
simply emits the &quot;event&quot; and possibly an event-specific signal on a
widget.  gtk_propagate_event() is a bit higher-level, and
gtk_main_do_event() is the highest level.

All that said, you most likely don&apos;t want to use any of these
functions; synthesizing events is rarely needed. Consider asking on
the mailing list for better ways to achieve your goals. For
example, use gdk_window_invalidate_rect() or
gtk_widget_queue_draw() instead of making up expose events.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> an event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_get_internal_child">
<description>
Get the internal child called @childname of the @buildable object.


</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="childname">
<parameter_description> name of child
</parameter_description>
</parameter>
</parameters>
<return> the internal child of the buildable object 

Since: 2.12
</return>
</function>

<function name="GtkCellRendererToggle">
<description>
The ::toggled signal is emitted when the cell is toggled. 

</description>
<parameters>
<parameter name="cell_renderer">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> string representation of #GtkTreePath describing the 
event location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_max_length">
<description>
Sets the maximum allowed length of the contents of the widget. If
the current contents are longer than the given length, then they
will be truncated to fit.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum length of the entry, or 0 for no maximum.
(other than the maximum length of entries.) The value passed in will
be clamped to the range 0-65536.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_get_limit">
<description>
Gets the maximum number of items that the gtk_recent_manager_get_items()
function should return.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
</parameters>
<return> the number of items to return, or -1 for every item.

Since: 2.10
</return>
</function>

<function name="gtk_button_set_alignment">
<description>
Sets the alignment of the child. This property has no effect unless 
the child is a #GtkMisc or a #GtkAligment.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> the horizontal position of the child, 0.0 is left aligned, 
1.0 is right aligned
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> the vertical position of the child, 0.0 is top aligned, 
1.0 is bottom aligned
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_get_metrics">
<description>
Queries the size and ring width of an HSV color selector.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Return value for the diameter of the hue ring.
</parameter_description>
</parameter>
<parameter name="ring_width">
<parameter_description> Return value for the width of the hue ring.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_pixels_above_lines">
<description>
Gets the default number of pixels to put above paragraphs.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default number of pixels above paragraphs
</return>
</function>

<function name="gtk_font_button_get_use_font">
<description>
Returns: whether the selected font is used in the label.

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
</parameters>
<return> whether the selected font is used in the label.

Since: 2.4
</return>
</function>

<function name="gtk_link_button_new_with_label">
<description>
Creates a new #GtkLinkButton containing a label.


</description>
<parameters>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button
</parameter_description>
</parameter>
</parameters>
<return> a new link button widget.

Since: 2.10
</return>
</function>

<function name="gtk_menu_tool_button_new_from_stock">
<description>
Creates a new #GtkMenuToolButton.
The new #GtkMenuToolButton will contain an icon and label from
the stock item indicated by @stock_id.


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of a stock item
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkMenuToolButton

Since: 2.6
</return>
</function>

<function name="gtk_about_dialog_get_website">
<description>
Return value: The website URL. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The website URL. The string is owned by the about
dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_action_group_set_translate_func">
<description>
Sets a function to be used for translating the @label and @tooltip of 
#GtkActionGroupEntry&amp;lt;!-- --&amp;gt;s added by gtk_action_group_add_actions().

If you&apos;re using gettext(), it is enough to set the translation domain
with gtk_action_group_set_translation_domain().

Since: 2.4 

</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GtkActionGroup
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GtkTranslateFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to be passed to @func and @notify
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GtkDestroyNotify function to be called when @action_group is 
destroyed and when the translation function is changed again
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_alignment_set_padding">
<description>
Sets the padding on the different sides of the widget.
The padding adds blank space to the sides of the widget. For instance,
this can be used to indent the child widget towards the right by adding
padding on the left.

Since: 2.4

</description>
<parameters>
<parameter name="alignment">
<parameter_description> a #GtkAlignment
</parameter_description>
</parameter>
<parameter name="padding_top">
<parameter_description> the padding at the top of the widget
</parameter_description>
</parameter>
<parameter name="padding_bottom">
<parameter_description> the padding at the bottom of the widget
</parameter_description>
</parameter>
<parameter name="padding_left">
<parameter_description> the padding at the left of the widget
</parameter_description>
</parameter>
<parameter name="padding_right">
<parameter_description> the padding at the right of the widget.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set">
<description>
Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set. 
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to &quot;Foo&quot;, you would write 
&amp;lt;literal&amp;gt;gtk_tree_store_set (store, iter, 0, &quot;Foo&quot;, -1)&amp;lt;/literal&amp;gt;.

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_unselect_range">
<description>
Unselects a range of nodes, determined by @start_path and @end_path
inclusive.

Since: 2.2

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="start_path">
<parameter_description> The initial node of the range.
</parameter_description>
</parameter>
<parameter name="end_path">
<parameter_description> The initial node of the range.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_get_minimum_key_length">
<description>
Return value: The currently used minimum key length.

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
</parameters>
<return> The currently used minimum key length.

Since: 2.4
</return>
</function>

<function name="gtk_binding_parse_binding">
<description>
Deprecated as public API, used only internally.


</description>
<parameters>
<parameter name="scanner">
<parameter_description> GtkRC scanner
</parameter_description>
</parameter>
</parameters>
<return> expected token upon errors, %G_TOKEN_NONE on success.
</return>
</function>

<function name="gtk_text_buffer_delete_mark_by_name">
<description>
Deletes the mark named @name; the mark must exist. See
gtk_text_buffer_delete_mark() for details.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a mark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_no_show_all">
<description>
Return value: the current value of the &quot;no-show-all&quot; property.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the current value of the &quot;no-show-all&quot; property.

Since: 2.4
</return>
</function>

<function name="gtk_paint_resize_grip">
<description>
Draws a resize grip in the given rectangle on @window using the given
parameters. 

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_unref">
<description>
Decrements the reference count on @values, freeing the structure
if the reference count reaches 0.

</description>
<parameters>
<parameter name="values">
<parameter_description> a #GtkTextAttributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_get_artists">
<description>
Return value: A %NULL-terminated string array containing

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> A %NULL-terminated string array containing
the artists. The array is owned by the about dialog 
and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_print_settings_get_paper_height">
<description>
Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
converted to @unit. 


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the paper height, in units of @unit

Since: 2.10
</return>
</function>

<function name="gtk_tree_drag_dest_row_drop_possible">
<description>
Determines whether a drop is possible before the given @dest_path,
at the same depth as @dest_path. i.e., can we drop the data in
@selection_data at that location. @dest_path does not have to
exist; the return value will almost certainly be %FALSE if the
parent of @dest_path doesn&apos;t exist, though.


</description>
<parameters>
<parameter name="drag_dest">
<parameter_description> a #GtkTreeDragDest
</parameter_description>
</parameter>
<parameter name="dest_path">
<parameter_description> destination row
</parameter_description>
</parameter>
<parameter name="selection_data">
<parameter_description> the data being dragged
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a drop is possible before @dest_path
</return>
</function>

<function name="gtk_menu_item_get_right_justified">
<description>
Gets whether the menu item appears justified at the right
side of the menu bar.


</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu item will appear at the
far right if added to a menu bar.
</return>
</function>

<function name="gtk_text_buffer_remove_tag">
<description>
Emits the &quot;remove_tag&quot; signal. The default handler for the signal
removes all occurrences of @tag from the given range. @start and
@end don&apos;t have to be in order.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be untagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be untagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_module_dir">
<description>
return value: the directory. (Must be freed with g_free())

</description>
<parameters>
</parameters>
<return> the directory. (Must be freed with g_free())
</return>
</function>

<function name="gtk_tree_path_is_descendant">
<description>
Return value: %TRUE if @ancestor contains @path somewhere below it

</description>
<parameters>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> another #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @ancestor contains @path somewhere below it
</return>
</function>

<function name="gtk_color_button_set_title">
<description>
Sets the title for the color selection dialog.

Since: 2.4

</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> String containing new window title.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_binding_entry_add_signall">
<description>
Deprecated.

</description>
<parameters>
<parameter name="binding_set">
<parameter_description>  binding set to add a signal to
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>       key value
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>    key modifier
</parameter_description>
</parameter>
<parameter name="signal_name">
<parameter_description>  signal name to be bound
</parameter_description>
</parameter>
<parameter name="binding_args">
<parameter_description> list of #GtkBindingArg signal arguments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_action">
<description>
Gets the type of operation that the file chooser is performing; see
gtk_file_chooser_set_action().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the action that the file selector is performing

Since: 2.4
</return>
</function>

<function name="gtk_print_operation_set_track_print_status">
<description>
If track_status is %TRUE, the print operation will try to continue report
on the status of the print job in the printer queues and printer. This
can allow your application to show things like &quot;out of paper&quot; issues,
and when the print job actually reaches the printer.

This function is often implemented using some form of polling, so it should
not be enabled unless needed.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="track_status">
<parameter_description> %TRUE to track status after printing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_icon_from_file">
<description>
Sets the icon for @window.  
Warns on failure if @err is %NULL.

This function is equivalent to calling gtk_window_set_icon()
with a pixbuf created by loading the image from @filename.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> location of icon file
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> location to store error, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the icon succeeded.

Since: 2.2
</return>
</function>

<function name="gtk_tree_store_move_after">
<description>
Moves @iter in @tree_store to the position after @position. @iter and
@position should be in the same level. Note that this function only
works with unsorted stores. If @position is %NULL, @iter will be moved
to the start of the level.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_bool">
<description>
Sets @key to a boolean value.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_get_completion_prefix">
<description>
Get the original text entered by the user that triggered
the completion or %NULL if there&apos;s no completion ongoing.


</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> the prefix for the current completion

Since: 2.12
</return>
</function>

<function name="gtk_text_layout_move_iter_to_x">
<description>
Keeping the iterator on the same line of the layout, move it to the
specified X coordinate. The lines of a wrapped paragraph are
treated as distinct for this operation.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      X coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_remove_all">
<description>
Removes all handlers and unsets ownership of all 
selections for a widget. Called when widget is being
destroyed. This function will not generally be
called by applications.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_selection_bounds">
<description>
Gets the selected range of characters in the label, returning %TRUE
if there&apos;s a selection.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> return location for start of selection, as a character offset
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> return location for end of selection, as a character offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if selection is non-empty
</return>
</function>

<function name="gtk_print_settings_get_media_type">
<description>
Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

The set of media types is defined in PWG 5101.1-2002 PWG.
&amp;lt;!-- FIXME link here --&amp;gt;


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the media type

Since: 2.10
</return>
</function>

<function name="gtk_dialog_get_has_separator">
<description>
Accessor for whether the dialog has a separator.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the dialog has a separator
</return>
</function>

<function name="gtk_tree_view_column_get_cell_renderers">
<description>
Return value: A list of #GtkCellRenderers

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkCellRenderers
</return>
</function>

<function name="gtk_toolbar_remove_space">
<description>
Removes a space from the specified position.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index of the space to remove.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_socket_add_grabbed_key">
<description>
@socket: a #GtkSocket
@keyval: a key
@modifiers: modifiers for the key

Called from the GtkSocket platform-specific backend when the
corresponding plug has told the socket to grab a key.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_drag_dest_drag_data_received">
<description>
Asks the #GtkTreeDragDest to insert a row before the path @dest,
deriving the contents of the row from @selection_data. If @dest is
outside the tree so that inserting before it is impossible, %FALSE
will be returned. Also, %FALSE may be returned if the new row is
not created for some model-specific reason.  Should robustly handle
a @dest no longer found in the model!


</description>
<parameters>
<parameter name="drag_dest">
<parameter_description> a #GtkTreeDragDest
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> row to drop in front of
</parameter_description>
</parameter>
<parameter name="selection_data">
<parameter_description> data to drop
</parameter_description>
</parameter>
</parameters>
<return> whether a new row was created before position @dest
</return>
</function>

<function name="gtk_ui_manager_get_toplevels">
<description>
Obtains a list of all toplevel widgets of the requested types.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> specifies the types of toplevel widgets to include. Allowed
types are #GTK_UI_MANAGER_MENUBAR, #GTK_UI_MANAGER_TOOLBAR and
#GTK_UI_MANAGER_POPUP.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated of all toplevel widgets of the requested 
types. 

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_set_drag_dest_item">
<description>
Sets the item that is highlighted for feedback.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path of the item to highlight, or %NULL.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> Specifies where to drop, relative to the item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_set_buildable_property">
<description>
Sets the property name @name to @value on the @buildable object.

Since: 2.12

</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value of property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_printer_get_description">
<description>
Gets the description of the printer.


</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the description of @printer

Since: 2.10
</return>
</function>

<function name="gtk_image_new_from_icon_set">
<description>
Creates a #GtkImage displaying an icon set. Sample stock sizes are
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using
this function, usually it&apos;s better to create a #GtkIconFactory, put
your icon sets in the icon factory, add the icon factory to the
list of default factories with gtk_icon_factory_add_default(), and
then use gtk_image_new_from_stock(). This will allow themes to
override the icon you ship with your application.

The #GtkImage does not assume a reference to the
icon set; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_radio_tool_button_new_from_widget">
<description>
Creates a new #GtkRadioToolButton adding it to the same group as @gruup


</description>
<parameters>
<parameter name="group">
<parameter_description> An existing #GtkRadioToolButton
</parameter_description>
</parameter>
</parameters>
<return> The new #GtkRadioToolButton

Since: 2.4
</return>
</function>

<function name="gtk_box_set_homogeneous">
<description>
Sets the #GtkBox:homogeneous property of @box, controlling 
whether or not all children of @box are given equal space 
in the box.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> a boolean value, %TRUE to create equal allotments,
%FALSE for variable allotments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_set_inline_selection">
<description>
Sets whether it is possible to cycle through the possible completions
inside the entry.

Since: 2.12

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
<parameter name="inline_selection">
<parameter_description> %TRUE to do inline selection
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_remove">
<description>
Removes the given row from the list store.  After being removed, 
@iter is set to be the next valid row, or invalidated if it pointed 
to the last row in @list_store.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is valid, %FALSE if not.
</return>
</function>

<function name="gtk_color_selection_set_color">
<description>
Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.

Deprecated: Use gtk_color_selection_set_current_color() instead.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an array of 4 doubles specifying the red, green, blue and opacity 
to set the current color to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_iter_is_selected">
<description>
Return value: %TRUE, if @iter is selected

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter is selected
</return>
</function>

<function name="GtkStatusbar">
<description>
Is emitted whenever a new message is popped off a statusbar&apos;s stack.

</description>
<parameters>
<parameter name="statusbar">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="context_id">
<parameter_description> the context id of the relevant message/statusbar.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the message that was just popped.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_set_metrics">
<description>
Sets the size and ring width of an HSV color selector.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Diameter for the hue ring.
</parameter_description>
</parameter>
<parameter name="ring_width">
<parameter_description> Width of the hue ring.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_expand">
<description>
Sets whether @tool_item is allocated extra space when there
is more room on the toolbar then needed for the items. The
effect is that the item gets bigger when the toolbar gets bigger
and smaller when the toolbar gets smaller.

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> Whether @tool_item is allocated extra space
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_get_fixed_size">
<description>
Fills in @width and @height with the appropriate size of @cell.

</description>
<parameters>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to fill in with the fixed width of the widget, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to fill in with the fixed height of the widget, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_set_icon_pixbuf">
<description>
Sets the icon that will be used for drags from a particular widget
from a #GdkPixbuf. GTK+ retains a reference for @pixbuf and will 
release it when it is no longer needed.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the #GdkPixbuf for the drag icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_default_colormap">
<description>
Sets the default colormap to use when creating widgets.
gtk_widget_push_colormap() is a better function to use if
you only want to affect a few widgets, rather than all widgets.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_size_request">
<description>
This function is typically used when implementing a #GtkContainer
subclass.  Obtains the preferred size of a widget. The container
uses this information to arrange its child widgets and decide what
size allocations to give them with gtk_widget_size_allocate().

You can also call this function from an application, with some
caveats. Most notably, getting a size request requires the widget
to be associated with a screen, because font information may be
needed. Multihead-aware applications should keep this in mind.

Also remember that the size request is not necessarily the size
a widget will actually be allocated.

See also gtk_widget_get_child_requisition().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> a #GtkRequisition to be filled in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_get_sort_type">
<description>
Gets the value set by gtk_recent_chooser_set_sort_type().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> the sorting order of the @chooser.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_set_rubber_banding">
<description>
Enables or disables rubber banding in @tree_view.  If the selection mode
is #GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select
multiple rows by dragging the mouse.

Since: 2.10

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="enable">
<parameter_description> %TRUE to enable rubber banding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_link_button_get_uri">
<description>
Retrieves the URI set using gtk_link_button_set_uri().


</description>
<parameters>
<parameter name="link_button">
<parameter_description> a #GtkLinkButton
</parameter_description>
</parameter>
</parameters>
<return> a valid URI.  The returned string is owned by the link button
and should not be modified or freed.

Since: 2.10
</return>
</function>

<function name="gtk_widget_set_no_show_all">
<description>
Sets the #GtkWidget:no-show-all property, which determines whether 
calls to gtk_widget_show_all() and gtk_widget_hide_all() will affect 
this widget. 

This is mostly for use in constructing widget hierarchies with externally
controlled visibility, see #GtkUIManager.

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="no_show_all">
<parameter_description> the new value for the &quot;no-show-all&quot; property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_targets_include_uri">
<description>
Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide a list or URIs.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data holds a list of targets,
and a suitable target for text is included, otherwise %FALSE.

Since: 2.10
</return>
</function>

<function name="gtk_tree_selection_count_selected_rows">
<description>
Return value: The number of rows selected.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return> The number of rows selected.

Since: 2.2
</return>
</function>

<function name="gtk_file_chooser_add_shortcut_folder_uri">
<description>
Adds a folder URI to be displayed with the shortcut folders in a file
chooser.  Note that shortcut folders do not get saved, as they are provided
by the application.  For example, you can use this to add a
&quot;file:///usr/share/mydrawprogram/Clipart&quot; folder to the volume list.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> URI of the folder to add
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the folder could be added successfully, %FALSE
otherwise.  In the latter case, the @error will be set as appropriate.

Since: 2.4
</return>
</function>

<function name="gtk_button_set_label">
<description>
Sets the text of the label of the button to @str. This text is
also used to select the stock item if gtk_button_set_use_stock()
is used.

This will also clear any previously set labels.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_set_limit">
<description>
Sets the maximum number of item that the gtk_recent_manager_get_items()
function should return.  If @limit is set to -1, then return all the
items.

Since: 2.10

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> the maximum number of items to return, or -1.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_current_page">
<description>
Return value: the index (starting from 0) of the current

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the current
page in the notebook. If the notebook has no pages, then
-1 will be returned.
</return>
</function>

<function name="gtk_text_view_add_child_at_anchor">
<description>
Adds a child widget in the text buffer, at the given @anchor.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor in the #GtkTextBuffer for @text_view
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_set_unref">
<description>
Decrements the reference count on @icon_set, and frees memory
if the reference count reaches 0.

</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_connect_by_path">
<description>
Installs an accelerator in this group, using an accelerator path to look
up the appropriate key and modifiers (see gtk_accel_map_add_entry()).
When @accel_group is being activated in response to a call to
gtk_accel_groups_activate(), @closure will be invoked if the @accel_key and
@accel_mods from gtk_accel_groups_activate() match the key and modifiers
for the path.

The signature used for the @closure is that of #GtkAccelGroupActivate.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install an accelerator in
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description>       path used for determining key and modifiers.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description>          closure to be executed upon accelerator activation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_has_item">
<description>
Checks whether there is a recently used resource registered
with @uri inside the recent manager.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the resource was found, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_column_add_attribute">
<description>
Adds an attribute mapping to the list in @tree_column.  The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell_renderer to be set from the value. So for example
if column 2 of the model contains strings, you could have the
&quot;text&quot; attribute of a #GtkCellRendererText get its values from
column 2.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> the #GtkCellRenderer to set attributes on
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> An attribute on the renderer
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The column position on the model to get the attribute from.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_get_shadow_type">
<description>
Retrieves the shadow type of the frame. See
gtk_frame_set_shadow_type().


</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
</parameters>
<return> the current shadow type of the frame.
</return>
</function>

<function name="gtk_tree_view_column_set_sort_column_id">
<description>
Sets the logical @sort_column_id that this column sorts on when this column 
is selected for sorting.  Doing so makes the column header clickable.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> The @sort_column_id of the model to sort on.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_range_interactive">
<description>
Same as gtk_text_buffer_insert_range(), but does nothing if the
insertion point isn&apos;t editable. The @default_editable parameter
indicates whether the text is editable at @iter if no tags
enclosing @iter affect editability. Typically the result of
gtk_text_view_get_editable() is appropriate here.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> a position in a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> another position in the same buffer as @start
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of the buffer
</parameter_description>
</parameter>
</parameters>
<return> whether an insertion was possible at @iter
</return>
</function>

<function name="gtk_assistant_get_page_title">
<description>
Gets the title for @page. 


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
</parameters>
<return> the title for @page.

Since: 2.10
</return>
</function>

<function name="gtk_image_new_from_file">
<description>
Creates a new #GtkImage displaying the file @filename. If the file
isn&apos;t found or can&apos;t be loaded, the resulting #GtkImage will
display a &quot;broken image&quot; icon. This function never returns %NULL,
it always returns a valid #GtkImage widget.

If the file contains an animation, the image will contain an
animation.

If you need to detect failures to load the file, use
gdk_pixbuf_new_from_file() to load the file yourself, then create
the #GtkImage from the pixbuf. (Or for animations, use
gdk_pixbuf_animation_new_from_file()).

The storage type (gtk_image_get_storage_type()) of the returned
image is not defined, it will be whatever is appropriate for
displaying the file.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a filename
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_text_buffer_deserialize">
<description>
This function deserializes rich text in format @format and inserts
it at @iter.

@format&amp;lt;!-- --&amp;gt;s to be used must be registered using
gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset() beforehand.


</description>
<parameters>
<parameter name="register_buffer">
<parameter_description> the #GtkTextBuffer @format is registered with
</parameter_description>
</parameter>
<parameter name="content_buffer">
<parameter_description> the #GtkTextBuffer to deserialize into
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the rich text format to use for deserializing
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> insertion point for the deserialized text
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to deserialize
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @data
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_set_line">
<description>
Moves iterator @iter to the start of the line @line_number.  If
@line_number is negative or larger than the number of lines in the
buffer, moves @iter to the start of the last line in the buffer.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number (counted from 0)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_pointer">
<description>
Obtains the location of the mouse pointer in widget coordinates.
Widget coordinates are a bit odd; for historical reasons, they are
defined as @widget-&amp;gt;window coordinates for widgets that are not
#GTK_NO_WINDOW widgets, and are relative to @widget-&amp;gt;allocation.x,
@widget-&amp;gt;allocation.y for widgets that are #GTK_NO_WINDOW widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_set_blinking">
<description>
Makes the status icon start or stop blinking. 
Note that blinking user interface elements may be problematic
for some users, and thus may be turned off, in which case
this setting has no effect.

Since: 2.10

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="blinking">
<parameter_description> %TRUE to turn blinking on, %FALSE to turn it off
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_realize">
<description>
Creates the GDK (windowing system) resources associated with a
widget.  For example, @widget-&amp;gt;window will be created when a widget
is realized.  Normally realization happens implicitly; if you show
a widget and all its parent containers, then the widget will be
realized and mapped automatically.

Realizing a widget requires all
the widget&apos;s parent widgets to be realized; calling
gtk_widget_realize() realizes the widget&apos;s parents in addition to
@widget itself. If a widget is not yet inside a toplevel window
when you realize it, bad things will happen.

This function is primarily used in widget implementations, and
isn&apos;t very useful otherwise. Many times when you think you might
need it, a better approach is to connect to a signal that will be
called after the widget is realized automatically, such as
GtkWidget::expose-event. Or simply g_signal_connect_after() to the
GtkWidget::realize signal.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unrealize">
<description>
This function is only useful in widget implementations.
Causes a widget to be unrealized (frees all GDK resources
associated with the widget, such as @widget-&amp;gt;window).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_get_version">
<description>
Return value: The version string. The string is owned by the about

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The version string. The string is owned by the about
dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_widget_set_uposition">
<description>

Sets the position of a widget. The funny &quot;u&quot; in the name comes from
the &quot;user position&quot; hint specified by the X Window System, and
exists for legacy reasons. This function doesn&apos;t work if a widget
is inside a container; it&apos;s only really useful on #GtkWindow.

Don&apos;t use this function to center dialogs over the main application
window; most window managers will do the centering on your behalf
if you call gtk_window_set_transient_for(), and it&apos;s really not
possible to get the centering to work correctly in all cases from
application code. But if you insist, use gtk_window_set_position()
to set #GTK_WIN_POS_CENTER_ON_PARENT, don&apos;t do the centering
manually.

Note that although @x and @y can be individually unset, the position
is not honoured unless both @x and @y are set.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x position; -1 to unset x; -2 to leave x unchanged
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y position; -1 to unset y; -2 to leave y unchanged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_line">
<description>
Return value: a line number

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a line number
</return>
</function>

<function name="gtk_menu_get_for_attach_widget">
<description>
Return value: the list of menus attached to his widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the list of menus attached to his widget.

Since: 2.6
</return>
</function>

<function name="gtk_widget_modify_bg">
<description>
Sets the background color for a widget in a particular state.  
All other style values are left untouched. See also
gtk_widget_modify_style(). 

Note that &quot;no window&quot; widgets (which have the %GTK_NO_WINDOW flag set)
draw on their parent container&apos;s window and thus may not draw any 
background themselves. This is the case for e.g. #GtkLabel. To modify 
the background of such widgets, you have to set the background color 
on their parent; if you want to set the background of a rectangular 
area around a label, try placing the label in a #GtkEventBox widget 
and setting the background color on that.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the background color
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_bg().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_new">
<description>
Creates a new #GtkWindow, which is a toplevel window that can
contain other widgets. Nearly always, the type of the window should
be #GTK_WINDOW_TOPLEVEL. If you&apos;re implementing something like a
popup menu from scratch (which is a bad idea, just use #GtkMenu),
you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
dialogs, though in some other toolkits dialogs are called &quot;popups&quot;.
In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
On X11, popup windows are not controlled by the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;.

If you simply want an undecorated window (no window borders), use
gtk_window_set_decorated(), don&apos;t use #GTK_WINDOW_POPUP.


</description>
<parameters>
<parameter name="type">
<parameter_description> type of window
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkWindow.
</return>
</function>

<function name="gtk_action_connect_proxy">
<description>
Connects a widget to an action object as a proxy.  Synchronises 
various properties of the action with the widget (such as label 
text, icon, tooltip, etc), and attaches a callback so that the 
action gets activated when the proxy widget does.

If the widget is already connected to an action, it is disconnected
first.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="proxy">
<parameter_description> the proxy widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_widget_grab_notify">
<description>
Emits the #GtkWidget::grab-notify signal on @widget.

Since: 2.6

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="was_grabbed">
<parameter_description> whether a grab is now in effect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_put">
<description>
Adds @child_widget to @layout, at position (@x,@y).
@layout becomes the new parent container of @child_widget.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="child_widget">
<parameter_description> child widget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position of child widget
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position of child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_homogeneous_tabs">
<description>
Sets whether the tabs must have all the same size or not.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> %TRUE if all tabs should be the same size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_parse_args">
<description>
Parses command line arguments, and initializes global
attributes of GTK+, but does not actually open a connection
to a display. (See gdk_display_open(), gdk_get_display_arg_name())

Any arguments used by GTK+ or GDK are removed from the array and
@argc and @argv are updated accordingly.

You shouldn&apos;t call this function explicitely if you are using
gtk_init(), or gtk_init_check().


</description>
<parameters>
<parameter name="argc">
<parameter_description> a pointer to the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> a pointer to the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if initialization succeeded, otherwise %FALSE.
</return>
</function>

<function name="gtk_color_selection_get_color">
<description>
Sets @color to be the current color in the GtkColorSelection widget.

This function is deprecated, use gtk_color_selection_get_current_color() instead.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an array of 4 #gdouble to fill in with the current color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_set_title">
<description>
Sets the title string for the menu.  The title is displayed when the menu
is shown as a tearoff menu.  If @title is %NULL, the menu will see if it is
attached to a parent menu item, and if so it will try to use the same text as
that menu item&apos;s label.

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a string containing the title for the menu.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_insert_stock">
<description>
Inserts a stock item at the specified position of the toolbar.  If
@stock_id is not a known stock item ID, it&apos;s inserted verbatim,
except that underscores used to mark mnemonics are removed.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> A #GtkToolbar
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> The id of the stock item you want to insert
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> The text in the tooltip of the toolbar button
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> The private text of the tooltip
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> The callback called when the toolbar button is clicked.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to callback
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position the button shall be inserted at.
-1 means at the end.
</parameter_description>
</parameter>
</parameters>
<return> the inserted widget
</return>
</function>

<function name="gtk_text_view_set_right_margin">
<description>
Sets the default right margin for text in the text view.
Tags in the buffer may override the default.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="right_margin">
<parameter_description> right margin in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_size_wildcarded">
<description>
Gets the value set by gtk_icon_source_set_size_wildcarded().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this icon source is a base for any icon size variant
</return>
</function>

<function name="gtk_file_filter_add_mime_type">
<description>
Adds a rule allowing a given mime type to @filter.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkFileFilter
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> name of a MIME type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_set_settings">
<description>
Sets the #GtkPrintSettings for the #GtkPrintUnixDialog. Typically,
this is used to restore saved print settings from a previous print
operation before the print dialog is shown.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_tab_pos">
<description>
Gets the edge at which the tabs for switching pages in the
notebook are drawn.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the edge at which the tabs are drawn
</return>
</function>

<function name="gtk_paint_diamond">
<description>
Draws a diamond in the given rectangle on @window using the given
parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle to draw the diamond in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_cursor">
<description>
Fills in @path and @focus_column with the current path and focus column.  If
the cursor isn&apos;t currently set, then *@path will be %NULL.  If no column
currently has focus, then *@focus_column will be %NULL.

The returned #GtkTreePath must be freed with gtk_tree_path_free() when
you are done with it.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A pointer to be filled with the current cursor path, or %NULL
</parameter_description>
</parameter>
<parameter name="focus_column">
<parameter_description> A pointer to be filled with the current focus column, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_freeze">
<description>
Does nothing. Previously locked the display of the calendar until
it was thawed with gtk_calendar_thaw().

Deprecated: 2.8: 

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_iter_from_string">
<description>
Sets @iter to a valid iterator pointing to @path_string, if it
exists. Otherwise, @iter is left invalid and %FALSE is returned.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="path_string">
<parameter_description> A string representation of a #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set.
</return>
</function>

<function name="gtk_event_box_get_visible_window">
<description>
Return value: %TRUE if the event box window is visible

</description>
<parameters>
<parameter name="event_box">
<parameter_description> a #GtkEventBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event box window is visible

Since: 2.4
</return>
</function>

<function name="gtk_progress_bar_set_pulse_step">
<description>
Sets the fraction of total progress bar length to move the
bouncing block for each call to gtk_progress_bar_pulse().

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="fraction">
<parameter_description> fraction between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_view_new_with_pixbuf">
<description>
Creates a new #GtkCellView widget, adds a #GtkCellRendererPixbuf 
to it, and makes its show @pixbuf. 


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> the image to display in the cell view
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkCellView widget.

Since: 2.6
</return>
</function>

<function name="gtk_drag_set_icon_stock">
<description>
Sets the icon for a given drag from a stock ID.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the ID of the stock icon to use for the drag.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within the icon of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within the icon of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_hide">
<description>
Reverses the effects of gtk_widget_show(), causing the widget to be
hidden (invisible to the user).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_get_sensitive">
<description>
Return value: %TRUE if the action itself is sensitive.

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the action itself is sensitive.

Since: 2.4
</return>
</function>

<function name="_gtk_recent_chooser_install_properties">
<description>
Installs the necessary properties for a class implementing
#GtkRecentChooser. A #GtkParamSpecOverride property is installed
for each property, using the values from the #GtkRecentChooserProp
enumeration. The caller must make sure itself that the enumeration
values don&apos;t collide with some other property values they
are using.

</description>
<parameters>
<parameter name="klass">
<parameter_description> the class structure for a type deriving from #GObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_set_label_widget">
<description>
Sets the label widget for the frame. This is the widget that
will appear embedded in the top edge of the frame as a
title.

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="label_widget">
<parameter_description> the new label widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_is_rich_text_available">
<description>
Test to see if there is rich text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported rich text targets. This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_rich_text() since it doesn&apos;t need to retrieve
the actual text.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is there is rich text available, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_draw_arrow">
<description>
Draws an arrow in the given rectangle on @window using the given 
parameters. @arrow_type determines the direction of the arrow.

Deprecated: Use gtk_paint_arrow() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="arrow_type">
<parameter_description> the type of arrow to draw
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if the arrow tip should be filled
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle to draw the arrow in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_set_use_size">
<description>
If @use_size is %TRUE, the font name will be written using the selected size.

Since: 2.4

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
<parameter name="use_size">
<parameter_description> If %TRUE, font name will be written using the selected size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_get_item_by_action">
<description>
Obtains the menu item which was constructed from the first 
#GtkItemFactoryEntry with the given @action.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> an action as specified in the @callback_action field
of #GtkItemFactoryEntry
</parameter_description>
</parameter>
</parameters>
<return> the menu item which corresponds to the given action, or %NULL
if no menu item was found
</return>
</function>

<function name="gtk_printer_get_state_message">
<description>
Return value: the state message of @printer

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the state message of @printer

Since: 2.10
</return>
</function>

<function name="gtk_tool_button_get_label">
<description>
Return value: The label, or %NULL

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
</parameters>
<return> The label, or %NULL

Since: 2.4
</return>
</function>

<function name="gtk_print_context_get_pango_fontmap">
<description>
Return value: the font map of @context

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the font map of @context

Since: 2.10
</return>
</function>

<function name="gtk_print_context_get_width">
<description>
Obtains the width of the #GtkPrintContext, in pixels.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the width of @context

Since: 2.10 
</return>
</function>

<function name="gtk_entry_set_editable">
<description>
Determines if the user can edit the text in the editable
widget or not. 

Deprecated: Use gtk_editable_set_editable() instead.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="editable">
<parameter_description> %TRUE if the user is allowed to edit the text
in the widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_item_width">
<description>
Return value: the width of a single item, or -1

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the width of a single item, or -1

Since: 2.6
</return>
</function>

<function name="gtk_print_settings_get_default_source">
<description>
Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the default source

Since: 2.10
</return>
</function>

<function name="gtk_window_get_screen">
<description>
Return value: a #GdkScreen.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkScreen.

Since: 2.2
</return>
</function>

<function name="gtk_recent_chooser_set_show_numbers">
<description>
Whether to show recently used resources prepended by a unique number.

Do not use this function: use gtk_recent_chooser_menu_set_show_numbers()
instead.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="show_numbers">
<parameter_description> %TRUE to show numbers, %FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_state">
<description>
This function is for use in widget implementations. Sets the state
of a widget (insensitive, prelighted, etc.) Usually you should set
the state using wrapper functions such as gtk_widget_set_sensitive().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> new state for @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_int_with_default">
<description>
Return value: the integer value of @key

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="def">
<parameter_description> the default value
</parameter_description>
</parameter>
</parameters>
<return> the integer value of @key

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_get_storage_type">
<description>
Gets the type of representation being used by the #GtkStatusIcon
to store image data. If the #GtkStatusIcon has no image data,
the return value will be %GTK_IMAGE_EMPTY. 


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> the image representation being used

Since: 2.10
</return>
</function>

<function name="gtk_accel_map_unlock_path">
<description>
Undoes the last call to gtk_accel_map_lock_path() on this @accel_path.
Refer to gtk_accel_map_lock_path() for information about accelerator path locking.

Since: 2.4

</description>
<parameters>
<parameter name="accel_path">
<parameter_description> a valid accelerator path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_set_client_window">
<description>
Set the client window for the input context; this is the
#GdkWindow in which the input appears. This window is
used in order to correctly position status windows, and may
also be used for purposes internal to the input method.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description>  the client window. This may be %NULL to indicate
that the previous client window no longer exists.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_set_visible_vertical">
<description>
Sets whether @tool_item is visible when the toolbar is docked
vertically. Some tool items, such as text entries, are too wide to be
useful on a vertically docked toolbar. If @visible_vertical is %FALSE
@tool_item will not appear on toolbars that are docked vertically.

Since: 2.4

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem 
</parameter_description>
</parameter>
<parameter name="visible_vertical">
<parameter_description> whether @tool_item is visible when the toolbar
is in vertical mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_parent">
<description>
This function is useful only when implementing subclasses of 
#GtkContainer.
Sets the container as the parent of @widget, and takes care of
some details such as updating the state and style of the child
to reflect its new location. The opposite function is
gtk_widget_unparent().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> parent container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_button_new_with_mnemonic_from_widget">
<description>
Creates a new #GtkRadioButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.

</description>
<parameters>
<parameter name="radio_group_member">
<parameter_description> widget to get radio group from or %NULL
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRadioButton
</return>
</function>

<function name="gtk_paint_slider">
<description>
Draws a slider in the given rectangle on @window using the
given style and orientation.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> a shadow
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle in which to draw a slider
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle in which to draw a slider
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle in which to draw a slider
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle in which to draw a slider
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> the orientation to be used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_table_get_homogeneous">
<description>
Return value: %TRUE if the cells are all constrained to the same size

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cells are all constrained to the same size
</return>
</function>

<function name="gtk_tree_model_row_deleted">
<description>
Emits the &quot;row_deleted&quot; signal on @tree_model.  This should be called by
models after a row has been removed.  The location pointed to by @path 
should be the location that the row previously was at.  It may not be a 
valid location anymore.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the previous location of the deleted row.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_icon_name">
<description>
Sets an icon to be used as fallback for windows that haven&apos;t
had gtk_window_set_icon_list() called on them from a named
themed icon, see gtk_window_set_icon_name().

Since: 2.6

</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the themed icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_icon_list">
<description>
Retrieves the list of icons set by gtk_window_set_icon_list().
The list is copied, but the reference count on each
member won&apos;t be incremented.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> copy of window&apos;s icon list
</return>
</function>

<function name="GtkTextTag">
<description>
The ::event signal is emitted when an event occurs on a region of the
buffer marked with this tag.


</description>
<parameters>
<parameter name="tag">
<parameter_description> the #GtkTextTag on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object the event was fired from (typically a #GtkTextView)
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the event which triggered the signal
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter pointing at the location the event occured
</parameter_description>
</parameter>
</parameters>
<return> %TRUE to stop other handlers from being invoked for the
event. %FALSE to propagate the event further.
</return>
</function>

<function name="GtkPrintOperation">
<description>
Used as the label of the tab containing custom widgets.
Note that this property may be ignored on some platforms.

If this is %NULL, GTK+ uses a default label.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_logo_icon_name">
<description>
Sets the pixbuf to be displayed as logo in 
the about dialog. If it is %NULL, the default
window icon set with gtk_window_set_default_icon()
will be used.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_remove_bookmark">
<description>
Removes a bookmark folder from the user&apos;s bookmarks list.  If the operation
succeeds, the &quot;bookmarks_changed&quot; signal will be emitted.  If you try to remove
a @path which does not exist in the bookmarks list, the operation will fail
and the @error will be set to GTK_FILE_SYSTEM_ERROR_NONEXISTENT.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of the bookmark to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation succeeds, FALSE otherwise.  In the latter
case, the @error value will be set.
</return>
</function>

<function name="gtk_icon_view_get_selected_items">
<description>
Creates a list of paths of all selected items. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReference&amp;lt;!-- --&amp;gt;s.
To do this, you can use gtk_tree_row_reference_new().

To free the return value, use:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
g_list_foreach (list, gtk_tree_path_free, NULL);
g_list_free (list);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return> A #GList containing a #GtkTreePath for each selected row.

Since: 2.6
</return>
</function>

<function name="gtk_toolbar_append_widget">
<description>
Adds a widget to the end of the given toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget to add to the toolbar. 
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_factory_lookup_default">
<description>
Looks for an icon in the list of default icon factories.  For
display to the user, you should use gtk_style_lookup_icon_set() on
the #GtkStyle for the widget that will display the icon, instead of
using this function directly, so that themes are taken into
account.



</description>
<parameters>
<parameter name="stock_id">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return> a #GtkIconSet, or %NULL
</return>
</function>

<function name="gtk_tree_view_row_expanded">
<description>
Return value: %TRUE if #path is expanded.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath to test expansion state.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if #path is expanded.
</return>
</function>

<function name="gtk_tooltips_get_info_from_tip_window">
<description>
Determines the tooltips and the widget they belong to from the window in 
which they are displayed. 

This function is mostly intended for use by accessibility technologies;
applications should have little use for it.


</description>
<parameters>
<parameter name="tip_window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="tooltips">
<parameter_description> the return location for the tooltips which are displayed 
in @tip_window, or %NULL
</parameter_description>
</parameter>
<parameter name="current_widget">
<parameter_description> the return location for the widget whose tooltips 
are displayed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tip_window is displaying tooltips, otherwise %FALSE.

Since: 2.4

Deprecated: 2.12:
</return>
</function>

<function name="gtk_notebook_get_tab_reorderable">
<description>
Gets whether the tab can be reordered via drag and drop or not.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the tab is reorderable.

Since: 2.10
</return>
</function>

<function name="gtk_tree_selection_set_select_function">
<description>
Sets the selection function.  If set, this function is called before any node
is selected or unselected, giving some control over which nodes are selected.
The select function should return %TRUE if the state of the node may be toggled,
and %FALSE if the state of the node should be left unchanged.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The selection function.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The selection function&apos;s data.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> The destroy function for user data.  May be NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_pixmap">
<description>
See gtk_image_new_from_pixmap() for details.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_forward_display_line_end">
<description>
Moves the given @iter forward to the next display line end.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_file_filter_add_custom">
<description>
Adds rule to a filter that allows files based on a custom callback
function. The bitfield @needed which is passed in provides information
about what sorts of information that the filter function needs;
this allows GTK+ to avoid retrieving expensive information when
it isn&apos;t needed by the filter.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
<parameter name="needed">
<parameter_description> bitfield of flags indicating the information that the custom
filter function needs.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> callback function; if the function returns %TRUE, then
the file will be displayed.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call to free @data when it is no longer needed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_layout_get_cells">
<description>
Return value: a list of cell renderers. The list, but not the

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> a #GtkCellLayout
</parameter_description>
</parameter>
</parameters>
<return> a list of cell renderers. The list, but not the
renderers has been newly allocated and should be freed with
g_list_free() when no longer needed.

Since: 2.12
</return>
</function>

<function name="gtk_printer_new">
<description>
Creates a new #GtkPrinter.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the printer
</parameter_description>
</parameter>
<parameter name="backend">
<parameter_description> a #GtkPrintBackend
</parameter_description>
</parameter>
<parameter name="virtual_">
<parameter_description> whether the printer is virtual
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPrinter

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_forward_search">
<description>
Searches forward for @str. Any match is returned by setting 
@match_start to the first character of the match and @match_end to the 
first character after the match. The search will not continue past
@limit. Note that a search is a linear or O(n) operation, so you
may wish to use @limit to avoid locking up your UI on large
buffers.

If the #GTK_TEXT_SEARCH_VISIBLE_ONLY flag is present, the match may
have invisible text interspersed in @str. i.e. @str will be a
possibly-noncontiguous subsequence of the matched range. similarly,
if you specify #GTK_TEXT_SEARCH_TEXT_ONLY, the match may have
pixbufs or child widgets mixed inside the matched range. If these
flags are not given, the match must be exact; the special 0xFFFC
character in @str will match embedded pixbufs or child widgets.


</description>
<parameters>
<parameter name="iter">
<parameter_description> start of search
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a search string
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting how the search is done
</parameter_description>
</parameter>
<parameter name="match_start">
<parameter_description> return location for start of match, or %NULL
</parameter_description>
</parameter>
<parameter name="match_end">
<parameter_description> return location for end of match, or %NULL
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> bound for the search, or %NULL for the end of the buffer
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_tree_view_column_set_attributes">
<description>
Sets the attributes in the list as the attributes of @tree_column.
The attributes should be in attribute/column order, as in
gtk_tree_view_column_add_attribute(). All existing attributes
are removed, and replaced with the new attributes.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> the #GtkCellRenderer we&apos;re setting the attributes of
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_create_pango_layout">
<description>
Creates a new #PangoLayout with the appropriate font map,
font description, and base direction for drawing text for
this widget.

If you keep a #PangoLayout created in this way around, in order to
notify the layout of changes to the base direction or font of this
widget, you must call pango_layout_context_changed() in response to
the #GtkWidget::style-set and #GtkWidget::direction-changed signals 
for the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text to set on the layout (can be %NULL)
</parameter_description>
</parameter>
</parameters>
<return> the new #PangoLayout
</return>
</function>

<function name="gtk_file_chooser_button_get_title">
<description>
Retrieves the title of the browse dialog used by @button. The returned value
should not be modified or freed.


</description>
<parameters>
<parameter name="button">
<parameter_description> the button widget to examine.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the browse dialog&apos;s title.

Since: 2.6
</return>
</function>

<function name="gtk_print_settings_set_int">
<description>
Sets @key to an integer value.

Since: 2.10 

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> an integer 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_data_copy">
<description>
Makes a copy of a #GtkSelectionData structure and its data.


</description>
<parameters>
<parameter name="data">
<parameter_description> a pointer to a #GtkSelectionData structure.
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a copy of @data.
</return>
</function>

<function name="gtk_window_remove_accel_group">
<description>
Reverses the effects of gtk_window_add_accel_group().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_get_pulse_step">
<description>
Retrieves the pulse step set with gtk_progress_bar_set_pulse_step()


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> a fraction from 0.0 to 1.0
</return>
</function>

<function name="gtk_accel_map_save_fd">
<description>
Filedescriptor variant of gtk_accel_map_save().

Note that the file descriptor will not be closed by this function.

</description>
<parameters>
<parameter name="fd">
<parameter_description> a valid writable file descriptor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_animation">
<description>
Causes the #GtkImage to display the given animation (or display
nothing, if you set the animation to %NULL).

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="animation">
<parameter_description> the #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_tooltip_text">
<description>
Sets @text as the contents of the tooltip. This function will take
care of setting GtkWidget:has-tooltip to %TRUE and of the default
handler for the GtkWidget::query-tooltip signal.

See also the GtkWidget:tooltip-text property and gtk_tooltip_set_text().

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the contents of the tooltip for @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_markup">
<description>
Parses @str which is marked up with the &amp;lt;link
linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;, setting the
label&apos;s text and attribute list based on the parse results. If the @str is
external data, you may need to escape it with g_markup_escape_text() or
g_markup_printf_escaped()&amp;lt;!-- --&amp;gt;:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
char *markup;
&amp;lt;!-- --&amp;gt;
markup = g_markup_printf_escaped (&quot;&amp;lt;span style=\&quot;italic\&quot;&amp;gt;&amp;percnt;s&amp;lt;/span&amp;gt;&quot;, str);
gtk_label_set_markup (GTK_LABEL (label), markup);
g_free (markup);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a markup string (see &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_skip_pager_hint">
<description>
Windows may set a hint asking the desktop environment not to display
the window in the pager. This function sets this hint.
(A &quot;pager&quot; is any desktop navigation tool such as a workspace
switcher that displays a thumbnail representation of the windows
on the screen.)

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to keep this window from appearing in the pager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_clear">
<description>
Resets the image to be empty.

Since: 2.8

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_move_iter_to_line_end">
<description>
Move to the beginning or end of a display line.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> if negative, move to beginning of line, otherwise
               move to end of line.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_add_child">
<description>
Adds a child to @buildable. @type is an optional string
describing how the child should be added.

Since: 2.12

</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> child to add
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> kind of child or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scale_get_layout_offsets">
<description>
Obtains the coordinates where the scale will draw the 
#PangoLayout representing the text in the scale. Remember
when using the #PangoLayout function you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE. 

If the #GtkScale:draw-value property is %FALSE, the return 
values are undefined.

Since: 2.4

</description>
<parameters>
<parameter name="scale">
<parameter_description> a #GtkScale
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store X offset of layout, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store Y offset of layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_sentence_start">
<description>
Moves backward to the previous sentence start; if @iter is already at
the start of a sentence, moves backward to the next one.  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_window_set_gravity">
<description>
Window gravity defines the meaning of coordinates passed to
gtk_window_move(). See gtk_window_move() and #GdkGravity for
more details.

The default window gravity is #GDK_GRAVITY_NORTH_WEST which will
typically &quot;do what you mean.&quot;


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> window gravity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_set_use_underline">
<description>
If true, an underline in the text of the expander label indicates
the next character should be used for the mnemonic accelerator key.

Since: 2.4

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> %TRUE if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_popup_data_from_widget">
<description>
Obtains the @popup_data which was passed to 
gtk_item_factory_popup_with_data(). This data is available until the menu
is popped down again.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
</parameters>
<return> @popup_data associated with the item factory from
which @widget was created, or %NULL if @widget wasn&apos;t created
by an item factory
</return>
</function>

<function name="gtk_combo_box_set_row_separator_func">
<description>
Sets the row separator function, which is used to determine
whether a row should be drawn as a separator. If the row separator
function is %NULL, no separators are drawn. This is the default value.

Since: 2.6

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GtkTreeViewRowSeparatorFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notifier for @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_unselect_path">
<description>
Unselects the row at @path.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be unselected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkCellView">
<description>
The model for cell view

since 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_group_id">
<description>
Sets an group identificator for @notebook, notebooks sharing
the same group identificator will be able to exchange tabs
via drag and drop. A notebook with group identificator -1 will
not be able to exchange tabs with any other notebook.

Since: 2.10
Deprecated:2.12: use gtk_notebook_set_group() instead.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="group_id">
<parameter_description> a group identificator, or -1 to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_filter_get_name">
<description>
Gets the human-readable name for the filter. See gtk_file_filter_set_name().


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
</parameters>
<return> The human-readable name of the filter,
or %NULL. This value is owned by GTK+ and must not
be modified or freed.

Since: 2.4
</return>
</function>

<function name="gtk_file_chooser_button_new_with_dialog">
<description>
Creates a #GtkFileChooserButton widget which uses @dialog as it&apos;s
file-picking window. Note that @dialog must be a #GtkDialog (or
subclass) which implements the #GtkFileChooser interface and must 
not have %GTK_DIALOG_DESTROY_WITH_PARENT set.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> the widget to use as dialog
</parameter_description>
</parameter>
</parameters>
<return> a new button widget.

Since: 2.6
</return>
</function>

<function name="gtk_page_setup_unix_dialog_get_page_setup">
<description>
Gets the currently selected page setup from the dialog. 


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPageSetupUnixDialog
</parameter_description>
</parameter>
</parameters>
<return> the current page setup 

Since: 2.10
</return>
</function>

<function name="gtk_spin_button_get_numeric">
<description>
Return value: %TRUE if only numeric text can be entered

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if only numeric text can be entered
</return>
</function>

<function name="GtkIconTheme">
<description>
Emitted when the current icon theme is switched or GTK+ detects
that a change has occurred in the contents of the current
icon theme.

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> the icon theme
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_set_model">
<description>
Sets the model used by @combo_box to be @model. Will unset a previously set 
model (if applicable). If model is %NULL, then it will unset the model.

Note that this function does not clear the cell renderers, you have to 
call gtk_cell_layout_clear() yourself if you need to set up different 
cell renderers for the new model.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_action">
<description>
Sets the type of operation that the chooser is performing; the
user interface is adapted to suit the selected action. For example,
an option to create a new folder might be shown if the action is
%GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
%GTK_FILE_CHOOSER_ACTION_OPEN.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the action that the file selector is performing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_copyright">
<description>
Sets the copyright string to display in the about dialog.
This should be a short string of one or two lines. 

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="copyright">
<parameter_description> the copyright string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_name">
<description>
Gets the name of the #GtkPaperSize.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
</parameters>
<return> the name of @size

Since: 2.10
</return>
</function>

<function name="gtk_color_selection_set_previous_alpha">
<description>
Sets the &apos;previous&apos; alpha to be @alpha.  This function should be called with
some hesitations, as it might seem confusing to have that alpha change.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> an integer between 0 and 65535.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_new_from_file">
<description>
Reads the page setup from the file @file_name. Returns a 
new #GtkPageSetup object with the restored page setup, 
or %NULL if an error occurred. See gtk_page_setup_to_file().


</description>
<parameters>
<parameter name="file_name">
<parameter_description> the filename to read the page setup from
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the restored #GtkPageSetup

Since: 2.12
</return>
</function>

<function name="gtk_item_factory_popup">
<description>
Pops up the menu constructed from the item factory at (@x, @y).

The @mouse_button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@mouse_button should be 0.

The @time_ parameter should be the time stamp of the event that
initiated the popup. If such an event is not available, use
gtk_get_current_event_time() instead.

The operation of the @mouse_button and the @time_ parameter is the same
as the @button and @activation_time parameters for gtk_menu_popup().

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory of type #GTK_TYPE_MENU (see gtk_item_factory_new())
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x position 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y position
</parameter_description>
</parameter>
<parameter name="mouse_button">
<parameter_description> the mouse button which was pressed to initiate the popup
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the time at which the activation event occurred
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_current_color">
<description>
Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #GdkColor to set the current color with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_hover_selection">
<description>
Enables of disables the hover selection mode of @tree_view.
Hover selection makes the selected row follow the pointer.
Currently, this works only for the selection modes 
%GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.

Since: 2.6

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="hover">
<parameter_description> %TRUE to enable hover selection mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_set_label_widget">
<description>
Set the label widget for the expander. This is the widget
that will appear embedded alongside the expander arrow.

Since: 2.4

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
<parameter name="label_widget">
<parameter_description> the new label widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_set_screen">
<description>
Sets the #GdkScreen on which the menu will be displayed.

Since: 2.2

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen, or %NULL if the screen should be
determined by the widget the menu is attached to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_get_logo">
<description>
Return value: the pixbuf displayed as logo. The pixbuf is

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf displayed as logo. The pixbuf is
owned by the about dialog. If you want to keep a reference
to it, you have to call g_object_ref() on it.

Since: 2.6
</return>
</function>

<function name="gtk_stock_add_static">
<description>
Same as gtk_stock_add(), but doesn&apos;t copy @items, so
@items must persist until application exit.


</description>
<parameters>
<parameter name="items">
<parameter_description> a #GtkStockItem or array of #GtkStockItem
</parameter_description>
</parameter>
<parameter name="n_items">
<parameter_description> number of items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_range">
<description>
Gets the range allowed for @spin_button. See
gtk_spin_button_set_range().

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> location to store minimum allowed value, or %NULL
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> location to store maximum allowed value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_is_equal">
<description>
Compares two #GtkPaperSize objects.


</description>
<parameters>
<parameter name="size1">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="size2">
<parameter_description> another #GtkPaperSize object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @size1 and @size2 
represent the same paper size

Since: 2.10
</return>
</function>

<function name="gtk_widget_get_action">
<description>
Returns: the action that a widget is a proxy for, or

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the action that a widget is a proxy for, or
%NULL, if it is not attached to an action.

Since: 2.10
</return>
</function>

<function name="gtk_spin_button_get_digits">
<description>
Fetches the precision of @spin_button. See gtk_spin_button_set_digits().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the current precision
</return>
</function>

<function name="gtk_ui_manager_add_ui_from_string">
<description>
Parses a string containing a &amp;lt;link linkend=&quot;XML-UI&quot;&amp;gt;UI definition&amp;lt;/link&amp;gt; and 
merges it with the current contents of @self. An enclosing &amp;lt;ui&amp;gt; 
element is added if it is missing.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the string to parse
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @buffer (may be -1 if @buffer is nul-terminated)
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> The merge id for the merged UI. The merge id can be used
to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
the return value is 0.

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_get_visible_range">
<description>
Sets @start_path and @end_path to be the first and last visible path. 
Note that there may be invisible paths in between.

Both paths should be freed with gtk_tree_path_free() after use.


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView
</parameter_description>
</parameter>
<parameter name="start_path">
<parameter_description> Return location for start of region, or %NULL
</parameter_description>
</parameter>
<parameter name="end_path">
<parameter_description> Return location for end of region, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if valid paths were placed in @start_path and @end_path

Since: 2.8
</return>
</function>

<function name="gtk_text_view_get_editable">
<description>
Return value: whether text is editable by default

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> whether text is editable by default
</return>
</function>

<function name="gtk_toolbar_append_item">
<description>
Inserts a new item into the toolbar. You must specify the position
in the toolbar where it will be inserted.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> give your toolbar button a label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> a string that appears when the user holds the mouse over this item.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> use with #GtkTipsQuery.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that should be used as the button&apos;s icon.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a pointer to any data you wish to be passed to the callback.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar item as a #GtkWidget.
</return>
</function>

<function name="gtk_window_get_deletable">
<description>
Return value: %TRUE if the window has been set to have a close button

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window has been set to have a close button

Since: 2.10
</return>
</function>

<function name="gtk_label_new_with_mnemonic">
<description>
Creates a new #GtkLabel, containing the text in @str.

If characters in @str are preceded by an underscore, they are
underlined. If you need a literal underscore character in a label, use
&apos;__&apos; (two underscores). The first underlined character represents a 
keyboard accelerator called a mnemonic. The mnemonic key can be used 
to activate another widget, chosen automatically, or explicitly using
gtk_label_set_mnemonic_widget().

If gtk_label_set_mnemonic_widget() is not called, then the first 
activatable ancestor of the #GtkLabel will be chosen as the mnemonic 
widget. For instance, if the label is inside a button or menu item, 
the button or menu item will automatically become the mnemonic widget 
and be activated by the mnemonic.


</description>
<parameters>
<parameter name="str">
<parameter_description> The text of the label, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkLabel
</return>
</function>

<function name="gtk_tree_path_down">
<description>
Moves @path to point to the first child of the current path.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_gravity">
<description>
Gets the value set by gtk_window_set_gravity().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> window gravity
</return>
</function>

<function name="gtk_separator_tool_item_new">
<description>
Create a new #GtkSeparatorToolItem


</description>
<parameters>
</parameters>
<return> the new #GtkSeparatorToolItem

Since: 2.4
</return>
</function>

<function name="_gtk_key_hash_lookup">
<description>
Looks up the best matching entry or entries in the hash table for
a given event. The results are sorted so that entries with less
modifiers come before entries with more modifiers.


</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> hardware keycode field from a #GdkEventKey
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> state field from a #GdkEventKey
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> mask of modifiers to consider when matching against the
modifiers in entries.
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> group field from a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> A #GSList of all matching entries. If there were exact
matches, they are returned, otherwise all fuzzy matches are
returned. (A fuzzy match is a match in keycode and level, but not
in group.)
</return>
</function>

<function name="gtk_range_get_value">
<description>
Gets the current value of the range.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> current value of the range.
</return>
</function>

<function name="gtk_print_job_set_source_file">
<description>
Make the #GtkPrintJob send an existing document to the 
printing system. The file can be in any format understood
by the platforms printing system (typically PostScript,
but on many platforms PDF may work too). See 
gtk_printer_accepts_pdf() and gtk_printer_accepts_ps().


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the file to be printed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if an error occurred

Since: 2.10
</return>
</function>

<function name="gtk_recent_filter_get_name">
<description>
Gets the human-readable name for the filter.
See gtk_recent_filter_set_name().


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
</parameters>
<return> the name of the filter, or %NULL.  The returned string
is owned by the filter object and should not be freed.

Since: 2.10
</return>
</function>

<function name="gtk_dialog_set_response_sensitive">
<description>
Calls &amp;lt;literal&amp;gt;gtk_widget_set_sensitive (widget, @setting)&amp;lt;/literal&amp;gt; 
for each widget in the dialog&apos;s action area with the given @response_id.
A convenient way to sensitize/desensitize dialog buttons.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> a response ID
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE for sensitive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_get_limit">
<description>
Gets the number of items returned by gtk_recent_chooser_get_items()
and gtk_recent_chooser_get_uris().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> A positive integer, or -1 meaning that all items are
returned.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_get_visible_rect">
<description>
Fills @visible_rect with the currently-visible region of the
buffer, in tree coordinates. Convert to bin_window coordinates with
gtk_tree_view_convert_tree_to_bin_window_coords().
Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
scrollable area of the tree.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="visible_rect">
<parameter_description> rectangle to fill
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_pixbuf">
<description>
Sets @pixbuf as the icon for a given drag.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the #GdkPixbuf to use as the drag icon.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within @widget of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within @widget of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_filter_clear_cache">
<description>
This function should almost never be called. It clears the @filter
of any cached iterators that haven&apos;t been reffed with
gtk_tree_model_ref_node(). This might be useful if the child model
being filtered is static (and doesn&apos;t change often) and there has been
a lot of unreffed access to nodes. As a side effect of this function,
all unreffed iters will be invalid.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_proxy_menu_item">
<description>
If @menu_item_id matches the string passed to
gtk_tool_item_set_proxy_menu_item() return the corresponding #GtkMenuItem.

Custom subclasses of #GtkToolItem should use this function to update
their menu item when the #GtkToolItem changes. That the
@menu_item_id&amp;lt;!-- --&amp;gt;s must match ensures that a #GtkToolItem will not
inadvertently change a menu item that they did not create.


</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
<parameter name="menu_item_id">
<parameter_description> a string used to identify the menu item
</parameter_description>
</parameter>
</parameters>
<return> The #GtkMenuItem passed to
gtk_tool_item_set_proxy_menu_item(), if the @menu_item_id&amp;lt;!-- --&amp;gt;s match.

Since: 2.4
</return>
</function>

<function name="gtk_toolbar_get_show_arrow">
<description>
Return value: %TRUE if the toolbar has an overflow menu.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the toolbar has an overflow menu.

Since: 2.4
</return>
</function>

<function name="gtk_text_layout_move_iter_to_next_line">
<description>
Move the iterator to the beginning of the next line. The
lines of a wrapped paragraph are treated as distinct for
this operation.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_targets_include_uri">
<description>
Determines if any of the targets in @targets can be used to
provide an uri list.


</description>
<parameters>
<parameter name="targets">
<parameter_description> an array of #GdkAtom&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the length of @targets
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @targets include a suitable target for uri lists,
otherwise %FALSE.

Since: 2.10
</return>
</function>

<function name="gtk_action_group_set_visible">
<description>
Changes the visible of @action_group.

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> new visiblity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_tab">
<description>
Draws an option menu tab (i.e. the up and down pointing arrows)
in the given rectangle on @window using the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the tab in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_child_visible">
<description>
Sets whether @widget should be mapped along with its when its parent
is mapped and @widget has been shown with gtk_widget_show(). 

The child visibility can be set for widget before it is added to
a container with gtk_widget_set_parent(), to avoid mapping
children unnecessary before immediately unmapping them. However
it will be reset to its default state of %TRUE when the widget
is removed from a container.

Note that changing the child visibility of a widget does not
queue a resize on the widget. Most of the time, the size of
a widget is computed from all visible children, whether or
not they are mapped. If this is not the case, the container
can queue a resize itself.

This function is only useful for container implementations and
never should be called by an application.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="is_visible">
<parameter_description> if %TRUE, @widget should be mapped along with its parent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_set_image_position">
<description>
Sets the position of the image relative to the text 
inside the button.

Since: 2.10

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_margin">
<description>
Return value: the space at the borders 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the space at the borders 

Since: 2.6
</return>
</function>

<function name="_gtk_binding_reset_parsed">
<description>
Removing all binding sets that were added by
gtk_binding_parse_binding()

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_rc_reparse_all">
<description>
If the modification time on any previously read file for the
default #GtkSettings has changed, discard all style information
and then reread all previously read RC files.


</description>
<parameters>
</parameters>
<return>  %TRUE if the files were reread.
</return>
</function>

<function name="gtk_container_class_install_child_property">
<description>
Installs a child property on a container class. 

</description>
<parameters>
<parameter name="cclass">
<parameter_description> a #GtkContainerClass
</parameter_description>
</parameter>
<parameter name="property_id">
<parameter_description> the id for the property
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_get_line_at_y">
<description>
Get the iter at the beginning of the line which is displayed
at the given y.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="target_iter">
<parameter_description> the iterator in which the result is stored
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y positition
</parameter_description>
</parameter>
<parameter name="line_top">
<parameter_description> location to store the y coordinate of the
top of the line. (Can by %NULL.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_get_shadow_type">
<description>
Gets the shadow type of the scrolled window. See 
gtk_scrolled_window_set_shadow_type().


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return> the current shadow type
</return>
</function>

<function name="gtk_widget_create_pango_context">
<description>
Creates a new #PangoContext with the appropriate font map,
font description, and base direction for drawing text for
this widget. See also gtk_widget_get_pango_context().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the new #PangoContext
</return>
</function>

<function name="gtk_action_is_sensitive">
<description>
Return value: %TRUE if the action and its associated action group 

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the action and its associated action group 
are both sensitive.

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_unset">
<description>
Removes any value associated with @key. 
This has the same effect as setting the value to %NULL.

Since: 2.10 

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_get_widget">
<description>
Looks up a widget by following a path. 
The path consists of the names specified in the XML description of the UI. 
separated by &apos;/&apos;. Elements which don&apos;t have a name or action attribute in 
the XML (e.g. &amp;lt;popup&amp;gt;) can be addressed by their XML element name 
(e.g. &quot;popup&quot;). The root element (&quot;/ui&quot;) can be omitted in the path.

Note that the widget found by following a path that ends in a &amp;lt;menu&amp;gt;
element is the menuitem to which the menu is attached, not the menu itself.

Also note that the widgets constructed by a ui manager are not tied to 
the lifecycle of the ui manager. If you add the widgets returned by this 
function to some container or explicitly ref them, they will survive the
destruction of the ui manager.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path
</parameter_description>
</parameter>
</parameters>
<return> the widget found by following the path, or %NULL if no widget
was found.

Since: 2.4
</return>
</function>

<function name="GtkBuilderConnectFunc">
<description>
This is the signature of a function used to connect signals.  It is used
by the gtk_builder_connect_signals() and gtk_builder_connect_signals_full()
methods.  It is mainly intended for interpreted language bindings, but
could be useful where the programmer wants more control over the signal
connection process.

Since: 2.12

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> object to connect a signal to
</parameter_description>
</parameter>
<parameter name="signal_name">
<parameter_description> name of the signal
</parameter_description>
</parameter>
<parameter name="handler_name">
<parameter_description> name of the handler
</parameter_description>
</parameter>
<parameter name="connect_object">
<parameter_description> a #GObject, if non-%NULL, use g_signal_connect_object()
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GConnectFlags to use
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_current_alpha">
<description>
Sets the current opacity to be @alpha.  The first time this is called, it will
also set the original opacity to be @alpha too.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> an integer between 0 and 65535.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_toggle_get_active">
<description>
Return value: %TRUE if the cell renderer is active.

</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cell renderer is active.
</return>
</function>

<function name="GtkAccelGroup">
<description>
The accel-changed signal is emitted when a #GtkAccelGroupEntry
is added to or removed from the accel group. 

Widgets like #GtkAccelLabel which display an associated 
accelerator should connect to this signal, and rebuild 
their visual representation if the @accel_closure is theirs.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> the #GtkAccelGroup which received the signal
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the accelerator keyval
</parameter_description>
</parameter>
<parameter name="modifier">
<parameter_description> the modifier combination of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_closure">
<parameter_description> the #GClosure of the accelerator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_system_model_set_filter">
<description>
Sets a callback called for each file/directory to see whether
it should be included in model. If this function was made
public, we&apos;d want to include a GDestroyNotify as well.

</description>
<parameters>
<parameter name="mode">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> function to be called for each file
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @filter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_get_label">
<description>
Fetches the text from the label of the expander, as set by
gtk_expander_set_label(). If the label text has not
been set the return value will be %NULL. This will be the
case if you create an empty button with gtk_button_new() to
use as a container.


</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
</parameters>
<return> The text of the label widget. This string is owned
by the widget and must not be modified or freed.

Since: 2.4
</return>
</function>

<function name="gtk_about_dialog_set_name">
<description>
Sets the name to display in the about dialog. 
If this is not set, it defaults to g_get_application_name().

Since: 2.6

@Deprecated: 2.12: Use gtk_about_dialog_set_program_name() instead.

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the program name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_bar_get_child_pack_direction">
<description>
Retrieves the current child pack direction of the menubar. See
gtk_menu_bar_set_child_pack_direction().


</description>
<parameters>
<parameter name="menubar">
<parameter_description> a #GtkMenuBar
</parameter_description>
</parameter>
</parameters>
<return> the child pack direction

Since: 2.8
</return>
</function>

<function name="GtkCellRendererAccel">
<description>
Gets emitted when the user has removed the accelerator.

Since: 2.10

</description>
<parameters>
<parameter name="accel">
<parameter_description> the object reveiving the signal
</parameter_description>
</parameter>
<parameter name="path_string">
<parameter_description> the path identifying the row of the edited cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_get_translator_credits">
<description>
Return value: The translator credits string. The string is

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> The translator credits string. The string is
owned by the about dialog and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_paper_size_get_width">
<description>
Gets the paper width of the #GtkPaperSize, in 
units of @unit.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the paper width 

Since: 2.10
</return>
</function>

<function name="gtk_text_buffer_apply_tag_by_name">
<description>
Calls gtk_text_tag_table_lookup() on the buffer&apos;s tag table to
get a #GtkTextTag, then calls gtk_text_buffer_apply_tag().

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a named #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be tagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be tagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_compare">
<description>
Compares two paths.  If @a appears before @b in a tree, then -1 is returned.
If @b appears before @a, then 1 is returned.  If the two nodes are equal,
then 0 is returned.


</description>
<parameters>
<parameter name="a">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> A #GtkTreePath to compare with.
</parameter_description>
</parameter>
</parameters>
<return> The relative positions of @a and @b
</return>
</function>

<function name="gtk_tree_model_row_changed">
<description>
Emits the &quot;row_changed&quot; signal on @tree_model.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the changed row
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the changed row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_get_focus_on_click">
<description>
Return value: %TRUE if the combo box grabs focus when it is 

</description>
<parameters>
<parameter name="combo">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the combo box grabs focus when it is 
clicked with the mouse.

Since: 2.6
</return>
</function>

<function name="gtk_icon_view_set_row_spacing">
<description>
Sets the ::row-spacing property which specifies the space 
which is inserted between the rows of the icon view.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="row_spacing">
<parameter_description> the row spacing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new_from_pixmap">
<description>
Creates a #GtkImage widget displaying @pixmap with a @mask.
A #GdkPixmap is a server-side image buffer in the pixel format of the
current display. The #GtkImage does not assume a reference to the
pixmap or mask; you still need to unref them if you own references.
#GtkImage will add its own reference rather than adopting yours.


</description>
<parameters>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap, or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_widget_queue_draw_area">
<description>
Invalidates the rectangular area of @widget defined by @x, @y,
@width and @height by calling gdk_window_invalidate_rect() on the
widget&apos;s window and all its child windows. Once the main loop
becomes idle (after the current batch of events has been processed,
roughly), the window will receive expose events for the union of
all regions that have been invalidated.

Normally you would only use this function in widget
implementations. You might also use it, or
gdk_window_invalidate_rect() directly, to schedule a redraw of a
#GtkDrawingArea or some portion thereof.

Frequently you can just call gdk_window_invalidate_rect() or
gdk_window_invalidate_region() instead of this function. Those
functions will invalidate only a single window, instead of the
widget and all its children.

The advantage of adding to the invalidated region compared to
simply drawing immediately is efficiency; using an invalid region
ensures that you only have to redraw one time.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_deserialize_get_can_create_tags">
<description>
This functions returns the value set with
gtk_text_buffer_deserialize_set_can_create_tags()


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GdkAtom representing a registered rich text format
</parameter_description>
</parameter>
</parameters>
<return> whether deserializing this format may create tags

Since: 2.10
</return>
</function>

<function name="gtk_paint_layout">
<description>
Draws a layout on @window using the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="use_text">
<parameter_description> whether to use the text or foreground
graphics context of @style
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin
</parameter_description>
</parameter>
<parameter name="layout">
<parameter_description> the layout to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_pixbuf">
<description>
Retrieves the source pixbuf, or %NULL if none is set.
In addition, if a filename source is in use, this
function in some cases will return the pixbuf from
loaded from the filename. This is, for example, true
for the GtkIconSource passed to the GtkStyle::render_icon()
virtual function. The reference count on the pixbuf is
not incremented.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> source pixbuf
</return>
</function>

<function name="gtk_tree_view_get_show_expanders">
<description>
Return value: %TRUE if expanders are drawn in @tree_view, %FALSE

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if expanders are drawn in @tree_view, %FALSE
otherwise.

Since: 2.12
</return>
</function>

<function name="gtk_tree_iter_free">
<description>
Frees an iterator that has been allocated on the heap.  This function is
mainly used for language bindings.

</description>
<parameters>
<parameter name="iter">
<parameter_description> A dynamically allocated tree iterator.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ui_manager_set_add_tearoffs">
<description>
Sets the &quot;add_tearoffs&quot; property, which controls whether menus 
generated by this #GtkUIManager will have tearoff menu items. 

Note that this only affects regular menus. Generated popup 
menus never have tearoff menu items.

Since: 2.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
<parameter name="add_tearoffs">
<parameter_description> whether tearoff menu items are added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_icon_name">
<description>
Sets the icon for the window from a named themed icon. See
the docs for #GtkIconTheme for more details. 

Note that this has nothing to do with the WM_ICON_NAME 
property which is mentioned in the ICCCM.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the themed icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_set_border_width">
<description>
Sets the border width of the container.

The border width of a container is the amount of space to leave
around the outside of the container. The only exception to this is
#GtkWindow; because toplevel windows can&apos;t leave space outside,
they leave the space inside. The border is added on all sides of
the container. To add space to only one side, one approach is to
create a #GtkAlignment widget, call gtk_widget_set_usize() to give
it a size, and place it on the side of the container as a spacer.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="border_width">
<parameter_description> amount of blank space to leave &amp;lt;emphasis&amp;gt;outside&amp;lt;/emphasis&amp;gt; 
the container. Valid values are in the range 0-65535 pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_add_actions_full">
<description>
This variant of gtk_action_group_add_actions() adds a #GDestroyNotify
callback for @user_data. 

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of action descriptions
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the number of entries
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the action callbacks
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notification callback for @user_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_new">
<description>
Creates a row reference based on @path.  This reference will keep pointing 
to the node pointed to by @path, so long as it exists.  It listens to all
signals emitted by @model, and updates its path appropriately.  If @path
isn&apos;t a valid path in @model, then %NULL is returned.


</description>
<parameters>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A valid #GtkTreePath to monitor
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreeRowReference, or %NULL
</return>
</function>

<function name="gtk_widget_new">
<description>
This is a convenience function for creating a widget and setting
its properties in one go. For example you might write:
&amp;lt;literal&amp;gt;gtk_widget_new (GTK_TYPE_LABEL, &quot;label&quot;, &quot;Hello World&quot;, &quot;xalign&quot;,
0.0, NULL)&amp;lt;/literal&amp;gt; to create a left-aligned label. Equivalent to
g_object_new(), but returns a widget so you don&apos;t have to
cast the object yourself.


</description>
<parameters>
<parameter name="type">
<parameter_description> type ID of the widget to create
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value of first property, followed by more properties, 
%NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkWidget of type @widget_type
</return>
</function>

<function name="GtkIconView">
<description>
The reorderable property specifies if the items can be reordered
by DND.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_icon_name">
<description>
Returns: the icon name or %NULL if the window has 

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the icon name or %NULL if the window has 
no themed icon

Since: 2.6
</return>
</function>

<function name="gtk_text_view_set_editable">
<description>
Sets the default editability of the #GtkTextView. You can override
this default setting with tags in the buffer, using the &quot;editable&quot;
attribute of tags.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether it&apos;s editable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_unset_model_drag_source">
<description>
Undoes the effect of gtk_icon_view_enable_model_drag_source().

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_unset_rows_drag_dest">
<description>
Undoes the effect of gtk_tree_view_enable_model_drag_dest().

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_expander_column">
<description>
Sets the column to draw the expander arrow at. It must be in @tree_view.  
If @column is %NULL, then the expander arrow is always at the first 
visible column.

If you do not want expander arrow to appear in your tree, set the 
expander column to a hidden column.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> %NULL, or the column to draw the expander arrow at.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_modifier_style">
<description>
Return value: the modifier style for the widget. This rc style is

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the modifier style for the widget. This rc style is
owned by the widget. If you want to keep a pointer to value this
around, you must add a refcount using g_object_ref().
</return>
</function>

<function name="gtk_icon_info_free">
<description>
Free a #GtkIconInfo and associated information

Since: 2.4

</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_alignment">
<description>
Return value: The current alignent of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The current alignent of @tree_column.
</return>
</function>

<function name="gtk_window_get_resizable">
<description>
Gets the value set by gtk_window_set_resizable().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user can resize the window
</return>
</function>

<function name="gtk_text_layout_move_iter_visually">
<description>
Move the iterator a given number of characters visually, treating
it as the strong cursor position. If @count is positive, then the
new strong cursor position will be @count positions to the right of
the old cursor position. If @count is negative then the new strong
cursor position will be @count positions to the left of the old
cursor position.

In the presence of bidirection text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.

</description>
<parameters>
<parameter name="layout">
<parameter_description>  a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>    a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description>   number of characters to move (negative moves left, positive moves right)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_get_mode">
<description>
Retrieves whether the button is displayed as a separate indicator
and label. See gtk_toggle_button_set_mode().


</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the togglebutton is drawn as a separate indicator
and label.
</return>
</function>

<function name="gtk_viewport_new">
<description>
Creates a new #GtkViewport with the given adjustments.


</description>
<parameters>
<parameter name="hadjustment">
<parameter_description> horizontal adjustment.
</parameter_description>
</parameter>
<parameter name="vadjustment">
<parameter_description> vertical adjustment.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkViewport.
</return>
</function>

<function name="gtk_icon_theme_get_example_icon_name">
<description>
Gets the name of an icon that is representative of the
current theme (for instance, to use when presenting
a list of themes to the user.)


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
</parameters>
<return> the name of an example icon or %NULL.
Free with g_free().

Since: 2.4
</return>
</function>

<function name="gtk_bin_get_child">
<description>
Gets the child of the #GtkBin, or %NULL if the bin contains
no child widget. The returned widget does not have a reference
added, so you do not need to unref it.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GtkBin
</parameter_description>
</parameter>
</parameters>
<return> pointer to child of the #GtkBin
</return>
</function>

<function name="gtk_binding_set_by_class">
<description>
This function returns the binding set named after the type name of
the passed in class structure. New binding sets are created on
demand by this function.


</description>
<parameters>
<parameter name="object_class">
<parameter_description> a valid #GtkObject class
</parameter_description>
</parameter>
</parameters>
<return> the binding set corresponding to @object_class
</return>
</function>

<function name="gtk_plug_new_for_display">
<description>
Create a new plug widget inside the #GtkSocket identified by socket_id.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay on which @socket_id is displayed
</parameter_description>
</parameter>
<parameter name="socket_id">
<parameter_description> the XID of the socket&apos;s window.
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkPlug widget.

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_column_clicked">
<description>
Emits the &quot;clicked&quot; signal on the column.  This function will only work if
@tree_column is clickable.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_get_popup_accessible">
<description>
Gets the accessible object corresponding to the combo box&apos;s popup.

This function is mostly intended for use by accessibility technologies;
applications should have little use for it.


</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the accessible object corresponding to the combo box&apos;s popup.

Since: 2.6
</return>
</function>

<function name="_gtk_plug_handle_modality_on">
<description>
@plug: a #GtkPlug

Called from the GtkPlug backend when the corresponding socket has
told the plug that it modality has toggled on.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_clear">
<description>
Unsets all the mappings on all renderers on the @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_display">
<description>
Get the #GdkDisplay for the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow at the top.

In general, you should only create display specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay for the toplevel for this widget.

Since: 2.2
</return>
</function>

<function name="gtk_icon_view_get_reorderable">
<description>
Retrieves whether the user can reorder the list via drag-and-drop. 
See gtk_icon_view_set_reorderable().


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the list can be reordered.

Since: 2.8
</return>
</function>

<function name="gtk_text_buffer_get_paste_target_list">
<description>
This function returns the list of targets this text buffer supports
for pasting and as DND destination. The targets in the list are
added with %info values from the #GtkTextBufferTargetInfo enum,
using gtk_target_list_add_rich_text_targets() and
gtk_target_list_add_text_targets().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> the #GtkTargetList

Since: 2.10
</return>
</function>

<function name="gtk_action_get_name">
<description>
Return value: the name of the action. The string belongs to GTK+ and should not

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> the name of the action. The string belongs to GTK+ and should not
be freed.

Since: 2.4
</return>
</function>

<function name="gtk_toolbar_get_tooltips">
<description>
Retrieves whether tooltips are enabled. See
gtk_toolbar_set_tooltips().


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if tooltips are enabled
</return>
</function>

<function name="gtk_notebook_set_tab_hborder">
<description>
Sets the width of the horizontal border of tab labels.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="tab_hborder">
<parameter_description> width of the horizontal border of tab labels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_get_wrap_width">
<description>
Returns: the wrap width.

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the wrap width.

Since: 2.6
</return>
</function>

<function name="gtk_entry_get_text">
<description>
Retrieves the contents of the entry widget.
See also gtk_editable_get_chars().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the contents of the widget as a
string. This string points to internally allocated
storage in the widget and must not be freed, modified or
stored.
</return>
</function>

<function name="gtk_file_chooser_get_do_overwrite_confirmation">
<description>
Queries whether a file chooser is set to confirm for overwriting when the user
types a file name that already exists.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file chooser will present a confirmation dialog;
%FALSE otherwise.

Since: 2.8
</return>
</function>

<function name="gtk_tree_view_column_get_sort_column_id">
<description>
Gets the logical @sort_column_id that the model sorts on when this
column is selected for sorting.
See gtk_tree_view_column_set_sort_column_id().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> the current @sort_column_id for this column, or -1 if
this column can&apos;t be used for sorting.
</return>
</function>

<function name="gtk_text_buffer_create_tag">
<description>

Creates a tag and adds it to the tag table for @buffer.
Equivalent to calling gtk_text_tag_new() and then adding the
tag to the buffer&apos;s tag table. The returned tag is owned by
the buffer&apos;s tag table, so the ref count will be equal to one.

If @tag_name is %NULL, the tag is anonymous.

If @tag_name is non-%NULL, a tag called @tag_name must not already
exist in the tag table for this buffer.

The @first_property_name argument and subsequent arguments are a list
of properties to set on the tag, as with g_object_set().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tag_name">
<parameter_description> name of the new tag, or %NULL
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of first property to set, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL-terminated list of property names and values
</parameter_description>
</parameter>
</parameters>
<return> a new tag
</return>
</function>

<function name="gtk_window_set_urgency_hint">
<description>
Windows may set a hint asking the desktop environment to draw
the users attention to the window. This function sets this hint.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to mark this window as urgent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_info_get_attach_points">
<description>
Fetches the set of attach points for an icon. An attach point
is a location in the icon that can be used as anchor points for attaching
emblems or overlays to the icon.


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> location to store pointer to an array of points, or %NULL
free the array of points with g_free().
</parameter_description>
</parameter>
<parameter name="n_points">
<parameter_description> location to store the number of points in @points, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there are any attach points for the icon.

Since: 2.4
</return>
</function>

<function name="gtk_text_buffer_get_start_iter">
<description>
Initialized @iter with the first position in the text buffer. This
is the same as using gtk_text_buffer_get_iter_at_offset() to get
the iter at character offset 0.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_target_list_add_rich_text_targets">
<description>
Appends the rich text targets registered with
gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_deserialize_format() to the target list. All
targets are added with the same @info.

Since: 2.10

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> an ID that will be passed back to the application
</parameter_description>
</parameter>
<parameter name="deserializable">
<parameter_description> if %TRUE, then deserializable rich text formats
will be added, serializable formats otherwise.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_move_mark">
<description>
Moves @mark to the new location @where. Emits the &quot;mark_set&quot; signal
as notification of the move.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> new location for @mark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_cell_is_visible">
<description>
Return value: %TRUE, if any of the cells packed into the @tree_column are currently visible

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if any of the cells packed into the @tree_column are currently visible
</return>
</function>

<function name="gtk_text_iter_backward_to_tag_toggle">
<description>
Moves backward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
@tag is %NULL. If no matching tag toggles are found,
Return value: whether we found a tag toggle before @iter

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether we found a tag toggle before @iter
</return>
</function>

<function name="gtk_image_menu_item_new_with_label">
<description>
Creates a new #GtkImageMenuItem containing a label. 

</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the menu item.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImageMenuItem.
</return>
</function>

<function name="gtk_recent_filter_filter">
<description>
Tests whether a file should be displayed according to @filter.
The #GtkRecentFilterInfo structure @filter_info should include
the fields returned from gtk_recent_filter_get_needed().

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkRecentChooser.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="filter_info">
<parameter_description> a #GtkRecentFilterInfo structure containing information
about a recently used resource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file should be displayed

Since: 2.10
</return>
</function>

<function name="gtk_scrolled_window_unset_placement">
<description>
Unsets the placement of the contents with respect to the scrollbars
for the scrolled window. If no window placement is set for a scrolled
window, it obeys the &quot;gtk-scrolled-window-placement&quot; XSETTING.

See also gtk_scrolled_window_set_placement() and
gtk_scrolled_window_get_placement().

Since: 2.10

</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_plug_remove_from_socket">
<description>
Removes a plug from a socket within the same application.

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug
</parameter_description>
</parameter>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_line_wrap">
<description>
Toggles line wrapping within the #GtkLabel widget. %TRUE makes it break
lines if text exceeds the widget&apos;s size. %FALSE lets the text get cut off
by the edge of the widget if it exceeds the widget size.

Note that setting line wrapping to %TRUE does not make the label
wrap at its parent container&apos;s width, because GTK+ widgets
conceptually can&apos;t make their requisition depend on the parent
container&apos;s size. For a label that wraps at a specific position,
set the label&apos;s width using gtk_widget_set_size_request().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="wrap">
<parameter_description> the setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_column_spacing">
<description>
Return value: the space between columns

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return> the space between columns

Since: 2.6
</return>
</function>

<function name="gtk_color_button_set_use_alpha">
<description>
Sets whether or not the color button should use the alpha channel.

Since: 2.4

</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton.
</parameter_description>
</parameter>
<parameter name="use_alpha">
<parameter_description> %TRUE if color button should use alpha channel, %FALSE if not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_has_tag">
<description>
Return value: whether @iter is tagged with @tag

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is tagged with @tag
</return>
</function>

<function name="gtk_combo_box_entry_new_text">
<description>
Convenience function which constructs a new editable text combo box, which 
is a #GtkComboBoxEntry just displaying strings. If you use this function to
create a text combo box, you should only manipulate its data source with
the following convenience functions: gtk_combo_box_append_text(),
gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and
gtk_combo_box_remove_text().


</description>
<parameters>
</parameters>
<return> A new text #GtkComboBoxEntry.

Since: 2.4
</return>
</function>

<function name="gtk_icon_source_set_pixbuf">
<description>
Sets a pixbuf to use as a base image when creating icon variants
for #GtkIconSet.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> pixbuf to use as a source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_bindings_activate_event">
<description>
Looks up key bindings for @object to find one matching
@event, and if one was found, activate it.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GtkObject (generally must be a widget)
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a matching key binding was found
</return>
</function>

<function name="gtk_tree_selection_set_mode">
<description>
Sets the selection mode of the @selection.  If the previous type was
#GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
previously selected.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The selection mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_style_init_for_settings">
<description>
Initializes the font description in @style according to the default
font name of @settings. This is called for gtk_style_new() with
the settings for the default screen (if any); if we are creating
a style for a particular screen, we then call it again in a
location where we know the correct settings.
The reason for this is that gtk_rc_style_create_style() doesn&apos;t
take the screen for an argument.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_hadjustment">
<description>
Gets the #GtkAdjustment currently being used for the horizontal aspect.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkAdjustment object, or %NULL if none is currently being
used.
</return>
</function>

<function name="gtk_event_box_set_above_child">
<description>
Set whether the event box window is positioned above the windows of its child,
as opposed to below it. If the window is above, all events inside the
event box will go to the event box. If the window is below, events
in windows of child widgets will first got to that widget, and then
to its parents.

The default is to keep the window below the child.

Since: 2.4

</description>
<parameters>
<parameter name="event_box">
<parameter_description> a #GtkEventBox
</parameter_description>
</parameter>
<parameter name="above_child">
<parameter_description> %TRUE if the event box window is above the windows of its child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factories_path_delete">
<description>
Deletes all widgets constructed from the specified path.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory_path">
<parameter_description> a factory path to prepend to @path. May be %NULL if @path
starts with a factory path
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_builder_get_translation_domain">
<description>
Gets the translation domain of @builder.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
</parameters>
<return> the translation domain. This string is owned
by the builder object and must not be modified or freed.

Since: 2.12
</return>
</function>

<function name="gtk_builder_connect_signals_full">
<description>
This function can be thought of the interpreted language binding
version of gtk_builder_connect_signals(), except that it does not
require GModule to function correctly.

Since: 2.12

</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function used to connect the signals
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> arbitrary data that will be passed to the connection function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_flags">
<description>
Return value: The flags supported by this interface.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
</parameters>
<return> The flags supported by this interface.
</return>
</function>

<function name="gtk_buildable_get_name">
<description>
Gets the name of the @buildable object. 

#GtkBuilder sets the name based on the the 
&amp;lt;link linkend=&quot;BUILDER-UI&quot;&amp;gt;GtkBuilder UI definition&amp;lt;/link&amp;gt; 
used to construct the @buildable.


</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
</parameters>
<return> the name set with gtk_buildable_set_name()

Since: 2.12
</return>
</function>

<function name="gtk_print_settings_get_page_ranges">
<description>
Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="num_ranges">
<parameter_description> return location for the length of the returned array
</parameter_description>
</parameter>
</parameters>
<return> an array of #GtkPageRange&amp;lt;!-- --&amp;gt;s. Use g_free()
to free the array when it is no longer needed. 

Since: 2.10
</return>
</function>

<function name="gtk_item_factory_add_foreign">
<description>
Installs an accelerator for @accel_widget in @accel_group, that causes
the ::activate signal to be emitted if the accelerator is activated.

This function can be used to make widgets participate in the accel
saving/restoring functionality provided by gtk_accel_map_save() and
gtk_accel_map_load(), even if they haven&apos;t been created by an item
factory. 

Deprecated: 2.4: The recommended API for this purpose are the functions 
gtk_menu_item_set_accel_path() and gtk_widget_set_accel_path(); don&apos;t 
use gtk_item_factory_add_foreign() in new code, since it is likely to
be removed in the future.

</description>
<parameters>
<parameter name="accel_widget">
<parameter_description>     widget to install an accelerator on 
</parameter_description>
</parameter>
<parameter name="full_path">
<parameter_description>	      the full path for the @accel_widget 
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install the accelerator in
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>           key value of the accelerator
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>        modifier combination of the accelerator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_line_wrap_mode">
<description>
Return value: %TRUE if the lines of the label are automatically wrapped.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lines of the label are automatically wrapped.

Since: 2.10
</return>
</function>

<function name="gtk_paned_set_position">
<description>
Sets the position of the divider between the two panes.

</description>
<parameters>
<parameter name="paned">
<parameter_description> a #GtkPaned widget
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> pixel position of divider, a negative value means that the position
is unset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_urgency_hint">
<description>
Gets the value set by gtk_window_set_urgency_hint()


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window is urgent

Since: 2.8
</return>
</function>

<function name="_gtk_file_chooser_delegate_iface_init">
<description>
An interface-initialization function for use in cases where
an object is simply delegating the methods, signals of
the #GtkFileChooser interface to another object.
_gtk_file_chooser_set_delegate() must be called on each
instance of the object so that the delegate object can
be found.

</description>
<parameters>
<parameter name="iface">
<parameter_description> a #GtkFileChoserIface structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_window_set_is_active">
<description>
Internal function that sets whether the #GtkWindow is part
of the currently active toplevel window (taking into account inter-process
embedding.)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="is_active">
<parameter_description> %TRUE if the window is in the currently active toplevel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_sortable_get_sort_column_id">
<description>
Fills in @sort_column_id and @order with the current sort column and the
order.  It returns %TRUE unless the @sort_column_id is 
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or 
%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.


</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> The sort column id to be filled in
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> The #GtkSortType to be filled in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the sort column is not one of the special sort
column ids.
</return>
</function>

<function name="_gtk_button_set_depressed">
<description>
Sets whether the button is currently drawn as down or not. This is 
purely a visual setting, and is meant only for use by derived widgets
such as #GtkToggleButton.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="depressed">
<parameter_description> %TRUE if the button should be drawn with a recessed shadow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_editable_remove_widget">
<description>
Emits the #GtkCellEditable::remove-widget signal.  

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> A #GtkTreeEditable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_get_target_list">
<description>
Return value: the #GtkTargetList, or %NULL if none

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GtkTargetList, or %NULL if none
</return>
</function>

<function name="GtkRadioAction">
<description>
The ::changed signal is emitted on every member of a radio group when the
active member is changed. The signal gets emitted after the ::activate signals
for the previous and current active members.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="current">
<parameter_description> the member of @action&amp;lt;!-- --&amp;gt;s group which has just been activated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_new">
<description>
Creates a new #GtkPrintOperation. 


</description>
<parameters>
</parameters>
<return> a new #GtkPrintOperation

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_set_selection_mode">
<description>
Sets the selection mode of the @icon_view.

Since: 2.6 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> The selection mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_rubber_banding">
<description>
Return value: %TRUE if rubber banding in @tree_view is enabled.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if rubber banding in @tree_view is enabled.

Since: 2.10
</return>
</function>

<function name="gtk_action_group_list_actions">
<description>
Lists the actions in the action group.


</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
</parameters>
<return> an allocated list of the action objects in the action group

Since: 2.4
</return>
</function>

<function name="gtk_recent_info_match">
<description>
Checks whether two #GtkRecentInfo structures point to the same
resource.


</description>
<parameters>
<parameter name="info_a">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="info_b">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if both #GtkRecentInfo structures point to se same
resource, %FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_window_present">
<description>
Presents a window to the user. This may mean raising the window
in the stacking order, deiconifying it, moving it to the current
desktop, and/or giving it the keyboard focus, possibly dependent
on the user&apos;s platform, window manager, and preferences.

If @window is hidden, this function calls gtk_widget_show()
as well.

This function should be used when the user tries to open a window
that&apos;s already open. Say for example the preferences dialog is
currently open, and the user chooses Preferences from the menu
a second time; use gtk_window_present() to move the already-open dialog
where the user can see it.

If you are calling this function in response to a user interaction,
it is preferable to use gtk_window_present_with_time().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_unselect_filename">
<description>
Unselects a currently selected filename. If the filename
is not in the current directory, does not exist, or
is otherwise not currently selected, does nothing.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the filename to unselect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_next_page">
<description>
Switches to the next page. Nothing happens if the current page is
the last page.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_get_spacing">
<description>
Gets the value set by gtk_box_set_spacing().


</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
</parameters>
<return> spacing between children
</return>
</function>

<function name="gtk_page_setup_set_paper_size_and_default_margins">
<description>
Sets the paper size of the #GtkPageSetup and modifies
the margins according to the new paper size.

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #GtkPaperSize 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_button_get_alpha">
<description>
Return value: an integer between 0 and 65535.

</description>
<parameters>
<parameter name="color_button">
<parameter_description> a #GtkColorButton.
</parameter_description>
</parameter>
</parameters>
<return> an integer between 0 and 65535.

Since: 2.4
</return>
</function>

<function name="gtk_window_propagate_key_event">
<description>
Propagate a key press or release event to the focus widget and
up the focus container chain until a widget handles @event.
This is normally called by the default ::key_press_event and
::key_release_event handlers for toplevel windows,
however in some cases it may be useful to call this directly when
overriding the standard key handling for a toplevel window.


</description>
<parameters>
<parameter name="window">
<parameter_description>  a #GtkWindow
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description>   a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a widget in the focus chain handled the event.
</return>
</function>

<function name="gtk_page_setup_get_left_margin">
<description>
Gets the left margin in units of @unit.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the left margin

Since: 2.10
</return>
</function>

<function name="gtk_paper_size_get_default_bottom_margin">
<description>
Gets the default bottom margin for the #GtkPaperSize.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the default bottom margin

Since: 2.10
</return>
</function>

<function name="gtk_targets_include_text">
<description>
Determines if any of the targets in @targets can be used to
provide text.


</description>
<parameters>
<parameter name="targets">
<parameter_description> an array of #GdkAtom&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the length of @targets
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @targets include a suitable target for text,
otherwise %FALSE.

Since: 2.10
</return>
</function>

<function name="gtk_tree_model_filter_convert_iter_to_child_iter">
<description>
Sets @child_iter to point to the row pointed to by @filter_iter.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="child_iter">
<parameter_description> An uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="filter_iter">
<parameter_description> A valid #GtkTreeIter pointing to a row on @filter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_add_toggle_actions">
<description>
This is a convenience function to create a number of toggle actions and add them 
to the action group.

The &quot;activate&quot; signals of the actions are connected to the callbacks and 
their accel paths are set to 
&amp;lt;literal&amp;gt;&amp;lt;Actions&amp;gt;/&amp;lt;replaceable&amp;gt;group-name&amp;lt;/replaceable&amp;gt;/&amp;lt;replaceable&amp;gt;action-name&amp;lt;/replaceable&amp;gt;&amp;lt;/literal&amp;gt;.  

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of toggle action descriptions
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the number of entries
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the action callbacks
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_get_visible">
<description>
Return value: %TRUE if the status icon is visible

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the status icon is visible

Since: 2.10
</return>
</function>

<function name="gtk_notebook_get_tab_label_text">
<description>
Retrieves the text of the tab label for the page containing
@child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget contained in a page of @notebook
</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label, or %NULL if the
tab label widget is not a #GtkLabel. The
string is owned by the widget and must not
be freed.
</return>
</function>

<function name="gtk_clipboard_wait_for_rich_text">
<description>
Requests the contents of the clipboard as rich text.  This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> return location for the format of the returned data
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> return location for the length of the returned data
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated binary block of data which must
be freed with g_free(), or %NULL if retrieving
the selection data failed. (This could happen
for various reasons, in particular if the
clipboard was empty or if the contents of the
clipboard could not be converted into text form.)

Since: 2.10
</return>
</function>

<function name="gtk_window_get_group">
<description>
Returns: the #GtkWindowGroup for a window or the default group

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GtkWindowGroup for a window or the default group

Since: 2.10
</return>
</function>

<function name="gtk_window_set_destroy_with_parent">
<description>
If @setting is %TRUE, then destroying the transient parent of @window
will also destroy @window itself. This is useful for dialogs that
shouldn&apos;t persist beyond the lifetime of the main window they&apos;re
associated with, for example.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to destroy @window with its transient parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_cell_render">
<description>
Renders the cell contained by #tree_column. This is used primarily by the
#GtkTreeView.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkDrawable to draw to
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> entire cell area (including tree expanders and maybe padding on the sides)
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> area normally rendered by a cell renderer
</parameter_description>
</parameter>
<parameter name="expose_area">
<parameter_description> area that actually needs updating
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that affect rendering
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_filter_set_modify_func">
<description>
With the @n_columns and @types parameters, you give an array of column
types for this model (which will be exposed to the parent model/view).
The @func, @data and @destroy parameters are for specifying the modify
function. The modify function will get called for &amp;lt;emphasis&amp;gt;each&amp;lt;/emphasis&amp;gt;
data access, the goal of the modify function is to return the data which 
should be displayed at the location specified using the parameters of the 
modify function.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> The number of columns in the filter model.
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> The #GType&amp;lt;!-- --&amp;gt;s of the columns.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A #GtkTreeModelFilterModifyFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to pass to the modify function, or %NULL.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier of @data, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new_from_stock">
<description>
Creates a #GtkImage displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. Sample stock sizes
are #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock
icon name isn&apos;t known, the image will be empty.
You can register your own stock icon names, see
gtk_icon_factory_add_default() and gtk_icon_factory_add().


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> a stock icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage displaying the stock icon
</return>
</function>

<function name="gtk_tree_view_get_selection">
<description>
Gets the #GtkTreeSelection associated with @tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeSelection object.
</return>
</function>

<function name="_gtk_file_chooser_get_file_system">
<description>
Gets the #GtkFileSystem of @chooser; this is an internal
implementation detail, used for conversion between paths
and filenames and URIs.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the file system for @chooser.

Since: 2.4
</return>
</function>

<function name="gtk_icon_view_unselect_all">
<description>
Unselects all the icons.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_get_current_folder_path">
<description>
Gets the current folder of @chooser as #GtkFilePath.
See gtk_file_chooser_get_current_folder_uri().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the #GtkFilePath for the current folder.
Free with gtk_file_path_free().

Since: 2.4
</return>
</function>

<function name="gtk_draw_check">
<description>
Draws a check button indicator in the given rectangle on @window with 
the given parameters.

Deprecated: Use gtk_paint_check() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the check in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_events">
<description>
Return value: event mask for @widget

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> event mask for @widget
</return>
</function>

<function name="GtkCellRendererText">
<description>
This signal is emitted after @renderer has been edited.

It is the responsibility of the application to update the model
and store @new_text at the position indicated by @path.

</description>
<parameters>
<parameter name="renderer">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path identifying the edited cell
</parameter_description>
</parameter>
<parameter name="new_text">
<parameter_description> the new text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_fixed_height_mode">
<description>
Enables or disables the fixed height mode of @tree_view. 
Fixed height mode speeds up #GtkTreeView by assuming that all 
rows have the same height. 
Only enable this option if all rows are the same height and all
columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.

Since: 2.6 

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView 
</parameter_description>
</parameter>
<parameter name="enable">
<parameter_description> %TRUE to enable fixed height mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_move_iter_to_previous_line">
<description>
Move the iterator to the beginning of the previous line. The lines
of a wrapped paragraph are treated as distinct for this operation.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_layout_get_block_cursor">
<description>
If layout is to display a block cursor, calculates its position
and returns %TRUE. Otherwise it returns %FALSE. In case when
cursor is visible, it simply returns the position stored in
the line display, otherwise it has to compute the position
(see get_block_cursor()).

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> a #GdkRectangle to store block cursor position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_new">
<description>
Creates a new #GtkFrame, with optional label @label.
If @label is %NULL, the label is omitted.


</description>
<parameters>
<parameter name="label">
<parameter_description> the text to use as the label of the frame
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkFrame widget
</return>
</function>

<function name="gtk_tooltip_set_icon_from_stock">
<description>
Sets the icon of the tooltip (which is in front of the text) to be
the stock item indicated by @stock_id with the size indicated
by @size.  If @stock_id is %NULL, the image will be hidden.

Since: 2.12

</description>
<parameters>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a stock icon name, or %NULL
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_buildable_construct_child">
<description>
Constructs a child of @buildable with the name @name. 

#GtkBuilder calls this function if a &quot;constructor&quot; has been
specified in the UI definition.


</description>
<parameters>
<parameter name="buildable">
<parameter_description> A #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> #GtkBuilder used to construct this object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of child to construct
</parameter_description>
</parameter>
</parameters>
<return> the constructed child

Since: 2.12
</return>
</function>

<function name="gtk_entry_completion_set_popup_single_match">
<description>
Sets whether the completion popup window will appear even if there is
only a single match. You may want to set this to %FALSE if you
are using &amp;lt;link linkend=&quot;GtkEntryCompletion--inline-completion&quot;&amp;gt;inline
completion&amp;lt;/link&amp;gt;.

Since: 2.8

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
<parameter name="popup_single_match">
<parameter_description> %TRUE if the popup should appear even for a single
match
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_iter_first">
<description>
Initializes @iter with the first iterator in the tree (the one at the path
&quot;0&quot;) and returns %TRUE.  Returns %FALSE if the tree is empty.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set.
</return>
</function>

<function name="gtk_text_iter_forward_text_chars">
<description>
Moves backward by @count text characters (pixbufs, widgets,
etc. do not count as characters for this). Equivalent to moving
through the results of gtk_text_iter_get_text (), rather than
gtk_text_iter_get_slice ().


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of chars to move
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_draw_shadow">
<description>
Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type.

Deprecated: Use gtk_paint_shadow() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_filter_new">
<description>
Creates a new #GtkFileFilter with no rules added to it.
Such a filter doesn&apos;t accept any files, so is not
particularly useful until you add rules with
gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),
or gtk_file_filter_add_custom(). To create a filter
that accepts any file, use:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkFileFilter *filter = gtk_file_filter_new (&amp;lt;!-- --&amp;gt;);
gtk_file_filter_add_pattern (filter, &quot;*&quot;);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
</parameters>
<return> a new #GtkFileFilter

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_set_column_drag_function">
<description>
Sets a user function for determining where a column may be dropped when
dragged.  This function is called on every column pair in turn at the
beginning of a column drag to determine where a drop can take place.  The
arguments passed to @func are: the @tree_view, the #GtkTreeViewColumn being
dragged, the two #GtkTreeViewColumn s determining the drop spot, and
@user_data.  If either of the #GtkTreeViewColumn arguments for the drop spot
are %NULL, then they indicate an edge.  If @func is set to be %NULL, then
@tree_view reverts to the default behavior of allowing all columns to be
dropped everywhere.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to determine which columns are reorderable, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to be passed to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_set_active">
<description>
Sets the active item of @combo_box to be the item at @index.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> An index in the model passed during construction, or -1 to have
no active item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_page_num">
<description>
Finds the index of the page which contains the given child
widget.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the index of the page containing @child, or
-1 if @child is not in the notebook.
</return>
</function>

<function name="gtk_size_group_add_widget">
<description>
Adds a widget to a #GtkSizeGroup. In the future, the requisition
of the widget will be determined as the maximum of its requisition
and the requisition of the other widgets in the size group.
Whether this applies horizontally, vertically, or in both directions
depends on the mode of the size group. See gtk_size_group_set_mode().

When the widget is destroyed or no longer referenced elsewhere, it will 
be removed from the size group.

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the #GtkWidget to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_new_from_key_file">
<description>
Reads a paper size from the group @group_name in the key file
@key_file. 


</description>
<parameters>
<parameter name="key_file">
<parameter_description> the #GKeyFile to retrieve the papersize from
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> the name ofthe group in the key file to read,
or %NULL to read the first group
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPaperSize object with the restored
paper size, or %NULL if an error occurred.

Since: 2.12
</return>
</function>

<function name="gtk_icon_view_set_text_column">
<description>
Sets the column with text for @icon_view to be @column. The text
column must be of type #G_TYPE_STRING.

Since: 2.6 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> A column in the currently used model, or -1 to display no text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_get_text_column">
<description>
Return value: the column containing the strings

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> the column containing the strings

Since: 2.6
</return>
</function>

<function name="gtk_print_settings_set_collate">
<description>
Sets the value of %GTK_PRINT_SETTINGS_COLLATE.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="collate">
<parameter_description> whether to collate the output
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_chooser_entry_set_file_system">
<description>
Sets the file system for @chooser_entry.

</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="file_system">
<parameter_description> an object implementing #GtkFileSystem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_get_accel_path">
<description>
Returns: the accel path for this action, or %NULL

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> the accel path for this action, or %NULL
if none is set. The returned string is owned by GTK+ 
and must not be freed or modified.
</return>
</function>

<function name="gtk_icon_view_item_activated">
<description>
Activates the item determined by @path.

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be activated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_shell_cancel">
<description>
Cancels the selection within the menu shell.  

Since: 2.4

</description>
<parameters>
<parameter name="menu_shell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accelerator_valid">
<description>
Determines whether a given keyval and modifier mask constitute
a valid keyboard accelerator. For example, the #GDK_a keyval
plus #GDK_CONTROL_MASK is valid - this is a &quot;Ctrl+a&quot; accelerator.
But, you can&apos;t, for instance, use the #GDK_Control_L keyval
as an accelerator.

</description>
<parameters>
<parameter name="keyval">
<parameter_description>    a GDK keyval
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> modifier mask
</parameter_description>
</parameter>
</parameters>
<return>   %TRUE if the accelerator is valid
</return>
</function>

<function name="gtk_label_get_layout">
<description>
Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_label_get_layout_offsets().
The returned layout is owned by the label so need not be
freed by the caller.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this label
</return>
</function>

<function name="gtk_tooltip_set_text">
<description>
Sets the text of the tooltip to be @text. If @text is %NULL, the label
will be hidden. See also gtk_tooltip_set_markup().

Since: 2.12

</description>
<parameters>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> a text string or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_widget_propagate_hierarchy_changed">
<description>
Propagates changes in the anchored state to a widget and all
children, unsetting or setting the %ANCHORED flag, and
emitting #GtkWidget::hierarchy-changed.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="previous_toplevel">
<parameter_description> Previous toplevel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_position">
<description>
This function returns the position you need to pass to
gtk_window_move() to keep @window in its current position.  This
means that the meaning of the returned value varies with window
gravity. See gtk_window_move() for more details.

If you haven&apos;t changed the window gravity, its gravity will be
#GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()
gets the position of the top-left corner of the window manager
frame for the window. gtk_window_move() sets the position of this
same top-left corner.

gtk_window_get_position() is not 100% reliable because the X Window System
does not specify a way to obtain the geometry of the
decorations placed on a window by the window manager.
Thus GTK+ is using a &quot;best guess&quot; that works with most
window managers.

Moreover, nearly all window managers are historically broken with
respect to their handling of window gravity. So moving a window to
its current position as returned by gtk_window_get_position() tends
to result in moving the window slightly. Window managers are
slowly getting better over time.

If a window has gravity #GDK_GRAVITY_STATIC the window manager
frame is not relevant, and thus gtk_window_get_position() will
always produce accurate results. However you can&apos;t use static
gravity to do things like place a window in a corner of the screen,
because static gravity ignores the window manager decorations.

If you are saving and restoring your application&apos;s window
positions, you should know that it&apos;s impossible for applications to
do this without getting it somewhat wrong because applications do
not have sufficient knowledge of window manager state. The Correct
Mechanism is to support the session management protocol (see the
&quot;GnomeClient&quot; object in the GNOME libraries for example) and allow
the window manager to save your window sizes and positions.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> return location for X coordinate of gravity-determined reference p\oint
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> return location for Y coordinate of gravity-determined reference p\oint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_set_screen">
<description>
Sets the screen for a recent manager; the screen is used to
track the user&apos;s currently configured recently used documents
storage.

Since: 2.10

Deprecated: 2.12: This function has been deprecated and should
not be used in newly written code. Calling this function has
no effect.

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_parent_window">
<description>
Sets a non default parent window for @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="parent_window">
<parameter_description> the new parent window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_get_model">
<description>
Return value: the &quot;child model&quot; being sorted

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModelSort
</parameter_description>
</parameter>
</parameters>
<return> the &quot;child model&quot; being sorted
</return>
</function>

<function name="gtk_builder_new">
<description>
Creates a new builder object.


</description>
<parameters>
</parameters>
<return> a new #GtkBuilder object

Since: 2.12
</return>
</function>

<function name="gtk_font_button_set_show_size">
<description>
If @show_size is %TRUE, the font size will be displayed along with the name of the selected font.

Since: 2.4

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
<parameter name="show_size">
<parameter_description> %TRUE if font size should be displayed in dialog.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_detachable">
<description>
Sets whether the tab can be detached from @notebook to another
notebook or widget.

Note that 2 notebooks must share a common group identificator
(see gtk_notebook_set_group_id ()) to allow automatic tabs
interchange between them.

If you want a widget to interact with a notebook through DnD
(i.e.: accept dragged tabs from it) it must be set as a drop
destination and accept the target &quot;GTK_NOTEBOOK_TAB&quot;. The notebook
will fill the selection with a GtkWidget** pointing to the child
widget that corresponds to the dropped tab.

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
static void
on_drop_zone_drag_data_received (GtkWidget        *widget,
GdkDragContext   *context,
gint              x,
gint              y,
GtkSelectionData *selection_data,
guint             info,
guint             time,
gpointer          user_data)
{
GtkWidget *notebook;
GtkWidget **child;

notebook = gtk_drag_get_source_widget (context);
child = (void*) selection_data-&amp;gt;data;

process_widget (*child);
gtk_container_remove (GTK_CONTAINER (notebook), *child);
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

If you want a notebook to accept drags from other widgets,
you will have to set your own DnD code to do it.

Since: 2.10

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child #GtkWidget
</parameter_description>
</parameter>
<parameter name="detachable">
<parameter_description> whether the tab is detachable or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_mnemonic_modifier">
<description>
Return value: the modifier mask used to activate

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the modifier mask used to activate
mnemonics on this window.
</return>
</function>

<function name="GtkActionGroup">
<description>
The post_activate signal is emitted just after the @action in the
@action_group is activated

This is intended for #GtkUIManager to proxy the signal and provide global
notification just after any action is activated.

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the group
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_is_ancestor">
<description>
Determines whether @widget is somewhere inside @ancestor, possibly with
intermediate containers.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> another #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @ancestor contains @widget as a child, 
grandchild, great grandchild, etc.
</return>
</function>

<function name="gtk_window_unstick">
<description>
Asks to unstick @window, which means that it will appear on only
one of the user&apos;s desktops. Note that you shouldn&apos;t assume the
window is definitely unstuck afterward, because other entities
(e.g. the user or &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
manager&amp;lt;/link&amp;gt;) could stick it again. But normally the window will
end up stuck. Just don&apos;t write code that crashes if not.

You can track stickiness via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_box">
<description>
Draws a box on @window with the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_indent">
<description>
Sets the default indentation for paragraphs in @text_view.
Tags in the buffer may override the default.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> indentation in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_btree_is_valid">
<description>
Check to see if the entire #GtkTextBTree is valid or not for
the given view.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextBTree
</parameter_description>
</parameter>
<parameter name="view_id">
<parameter_description> ID for the view
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the entire #GtkTextBTree is valid
</return>
</function>

<function name="gtk_notebook_set_group">
<description>
Sets a group identificator pointer for @notebook, notebooks sharing
the same group identificator pointer will be able to exchange tabs
via drag and drop. A notebook with a %NULL group identificator will
not be able to exchange tabs with any other notebook.

Since: 2.12

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> a pointer to identify the notebook group, or %NULL to unset it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_get_inconsistent">
<description>
Gets the value set by gtk_toggle_button_set_inconsistent().


</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the button is displayed as inconsistent, %FALSE otherwise
</return>
</function>

<function name="gtk_file_chooser_get_use_preview_label">
<description>
Gets whether a stock label should be drawn with the name of the previewed
file.  See gtk_file_chooser_set_use_preview_label().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file chooser is set to display a label with the
name of the previewed file, %FALSE otherwise.
</return>
</function>

<function name="gtk_text_layout_get_cursor_locations">
<description>
Given an iterator within a text layout, determine the positions of the
strong and weak cursors if the insertion point is at that
iterator. The position of each cursor is stored as a zero-width
rectangle. The strong cursor location is the location where
characters of the directionality equal to the base direction of the
paragraph are inserted.  The weak cursor location is the location
where characters of the directionality opposite to the base
direction of the paragraph are inserted.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="strong_pos">
<parameter_description> location to store the strong cursor position (may be %NULL)
</parameter_description>
</parameter>
<parameter name="weak_pos">
<parameter_description> location to store the weak cursor position (may be %NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_set_page_setup">
<description>
Sets the page setup of the #GtkPrintUnixDialog.

Since: 2.10

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
<parameter name="page_setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_auto_startup_notification">
<description>
By default, after showing the first #GtkWindow, GTK+ calls 
gdk_notify_startup_complete().  Call this function to disable 
the automatic startup notification. You might do this if your 
first window is a splash screen, and you want to delay notification 
until after your real main window has been shown, for example.

In that example, you would disable startup notification
temporarily, show your splash screen, then re-enable it so that
showing the main window would automatically result in notification.

Since: 2.2

</description>
<parameters>
<parameter name="setting">
<parameter_description> %TRUE to automatically do startup notification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_reorder">
<description>
Reorders @store to follow the order indicated by @new_order. Note that
this function only works with unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> an array of integers mapping the new position of each child
to its old position before the re-ordering,
i.e. @new_order&amp;lt;literal&amp;gt;[newpos] = oldpos&amp;lt;/literal&amp;gt;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_serialize_formats">
<description>
This function returns the rich text serialize formats registered
with @buffer using gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset()


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="n_formats">
<parameter_description> return location for the number of formats
</parameter_description>
</parameter>
</parameters>
<return> an array of #GdkAtom&amp;lt;!-- --&amp;gt;s representing the registered
formats.

Since: 2.10
</return>
</function>

<function name="gtk_text_buffer_get_iter_at_line">
<description>
Initializes @iter to the start of the given line.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number counting from 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_palette_to_string">
<description>
Encodes a palette as a string, useful for persistent storage.


</description>
<parameters>
<parameter name="colors">
<parameter_description> an array of colors.
</parameter_description>
</parameter>
<parameter name="n_colors">
<parameter_description> length of the array.
</parameter_description>
</parameter>
</parameters>
<return> allocated string encoding the palette.
</return>
</function>

<function name="gtk_selection_clear_targets">
<description>
Remove all targets registered for the given selection for the
widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description>    a #GtkWidget
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom representing a selection
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tooltip_trigger_tooltip_query">
<description>
Triggers a new tooltip query on @display, in order to update the current
visible tooltip, or to show/hide the current tooltip.  This function is
useful to call when, for example, the state of the widget changed by a
key press.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_button_set_width_chars">
<description>
Sets the width (in characters) that @button will use to @n_chars.

Since: 2.6

</description>
<parameters>
<parameter name="button">
<parameter_description> the button widget to examine.
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> the new width, in characters.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_system_model_get_path">
<description>
Gets the path for a particular row in @model. 


</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTreeIter pointing to a row of @model
</parameter_description>
</parameter>
</parameters>
<return> the path. This string is owned by @model and
or freed. If you want to save the path for later use,
you must make a copy, since the string may be freed
on later changes to the file system.
</return>
</function>

<function name="gtk_text_iter_forward_cursor_positions">
<description>
Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of positions to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable
</return>
</function>

<function name="gtk_tree_view_column_get_title">
<description>
Return value: the title of the column. This string should not be

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> the title of the column. This string should not be
modified or freed.
</return>
</function>

<function name="gtk_icon_size_get_name">
<description>
Gets the canonical name of the given icon size. The returned string 
is statically allocated and should not be freed.

</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkIconSize.
</parameter_description>
</parameter>
</parameters>
<return> the name of the given icon size.
</return>
</function>

<function name="gtk_button_get_label">
<description>
Fetches the text from the label of the button, as set by
gtk_button_set_label(). If the label text has not 
been set the return value will be %NULL. This will be the 
case if you create an empty button with gtk_button_new() to 
use as a container.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> The text of the label widget. This string is owned
by the widget and must not be modified or freed.
</return>
</function>

<function name="gtk_text_mark_get_left_gravity">
<description>
Determines whether the mark has left gravity.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mark has left gravity, %FALSE otherwise
</return>
</function>

<function name="_gtk_size_group_get_child_requisition">
<description>
Retrieve the &quot;child requisition&quot; of the widget, taking account grouping
of the widget&apos;s requisition with other widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> location to store computed requisition.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_set_show_not_found">
<description>
Sets whether @chooser should display the recently used resources that
it didn&apos;t find.  This only applies to local resources.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="show_not_found">
<parameter_description> whether to show the local items we didn&apos;t find
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_expander_get_spacing">
<description>
Gets the value set by gtk_expander_set_spacing().


</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
</parameters>
<return> spacing between the expander and child.

Since: 2.4
</return>
</function>

<function name="gtk_list_store_move_before">
<description>
Moves @iter in @store to the position before @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the end of the list.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_path">
<description>
Obtains the full path to @widget. The path is simply the name of a
widget and all its parents in the container hierarchy, separated by
periods. The name of a widget comes from
gtk_widget_get_name(). Paths are used to apply styles to a widget
in gtkrc configuration files. Widget names are the type of the
widget by default (e.g. &quot;GtkButton&quot;) or can be set to an
application-specific value with gtk_widget_set_name(). By setting
the name of a widget, you allow users or theme authors to apply
styles to that specific widget in their gtkrc
file. @path_reversed_p fills in the path in reverse order,
i.e. starting with @widget&apos;s name instead of starting with the name
of @widget&apos;s outermost ancestor.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="path_length">
<parameter_description> location to store length of the path, or %NULL
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> location to store allocated path string, or %NULL 
</parameter_description>
</parameter>
<parameter name="path_reversed">
<parameter_description> location to store allocated reverse path string, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_new_from_pixbuf">
<description>
Creates a status icon displaying @pixbuf. 

The image will be scaled down to fit in the available 
space in the notification area, if necessary.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkStatusIcon

Since: 2.10
</return>
</function>

<function name="gtk_drag_set_icon_pixmap">
<description>
Sets @pixmap as the icon for a given drag. GTK+ retains
references for the arguments, and will release them when
they are no longer needed. In general, gtk_drag_set_icon_pixbuf()
will be more convenient to use.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> the colormap of the icon 
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the image data for the icon 
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the transparency mask for the icon
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within @pixmap of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within @pixmap of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_move_after">
<description>
Moves @iter in @store to the position after @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the start of the list.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_modified">
<description>
Indicates whether the buffer has been modified since the last call
to gtk_text_buffer_set_modified() set the modification flag to
%FALSE. Used for example to enable a &quot;save&quot; function in a text
editor.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the buffer has been modified
</return>
</function>

<function name="gtk_text_buffer_remove_all_tags">
<description>
Removes all tags in the range between @start and @end.  Be careful
with this function; it could remove tags added in code unrelated to
the code you&apos;re currently writing. That is, using this function is
probably a bad idea if you have two or more unrelated code sections
that add tags.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be untagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be untagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_orientation">
<description>
Retrieves the current orientation of the toolbar. See
gtk_toolbar_set_orientation().


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the orientation
</return>
</function>

<function name="gtk_entry_get_layout_offsets">
<description>

Obtains the position of the #PangoLayout used to render text
in the entry, in widget coordinates. Useful if you want to line
up the text in an entry with some other text, e.g. when using the
entry to implement editable cells in a sheet widget.

Also useful to convert mouse events into coordinates inside the
#PangoLayout, e.g. to take some action if some part of the entry text
is clicked.

Note that as the user scrolls around in the entry the offsets will
change; you&apos;ll need to connect to the &quot;notify::scroll-offset&quot;
signal to track this. Remember when using the #PangoLayout
functions you need to convert to and from pixels using
PANGO_PIXELS() or #PANGO_SCALE.

Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store X offset of layout, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store Y offset of layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_set_sensitive">
<description>
Sets the ::sensitive property of the action to @sensitive. Note that 
this doesn&apos;t necessarily mean effective sensitivity. See 
gtk_action_is_sensitive() 
for that.

Since: 2.6

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="sensitive">
<parameter_description> %TRUE to make the action sensitive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_register_deserialize_tagset">
<description>
This function registers GTK+&apos;s internal rich text serialization
format with the passed @buffer. See
gtk_text_buffer_register_serialize_tagset() for details.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tagset_name">
<parameter_description> an optional tagset name, on %NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GdkAtom that corresponds to the newly registered
format&apos;s mime-type.

Since: 2.10
</return>
</function>

<function name="gtk_window_set_wmclass">
<description>
Don&apos;t use this function. It sets the X Window System &quot;class&quot; and
&quot;name&quot; hints for a window.  According to the ICCCM, you should
always set these to the same value for all windows in an
application, and GTK+ sets them to that value by default, so calling
this function is sort of pointless. However, you may want to call
gtk_window_set_role() on each window in your application, for the
benefit of the session manager. Setting the role allows the window
manager to restore window positions when loading a saved session.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="wmclass_name">
<parameter_description> window name hint
</parameter_description>
</parameter>
<parameter name="wmclass_class">
<parameter_description> window class hint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_text_with_mnemonic">
<description>
Sets the label&apos;s text from the string @str.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen 
automatically, or explicitly using gtk_label_set_mnemonic_widget().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_filename">
<description>
Retrieves the source filename, or %NULL if none is set. The
filename is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> image filename. This string must not be modified
or freed.
</return>
</function>

<function name="gtk_menu_get_tearoff_state">
<description>
Return value: %TRUE if the menu is currently torn off.

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu is currently torn off.
</return>
</function>

<function name="gtk_text_iter_backward_find_char">
<description>
Same as gtk_text_iter_forward_find_char(), but goes backward from @iter.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="pred">
<parameter_description> function to be called on each character
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @pred
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> search limit, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_tree_model_get">
<description>
Gets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by a place to store the value being
retrieved.  The list is terminated by a -1. For example, to get a
value from column 0 with type %G_TYPE_STRING, you would
write: &amp;lt;literal&amp;gt;gtk_tree_model_get (model, iter, 0, &amp;amp;place_string_here, -1)&amp;lt;/literal&amp;gt;,
where &amp;lt;literal&amp;gt;place_string_here&amp;lt;/literal&amp;gt; is a &amp;lt;type&amp;gt;gchar*&amp;lt;/type&amp;gt; to be 
filled with the string.
If appropriate, the returned values have to be freed or unreferenced.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a row in @tree_model
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value return locations, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_increments">
<description>
Sets the step and page sizes for the range.
The step size is used when the user clicks the #GtkScrollbar
arrows or moves #GtkScale via arrow keys. The page size
is used for example when moving via Page Up or Page Down keys.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> step size
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> page size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_set_vadjustment">
<description>
Sets the vertical adjustment of the viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_frame_dimensions">
<description>
(Note: this is a special-purpose function intended for the framebuffer
port; see gtk_window_set_has_frame(). It will have no effect on the
window border drawn by the window manager, which is the normal
case when using the X Window system.)

For windows with frames (see gtk_window_set_has_frame()) this function
can be used to change the size of the frame border.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow that has a frame
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> The width of the left border
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> The height of the top border
</parameter_description>
</parameter>
<parameter name="right">
<parameter_description> The width of the right border
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> The height of the bottom border
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_filter_add_pattern">
<description>
Adds a rule allowing a shell style glob to a filter.

Since: 2.4

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> a shell style glob
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_button_new_with_color">
<description>
Creates a new color button. 


</description>
<parameters>
<parameter name="color">
<parameter_description> A #GdkColor to set the current color with.
</parameter_description>
</parameter>
</parameters>
<return> a new color button.

Since: 2.4
</return>
</function>

<function name="gtk_text_view_set_border_window_size">
<description>
Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
Automatically destroys the corresponding window if the size is set
to 0, and creates the window if the size is set to non-zero.  This
function can only be used for the &quot;border windows,&quot; it doesn&apos;t work
with #GTK_TEXT_WINDOW_WIDGET, #GTK_TEXT_WINDOW_TEXT, or
#GTK_TEXT_WINDOW_PRIVATE.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> window to affect
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> width or height of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_get_focus_hadjustment">
<description>
Retrieves the horizontal focus adjustment for the container. See
gtk_container_set_focus_hadjustment ().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the horizontal focus adjustment, or %NULL if
none has been set.
</return>
</function>

<function name="gtk_recent_info_has_group">
<description>
Checks whether @group_name appears inside the groups registered for the
recently used item @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> name of a group
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the group was found.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_column_queue_resize">
<description>
Flags the column, and the cell renderers added to this column, to have
their sizes renegotiated.

Since: 2.8

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_icon_from_file">
<description>
Sets an icon to be used as fallback for windows that haven&apos;t
had gtk_window_set_icon_list() called on them from a file
on disk. Warns on failure if @err is %NULL.


</description>
<parameters>
<parameter name="filename">
<parameter_description> location of icon file
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> location to store error, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the icon succeeded.

Since: 2.2
</return>
</function>

<function name="gtk_widget_add_accelerator">
<description>
Installs an accelerator for this @widget in @accel_group that causes
@accel_signal to be emitted if the accelerator is activated.
The @accel_group needs to be added to the widget&apos;s toplevel via
gtk_window_add_accel_group(), and the signal must be of type %G_RUN_ACTION.
Accelerators added through this function are not user changeable during
runtime. If you want to support accelerators that can be changed by the
user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
gtk_menu_item_set_accel_path() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description>       widget to install an accelerator on
</parameter_description>
</parameter>
<parameter name="accel_signal">
<parameter_description> widget signal to emit on accelerator activation
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description>  accel group for this widget, added to its toplevel
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>    GDK keyval of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>   modifier key combination of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_flags">
<parameter_description>  flag accelerators, e.g. %GTK_ACCEL_VISIBLE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_clamp_iter_to_vrange">
<description>
If the iterator is not fully in the range @top &amp;lt;= y &amp;lt; @bottom,
then, if possible, move it the minimum distance so that the
iterator in this range.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description>    the top of the range
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> the bottom the range
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterator was moved, otherwise %FALSE.
</return>
</function>

<function name="gtk_builder_value_from_string_type">
<description>
Like gtk_builder_value_from_string(), this function demarshals 
a value from a string, but takes a #GType instead of #GParamSpec.
This function calls g_value_init() on the @value argument, so it 
need not be initialised beforehand.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType of the value
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string representation of the value
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the #GValue to store the result in
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success

Since: 2.12
</return>
</function>

<function name="GtkCellRendererPixbuf">
<description>
Specifies whether the rendered pixbuf should be colorized
according to the #GtkCellRendererState.

Since: 2.8

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_set_fixed_size">
<description>
Sets the renderer size to be explicit, independent of the properties set.

</description>
<parameters>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the cell renderer, or -1
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the cell renderer, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_get_pixbuf">
<description>
Gets the #GdkPixbuf being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> the displayed pixbuf, or %NULL if the image is empty
</return>
</function>

<function name="gtk_binding_entry_clear">
<description>
Use of this function is deprecated.

</description>
<parameters>
<parameter name="binding_set">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_add_pattern">
<description>
Adds a rule that allows resources based on a pattern matching their
display name.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> a file pattern
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_set_page_header_image">
<description>
Sets a header image for @page. This image is displayed in the header
area of the assistant when @page is the current page.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the new header image @page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_purge_items">
<description>
Purges every item from the recently used resources list.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the number of items that have been removed from the
recently used resources list.

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_set_line_offset">
<description>
Moves @iter within a line, to a new &amp;lt;emphasis&amp;gt;character&amp;lt;/emphasis&amp;gt;
(not byte) offset. The given character offset must be less than or
equal to the number of characters in the line; if equal, @iter
moves to the start of the next line. See
gtk_text_iter_set_line_index() if you have a byte index rather than
a character offset.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter 
</parameter_description>
</parameter>
<parameter name="char_on_line">
<parameter_description> a character offset relative to the start of @iter&apos;s current line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_printer_has_details">
<description>
Return value: %TRUE if @printer details are available

</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @printer details are available

Since: 2.12
</return>
</function>

<function name="gtk_action_get_visible">
<description>
Return value: %TRUE if the action itself is visible.

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the action itself is visible.

Since: 2.4
</return>
</function>

<function name="gtk_cell_renderer_spin_new">
<description>
Creates a new #GtkCellRendererSpin. 


</description>
<parameters>
</parameters>
<return> a new #GtkCellRendererSpin

Since: 2.10
</return>
</function>

<function name="gtk_about_dialog_get_wrap_license">
<description>
Returns: %TRUE if the license text is wrapped 

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the license text is wrapped 

Since: 2.8
</return>
</function>

<function name="gtk_builder_get_type_from_name">
<description>
Looks up a type by name, using the virtual function that 
#GtkBuilder has for that purpose.


</description>
<parameters>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> type name to lookup
</parameter_description>
</parameter>
</parameters>
<return> the #GType found for @type_name or #G_TYPE_INVALID 
if no type was found

Since: 2.12
</return>
</function>

<function name="gtk_text_view_scroll_to_mark">
<description>
Scrolls @text_view so that @mark is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center. 
If @use_align is %FALSE, the text scrolls the minimal distance to 
get the mark onscreen, possibly not scrolling at all. The effective 
screen for purposes of this function is reduced by a margin of size 
@within_margin.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
<parameter name="within_margin">
<parameter_description> margin as a [0.0,0.5) fraction of screen size
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments (if %FALSE, just 
get the mark onscreen)
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> horizontal alignment of mark within visible area
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> vertical alignment of mark within visible area
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_paper_width">
<description>
Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the paper width
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the units of @width
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_move_column_after">
<description>
Moves @column to be after to @base_column.  If @base_column is %NULL, then
@column is placed in the first position.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to be moved.
</parameter_description>
</parameter>
<parameter name="base_column">
<parameter_description> The #GtkTreeViewColumn to be moved relative to, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_fullscreen">
<description>
Asks to place @window in the fullscreen state. Note that you
shouldn&apos;t assume the window is definitely full screen afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could unfullscreen it
again, and not all window managers honor requests to fullscreen
windows. But normally the window will end up fullscreen. Just
don&apos;t write code that crashes if not.

You can track the fullscreen state via the &quot;window_state_event&quot; signal
on #GtkWidget.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_clear">
<description>
Removes all rows from the list store.  


</description>
<parameters>
<parameter name="list_store">
<parameter_description> a #GtkListStore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_ppd_name">
<description>
Gets the PPD name of the #GtkPaperSize, which
may be %NULL.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
</parameters>
<return> the PPD name of @size

Since: 2.10
</return>
</function>

<function name="GtkStyle">
<description>
Emitted when the group of radio menu items that a radio menu item belongs
to changes. This is emitted when a radio menu item switches from
being alone to being part of a group of 2 or more menu items, or
vice-versa, and when a button is moved from one group of 2 or
more menu items ton a different one, but not when the composition
of the group that a menu item belongs to changes.

Since: 2.4

</description>
<parameters>
<parameter name="style">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_name">
<description>
Sets the icon for a given drag from a named themed icon. See
the docs for #GtkIconTheme for more details. Note that the
size of the icon depends on the icon theme (the icon is
loaded at the symbolic size #GTK_ICON_SIZE_DND), thus 
@hot_x and @hot_y have to be used with care.

Since: 2.8

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> name of icon to use
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset of the hotspot within the icon
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset of the hotspot within the icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_keynav_failed">
<description>
This function should be called whenever keyboard navigation within
a single widget hits a boundary. The function emits the
#GtkWidget::keynav-changed signal on the widget and its return 
value should be interpreted in a way similar to the return value of
gtk_widget_child_focus():

When %TRUE is returned, stay in the widget, the failed keyboard
navigation is Ok and/or there is nowhere we can/should move the
focus to.

When %FALSE is returned, the caller should continue with keyboard
navigation outside the widget, e.g. by calling
gtk_widget_child_focus() on the widget&apos;s toplevel.

The default ::keynav-failed handler returns %TRUE for 
%GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other 
values of #GtkDirectionType, it looks at the 
#GtkSettings:gtk-keynav-cursor-only&quot; setting and returns %FALSE 
if the setting is %TRUE. This way the entire user interface
becomes cursor-navigatable on input devices such as mobile phones
which only have cursor keys but no tab key.

Whenever the default handler returns %TRUE, it also calls
gtk_widget_error_bell() to notify the user of the failed keyboard
navigation.

A use case for providing an own implementation of ::keynav-failed 
(either by connecting to it or by overriding it) would be a row of
#GtkEntry widgets where the user should be able to navigate the
entire row with the cursor keys, as e.g. known from user interfaces 
that require entering license keys.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> direction of focus movement
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if stopping keyboard navigation is fine, %FALSE
if the emitting widget should try to handle the keyboard
navigation attempt in its parent container(s).

Since: 2.12
</return>
</function>

<function name="gtk_window_set_deletable">
<description>
By default, windows have a close button in the window frame. Some 
&amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window managers&amp;lt;/link&amp;gt; allow GTK+ to 
disable this button. If you set the deletable property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to show a close button. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_window_show().

On Windows, this function always works, since there&apos;s no window manager
policy involved.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to decorate the window as deletable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_uri">
<description>
Sets the file referred to by @uri as the current file for the file chooser,
by changing to the URI&apos;s parent folder and actually selecting the URI in the
list.  If the @chooser is #GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI&apos;s base
name will also appear in the dialog&apos;s file name entry.

If the URI isn&apos;t in the current folder of @chooser, then the current folder
of @chooser will be changed to the folder containing @uri. This is equivalent
to a sequence of gtk_file_chooser_unselect_all() followed by
gtk_file_chooser_select_uri().

Note that the URI must exist, or nothing will be done except
for the directory change.
If you are implementing a &amp;lt;guimenuitem&amp;gt;File/Save As...&amp;lt;/guimenuitem&amp;gt; dialog, you
should use this function if you already have a file name to which the user may save; for example,
when the user opens an existing file and then does &amp;lt;guimenuitem&amp;gt;File/Save As...&amp;lt;/guimenuitem&amp;gt;
on it.  If you don&apos;t have a file name already &amp;mdash; for example, if the user just created
a new file and is saving it for the first time, do not call this function.  Instead, use
something similar to this:

&amp;lt;programlisting&amp;gt;
if (document_is_new)
{
/&amp;lt;!-- --&amp;gt;* the user just created a new document *&amp;lt;!-- --&amp;gt;/
gtk_file_chooser_set_current_folder_uri (chooser, default_folder_for_saving);
gtk_file_chooser_set_current_name (chooser, &quot;Untitled document&quot;);
}
else
{
/&amp;lt;!-- --&amp;gt;* the user edited an existing document *&amp;lt;!-- --&amp;gt;/ 
gtk_file_chooser_set_uri (chooser, existing_uri);
}
&amp;lt;/programlisting&amp;gt;


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI to set as current
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if both the folder could be changed and the URI was
selected successfully, %FALSE otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_file_info_get_display_key">
<description>
Return value: The collate key for the display name, or %NULL

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkFileInfo
</parameter_description>
</parameter>
</parameters>
<return> The collate key for the display name, or %NULL
if the display name hasn&apos;t been set.
</return>
</function>

<function name="gtk_icon_source_set_direction_wildcarded">
<description>
If the text direction is wildcarded, this source can be used
as the base image for an icon in any #GtkTextDirection.
If the text direction is not wildcarded, then the
text direction the icon source applies to should be set
with gtk_icon_source_set_direction(), and the icon source
will only be used with that text direction.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to wildcard the text direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_set_orientation">
<description>
Sets the page orientation of the #GtkPageSetup.

Since: 2.10

</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> a #GtkPageOrientation value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_invisible_new">
<description>
Creates a new #GtkInvisible.


</description>
<parameters>
</parameters>
<return> a new #GtkInvisible.
</return>
</function>

<function name="GtkFontButton">
<description>
The ::font-set signal is emitted when the user selects a font. 
When handling this signal, use gtk_font_button_get_font_name() 
to find out which font was just selected.

Note that this signal is only emitted when the &amp;lt;emphasis&amp;gt;user&amp;lt;/emphasis&amp;gt;
changes the font. If you need to react to programmatic font changes
as well, use the notify::font-name signal.

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_set_visible_line_index">
<description>
Like gtk_text_iter_set_line_index(), but the index is in visible
bytes, i.e. text with a tag making it invisible is not counted
in the index.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="byte_on_line">
<parameter_description> a byte index
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_get_valist">
<description>
Gets the values of one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a %NULL-terminated list of property names and #GValue*, 
starting with @first_prop_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_set_cursor">
<description>
Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user&apos;s attention on a particular item.  
If @cell is not %NULL, then focus is given to the cell specified by 
it. Additionally, if @start_editing is %TRUE, then editing should be 
started in the specified cell.  

This function is often followed by &amp;lt;literal&amp;gt;gtk_widget_grab_focus 
(icon_view)&amp;lt;/literal&amp;gt; in order to give keyboard focus to the widget.  
Please note that editing can only happen when the widget is realized.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> One of the cell renderers of @icon_view, or %NULL
</parameter_description>
</parameter>
<parameter name="start_editing">
<parameter_description> %TRUE if the specified cell should start being edited.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_lower_stepper_sensitivity">
<description>
Gets the sensitivity policy for the stepper that points to the
&apos;lower&apos; end of the GtkRange&apos;s adjustment.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> The lower stepper&apos;s sensitivity policy.

Since: 2.10
</return>
</function>

<function name="gtk_print_unix_dialog_get_settings">
<description>
Gets a new #GtkPrintSettings object that represents the
current values in the print dialog. Note that this creates a
&amp;lt;emphasis&amp;gt;new object&amp;lt;/emphasis&amp;gt;, and you need to unref it
if don&apos;t want to keep it.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkPrintSettings object with the values from @dialog

Since: 2.10
</return>
</function>

<function name="gtk_plug_new">
<description>
Creates a new plug widget inside the #GtkSocket identified
by @socket_id. If @socket_id is 0, the plug is left &quot;unplugged&quot; and
can later be plugged into a #GtkSocket by  gtk_socket_add_id().


</description>
<parameters>
<parameter name="socket_id">
<parameter_description>  the window ID of the socket, or 0.
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkPlug widget.
</return>
</function>

<function name="gtk_window_get_opacity">
<description>
Fetches the requested opacity for this window. See
gtk_window_set_opacity().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the requested opacity for this window.

Since: 2.12
</return>
</function>

<function name="gtk_recent_chooser_get_show_numbers">
<description>
Return value: %TRUE if the recent chooser should show display numbers,

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the recent chooser should show display numbers,
%FALSE otherwise.

Since: 2.10
</return>
</function>

<function name="gtk_text_buffer_get_deserialize_formats">
<description>
This function returns the rich text deserialize formats registered
with @buffer using gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset()


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="n_formats">
<parameter_description> return location for the number of formats
</parameter_description>
</parameter>
</parameters>
<return> an array of #GdkAtom&amp;lt;!-- --&amp;gt;s representing the registered
formats.

Since: 2.10
</return>
</function>

<function name="gtk_menu_attach">
<description>
Adds a new #GtkMenuItem to a (table) menu. The number of &apos;cells&apos; that
an item will occupy is specified by @left_attach, @right_attach,
@top_attach and @bottom_attach. These each represent the leftmost,
rightmost, uppermost and lower column and row numbers of the table.
(Columns and rows are indexed from zero).

Note that this function is not related to gtk_menu_detach().

Since: 2.4

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu.
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkMenuItem.
</parameter_description>
</parameter>
<parameter name="left_attach">
<parameter_description> The column number to attach the left side of the item to.
</parameter_description>
</parameter>
<parameter name="right_attach">
<parameter_description> The column number to attach the right side of the item to.
</parameter_description>
</parameter>
<parameter name="top_attach">
<parameter_description> The row number to attach the top of the item to.
</parameter_description>
</parameter>
<parameter name="bottom_attach">
<parameter_description> The row number to attach the bottom of the item to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert_after">
<description>
Inserts a new row after @sibling. If @sibling is %NULL, then the row will be
prepended to the beginning of the list. @iter will be changed to point to
this new row. The row will be empty after this function is called. To fill
in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scale_button_get_value">
<description>
Gets the current value of the scale button.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkScaleButton
</parameter_description>
</parameter>
</parameters>
<return> current value of the scale button

Since: 2.12
</return>
</function>

<function name="_gtk_window_unset_focus_and_default">
<description>
Checks whether the focus and default widgets of @window are
@widget or a descendent of @widget, and if so, unset them.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget inside of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set_valuesv">
<description>
A variant of gtk_tree_store_set_valist() which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings or in case
the number of columns to change is not known until run-time.

Since: 2.12

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> an array of column numbers
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> an array of GValues
</parameter_description>
</parameter>
<parameter name="n_values">
<parameter_description> the length of the @columns and @values arrays
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_event_box_set_visible_window">
<description>
Set whether the event box uses a visible or invisible child
window. The default is to use visible windows.

In an invisible window event box, the window that the
event box creates is a %GDK_INPUT_ONLY window, which 
means that it is invisible and only serves to receive
events.

A visible window event box creates a visible (%GDK_INPUT_OUTPUT)
window that acts as the parent window for all the widgets  
contained in the event box.

You should generally make your event box invisible if
you just want to trap events. Creating a visible window
may cause artifacts that are visible to the user, especially
if the user is using a theme with gradients or pixmaps.

The main reason to create a non input-only event box is if
you want to set the background to a different color or
draw on it.

&amp;lt;note&amp;gt;&amp;lt;para&amp;gt;
There is one unexpected issue for an invisible event box that has its
window below the child. (See gtk_event_box_set_above_child().)
Since the input-only window is not an ancestor window of any windows
that descendent widgets of the event box create, events on these 
windows aren&apos;t propagated up by the windowing system, but only by GTK+.
The practical effect of this is if an event isn&apos;t in the event
mask for the descendant window (see gtk_widget_add_events()),  
it won&apos;t be received by the event box. 
&amp;lt;/para&amp;gt;&amp;lt;para&amp;gt;
This problem doesn&apos;t occur for visible event boxes, because in
that case, the event box window is actually the ancestor of the
descendant windows, not just at the same place on the screen.
&amp;lt;/para&amp;gt;&amp;lt;/note&amp;gt;

Since: 2.4

</description>
<parameters>
<parameter name="event_box">
<parameter_description> a #GtkEventBox
</parameter_description>
</parameter>
<parameter name="visible_window">
<parameter_description> boolean value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_direction">
<description>
Gets the reading direction for a particular widget. See
gtk_widget_set_direction().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the reading direction for the widget.
</return>
</function>

<function name="_gtk_file_chooser_select_path">
<description>
Selects the file referred to by @path. An internal function. See
_gtk_file_chooser_select_uri().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to select
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if both the folder could be changed and the path was
selected successfully, %FALSE otherwise.

Since: 2.4
</return>
</function>

<function name="gtk_font_button_get_title">
<description>
Retrieves the title of the font selection dialog.


</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
</parameters>
<return> an internal copy of the title string which must not be freed.

Since: 2.4
</return>
</function>

<function name="gtk_init">
<description>
Call this function before using any other GTK+ functions in your GUI
applications.  It will initialize everything needed to operate the 
toolkit and parses some standard command line options. @argc and 
@argv are adjusted accordingly so your own code will 
never see those standard arguments. 

Note that there are some alternative ways to initialize GTK+: 
if you are calling gtk_parse_args(), gtk_init_check(), 
gtk_init_with_args() or g_option_context_parse() with 
the option group returned by gtk_get_option_group(), you 
&amp;lt;emphasis&amp;gt;don&apos;t&amp;lt;/emphasis&amp;gt; have to call gtk_init().

&amp;lt;note&amp;gt;&amp;lt;para&amp;gt;
This function will terminate your program if it was unable to initialize 
the GUI for some reason. If you want your program to fall back to a 
textual interface you want to call gtk_init_check() instead.
&amp;lt;/para&amp;gt;&amp;lt;/note&amp;gt;

</description>
<parameters>
<parameter name="argc">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argc&amp;lt;/parameter&amp;gt; parameter of your 
main() function. Changed if any arguments were handled.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argv&amp;lt;/parameter&amp;gt; parameter of main(). 
Any parameters understood by gtk_init() are stripped before return.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_set_line_index">
<description>
Same as gtk_text_iter_set_line_offset(), but works with a
&amp;lt;emphasis&amp;gt;byte&amp;lt;/emphasis&amp;gt; index. The given byte index must be at
the start of a character, it can&apos;t be in the middle of a UTF-8
encoded character.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="byte_on_line">
<parameter_description> a byte index relative to the start of @iter&apos;s current line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_property_parse_color">
<description>
A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
color given either by its name or in the form 
&amp;lt;literal&amp;gt;{ red, green, blue }&amp;lt;/literal&amp;gt; where %red, %green and
%blue are integers between 0 and 65535 or floating-point numbers
between 0 and 1.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
<parameter name="gstring">
<parameter_description> the #GString to be parsed
</parameter_description>
</parameter>
<parameter name="property_value">
<parameter_description> a #GValue which must hold #GdkColor values.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GdkColor.
</return>
</function>

<function name="gtk_recent_manager_get_default">
<description>
Gets a unique instance of #GtkRecentManager, that you can share
in your application without caring about memory management. The
returned instance will be freed when you application terminates.


</description>
<parameters>
</parameters>
<return> A unique #GtkRecentManager. Do not ref or unref it.

Since: 2.10
</return>
</function>

<function name="gtk_dialog_response">
<description>
Emits the #GtkDialog::response signal with the given response ID. 
Used to indicate that the user has responded to the dialog in some way;
typically either you or gtk_dialog_run() will be monitoring the
::response signal and take appropriate action.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> response ID 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete_mark">
<description>
Deletes @mark, so that it&apos;s no longer located anywhere in the
buffer. Removes the reference the buffer holds to the mark, so if
you haven&apos;t called g_object_ref() on the mark, it will be freed. Even
if the mark isn&apos;t freed, most operations on @mark become
invalid, until it gets added to a buffer again with 
gtk_text_buffer_add_mark(). Use gtk_text_mark_get_deleted() to  
find out if a mark has been removed from its buffer.
The &quot;mark_deleted&quot; signal will be emitted as notification after 
the mark is deleted.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_tag_table">
<description>
Get the #GtkTextTagTable associated with this buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> the buffer&apos;s tag table
</return>
</function>

<function name="_gtk_key_hash_add_entry">
<description>
Inserts a pair of key symbol and modifier mask into the key hash. 

</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> key symbol for this binding
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> modifiers for this binding
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value to insert in the key hash
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_btree_validate_line">
<description>
Revalidate a single line of the btree for the given view, propagate
results up through the entire tree.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextBTree
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description> line to validate
</parameter_description>
</parameter>
<parameter name="view_id">
<parameter_description> view ID for the view to validate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_remove_tag_by_name">
<description>
Calls gtk_text_tag_table_lookup() on the buffer&apos;s tag table to
get a #GtkTextTag, then calls gtk_text_buffer_remove_tag().

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be untagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be untagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_info_get_display_name">
<description>
Gets the display name for an icon. A display name is a
string to be used in place of the icon name in a user
visible context like a list of icons.


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
</parameters>
<return> the display name for the icon or %NULL, if
the icon doesn&apos;t have a specified display name. This value
is owned @icon_info and must not be modified or free.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_get_search_column">
<description>
Gets the column searched on by the interactive search code.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the column the interactive search code searches in.
</return>
</function>

<function name="gtk_recent_chooser_set_show_private">
<description>
Whether to show recently used resources marked registered as private.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="show_private">
<parameter_description> %TRUE to show private items, %FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_paper_width">
<description>
Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
converted to @unit. 


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the paper width, in units of @unit

Since: 2.10
</return>
</function>

<function name="gtk_toggle_action_new">
<description>
Creates a new #GtkToggleAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().


</description>
<parameters>
<parameter name="name">
<parameter_description> A unique name for the action
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> The label displayed in menu items and on buttons
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> A tooltip for the action
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> The stock icon to display in widgets representing the action
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkToggleAction

Since: 2.4
</return>
</function>

<function name="gtk_combo_box_get_add_tearoffs">
<description>
Gets the current value of the :add-tearoffs property.


</description>
<parameters>
<parameter name="combo_box">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
</parameters>
<return> the current value of the :add-tearoffs property.
</return>
</function>

<function name="gtk_target_list_remove">
<description>
Removes a target from a target list.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the interned atom representing the target
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_set_sensitive">
<description>
Changes the sensitivity of @action_group

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="sensitive">
<parameter_description> new sensitivity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_focus_on_map">
<description>
Windows may set a hint asking the desktop environment not to receive
the input focus when the window is mapped.  This function sets this
hint.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to let this window receive input focus on map
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_restrict_to_fill_level">
<description>
Gets whether the range is restricted to the fill level.


</description>
<parameters>
<parameter name="range">
<parameter_description> A #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @range is restricted to the fill level.

Since: 2.12
</return>
</function>

<function name="gtk_window_set_position">
<description>
Sets a position constraint for this window. If the old or new
constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
the window to be repositioned to satisfy the new constraint. 

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> a position constraint.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_alternative_dialog_button_order">
<description>
Returns: Whether the alternative button order should be used

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen, or %NULL to use the default screen
</parameter_description>
</parameter>
</parameters>
<return> Whether the alternative button order should be used

Since: 2.6
</return>
</function>

<function name="gtk_tree_store_clear">
<description>
Removes all rows from @tree_store

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> a #GtkTreeStore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_job_get_track_print_status">
<description>
Return value: %TRUE if print job status will be reported after printing

</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if print job status will be reported after printing

Since: 2.10
</return>
</function>

<function name="gtk_recent_info_ref">
<description>
Increases the reference count of @recent_info by one.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the recent info object with its reference count increased
by one.

Since: 2.10
</return>
</function>

<function name="gtk_print_context_get_page_setup">
<description>
Obtains the #GtkPageSetup that determines the page
dimensions of the #GtkPrintContext.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkPrintContext
</parameter_description>
</parameter>
</parameters>
<return> the page setup of @context

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_map_expanded_rows">
<description>
Calls @func on all expanded rows.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to be called
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to be passed to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_selection_get_filename">
<description>
This function returns the selected filename in the GLib file name
encoding. To convert to UTF-8, call g_filename_to_utf8(). The
returned string points to a statically allocated buffer and should
be copied if you plan to keep it around.

If no file is selected then the selected directory path is returned.


</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
</parameters>
<return> currently-selected filename in the on-disk encoding.
</return>
</function>

<function name="gtk_item_factory_set_translate_func">
<description>
Sets a function to be used for translating the path elements before they
are displayed. 

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GtkTranslateFunc function to be used to translate path elements 
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func and @notify
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GtkDestroyNotify function to be called when @ifactory is 
destroyed and when the translation function is changed again
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_select_region">
<description>
Selects a range of characters in the label, if the label is selectable.
See gtk_label_set_selectable(). If the label is not selectable,
this function has no effect. If @start_offset or
@end_offset are -1, then the end of the label will be substituted.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> start offset (in characters not bytes)
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> end offset (in characters not bytes)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_interactive_at_cursor">
<description>
Calls gtk_text_buffer_insert_interactive() at the cursor
position.

@default_editable indicates the editability of text that doesn&apos;t
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text in UTF-8 format
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text in bytes, or -1
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of buffer
</parameter_description>
</parameter>
</parameters>
<return> whether text was actually inserted
</return>
</function>

<function name="gtk_text_iter_forward_word_ends">
<description>
Calls gtk_text_iter_forward_word_end() up to @count times.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of times to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_combo_box_entry_new_with_model">
<description>
Creates a new #GtkComboBoxEntry which has a #GtkEntry as child and a list
of strings as popup. You can get the #GtkEntry from a #GtkComboBoxEntry
using GTK_ENTRY (GTK_BIN (combo_box_entry)-&amp;gt;child). To add and remove
strings from the list, just modify @model using its data manipulation
API.


</description>
<parameters>
<parameter name="model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="text_column">
<parameter_description> A column in @model to get the strings from.
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkComboBoxEntry.

Since: 2.4
</return>
</function>

<function name="gtk_progress_bar_set_fraction">
<description>
Causes the progress bar to &quot;fill in&quot; the given fraction
of the bar. The fraction should be between 0.0 and 1.0,
inclusive.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="fraction">
<parameter_description> fraction of the task that&apos;s been completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_find">
<description>
Finds the first entry in an accelerator group for which 
@find_func returns %TRUE and returns its #GtkAccelKey.


</description>
<parameters>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
<parameter name="find_func">
<parameter_description> a function to filter the entries of @accel_group with
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @find_func
</parameter_description>
</parameter>
</parameters>
<return> the key of the first entry passing @find_func. The key is 
owned by GTK+ and must not be freed.
</return>
</function>

<function name="gtk_item_factory_new">
<description>
Creates a new #GtkItemFactory.

Beware that the returned object does not have a floating reference.

Deprecated: 2.4:	

</description>
<parameters>
<parameter name="container_type">
<parameter_description> the kind of menu to create; can be
#GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the factory path of the new item factory, a string of the form 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup to which the accelerators for the
menu items will be added, or %NULL to create a new one
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkItemFactory
</return>
</function>

<function name="GtkPaned">
<description>
The &quot;shrink&quot; child property determines whether the child can be made 
smaller than its requisition.

Since: 2.4 

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_copy">
<description>
Creates a new #GtkTreePath as a copy of @path.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkTreePath.
</return>
</function>

<function name="gtk_text_view_set_tabs">
<description>
Sets the default tab stops for paragraphs in @text_view.
Tags in the buffer may override the default.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="tabs">
<parameter_description> tabs as a #PangoTabArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_string">
<description>
Draws a text string on @window with the given parameters.

Deprecated: Use gtk_paint_layout() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_insert_column_with_data_func">
<description>
Convenience function that inserts a new column into the #GtkTreeView
with the given cell renderer and a #GtkCellDataFunc to set cell renderer
attributes (normally using data from the model). See also
gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
If @tree_view has &quot;fixed_height&quot; mode enabled, then the new column will have its
&quot;sizing&quot; property set to be GTK_TREE_VIEW_COLUMN_FIXED.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> Position to insert, -1 for append
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> column title
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> cell renderer for column
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to set attributes of cell renderer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for @func
</parameter_description>
</parameter>
<parameter name="dnotify">
<parameter_description> destroy notifier for @data
</parameter_description>
</parameter>
</parameters>
<return> number of columns in the tree view post-insert
</return>
</function>

<function name="gtk_paned_get_position">
<description>
Obtains the position of the divider between the two panes.


</description>
<parameters>
<parameter name="paned">
<parameter_description> a #GtkPaned widget
</parameter_description>
</parameter>
</parameters>
<return> position of the divider
</return>
</function>

<function name="gtk_action_group_add_toggle_actions_full">
<description>
This variant of gtk_action_group_add_toggle_actions() adds a 
#GDestroyNotify callback for @user_data. 

Since: 2.4

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of toggle action descriptions
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the number of entries
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to the action callbacks
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> destroy notification callback for @user_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_prepend_widget">
<description>
Adds a widget to the beginning of the given toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget to add to the toolbar. 
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_scale_format_value">
<description>
Emits #GtkScale::format-value signal to format the value, 
if no user signal handlers, falls back to a default format.


</description>
<parameters>
<parameter name="scale">
<parameter_description> a #GtkScale
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> adjustment value
</parameter_description>
</parameter>
</parameters>
<return> formatted value
</return>
</function>

<function name="gtk_im_context_get_surrounding">
<description>
Retrieves context around the insertion point. Input methods
typically want context in order to constrain input text based on
existing text; this is important for languages such as Thai where
only some sequences of characters are allowed.

This function is implemented by emitting the
GtkIMContext::retrieve_surrounding signal on the input method; in
response to this signal, a widget should provide as much context as
is available, up to an entire paragraph, by calling
gtk_im_context_set_surrounding(). Note that there is no obligation
for a widget to respond to the ::retrieve_surrounding signal, so input
methods must be prepared to function without context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> location to store a UTF-8 encoded string of text
holding context around the insertion point.
If the function returns %TRUE, then you must free
the result stored in this location with g_free().
</parameter_description>
</parameter>
<parameter name="cursor_index">
<parameter_description> location to store byte index of the insertion cursor
within @text.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if surrounding text was provided; in this case
you must free the result stored in *text.
</return>
</function>

<function name="gtk_text_iter_backward_visible_word_starts">
<description>
Calls gtk_text_iter_backward_visible_word_start() up to @count times.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of times to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 

Since: 2.4
</return>
</function>

<function name="gtk_calendar_mark_day">
<description>
Places a visual marker on a particular day.


</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar 
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day number to mark between 1 and 31.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, always
</return>
</function>

<function name="gtk_item_factory_get_widget_by_action">
<description>
Obtains the widget which was constructed from the #GtkItemFactoryEntry
with the given @action.

If there are multiple items with the same action, the result is 
undefined.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> an action as specified in the @callback_action field
of #GtkItemFactoryEntry
</parameter_description>
</parameter>
</parameters>
<return> the widget which corresponds to the given action, or %NULL
if no widget was found
</return>
</function>

<function name="gtk_print_settings_get_number_up">
<description>
Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the number of pages per sheet

Since: 2.10
</return>
</function>

<function name="gtk_file_system_volume_get_display_name">
<description>
Queries the human-readable name for a @volume.  This string can be displayed
in a list of volumes that can be accessed, for example.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
</parameters>
<return> A string with the human-readable name for a #GtkFileSystemVolume.
</return>
</function>

<function name="gtk_text_iter_get_visible_line_index">
<description>
Return value: byte index of @iter with respect to the start of the line

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> byte index of @iter with respect to the start of the line
</return>
</function>

<function name="gtk_toolbar_get_drop_index">
<description>
Return value: The position corresponding to the point (@x, @y) on the toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of a point on the toolbar
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of a point on the toolbar
</parameter_description>
</parameter>
</parameters>
<return> The position corresponding to the point (@x, @y) on the toolbar.

Since: 2.4
</return>
</function>

<function name="gtk_print_job_get_status">
<description>
Gets the status of the print job.


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GtkPrintJob
</parameter_description>
</parameter>
</parameters>
<return> the status of @job

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_get_cell_area">
<description>
Fills the bounding rectangle in bin_window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a path not currently displayed, the @y and @height fields
of the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The sum of all cell rects does not cover the
entire tree; there are extra pixels in between rows, for example. The
returned rectangle is equivalent to the @cell_area passed to
gtk_cell_renderer_render().  This function is only valid if @tree_view is
realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordinates
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with cell rect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_create_child_anchor">
<description>
This is a convenience function which simply creates a child anchor
with gtk_text_child_anchor_new() and inserts it into the buffer
with gtk_text_buffer_insert_child_anchor(). The new anchor is
owned by the buffer; no reference count is returned to
the caller of gtk_text_buffer_create_child_anchor().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location in the buffer
</parameter_description>
</parameter>
</parameters>
<return> the created child anchor
</return>
</function>

<function name="gtk_accelerator_set_default_mod_mask">
<description>
Sets the modifiers that will be considered significant for keyboard
accelerators. The default mod mask is #GDK_CONTROL_MASK |
#GDK_SHIFT_MASK | #GDK_MOD1_MASK | #GDK_SUPER_MASK | 
#GDK_HYPER_MASK | #GDK_META_MASK, that is, Control, Shift, Alt, 
Super, Hyper and Meta. Other modifiers will by default be ignored 
by #GtkAccelGroup.
You must include at least the three modifiers Control, Shift
and Alt in any value you pass to this function.

The default mod mask should be changed on application startup,
before using any accelerator groups.

</description>
<parameters>
<parameter name="default_mod_mask">
<parameter_description> accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_menu_new_for_manager">
<description>
Creates a new #GtkRecentChooserMenu widget using @manager as
the underlying recently used resources manager.

This is useful if you have implemented your own recent manager,
or if you have a customized instance of a #GtkRecentManager
object or if you wish to share a common #GtkRecentManager object
among multiple #GtkRecentChooser widgets.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRecentChooserMenu, bound to @manager.

Since: 2.10
</return>
</function>

<function name="gtk_cell_view_new">
<description>
Creates a new #GtkCellView widget.


</description>
<parameters>
</parameters>
<return> A newly created #GtkCellView widget.

Since: 2.6
</return>
</function>

<function name="gtk_action_block_activate_from">
<description>
Disables calls to the gtk_action_activate()
function by signals on the given proxy widget.  This is used to
break notification loops for things like check or radio actions.

This function is intended for use by action implementations.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
<parameter name="proxy">
<parameter_description> a proxy widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_resizable">
<description>
Return value: %TRUE, if the @tree_column can be resized.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the @tree_column can be resized.
</return>
</function>

<function name="gtk_widget_set_tooltip_window">
<description>
Replaces the default, usually yellow, window used for displaying
tooltips with @custom_window. GTK+ will take care of showing and
hiding @custom_window at the right moment, to behave likewise as
the default tooltip window. If @custom_window is %NULL, the default
tooltip window will be used.

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="custom_window">
<parameter_description> a #GtkWindow, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_fixed_set_has_window">
<description>
Sets whether a #GtkFixed widget is created with a separate
#GdkWindow for @widget-&amp;gt;window or not. (By default, it will be
created with no separate #GdkWindow). This function must be called
while the #GtkFixed is not realized, for instance, immediately after the
window is created.

This function was added to provide an easy migration path for
older applications which may expect #GtkFixed to have a separate window.

</description>
<parameters>
<parameter name="fixed">
<parameter_description> a #GtkFixed
</parameter_description>
</parameter>
<parameter name="has_window">
<parameter_description> %TRUE if a separate window should be created
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_diamond">
<description>
Draws a diamond in the given rectangle on @window using the given
parameters.

Deprecated: Use gtk_paint_diamond() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle to draw the diamond in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_choose_icon">
<description>
Looks up a named icon and returns a structure containing
information such as the filename of the icon. The icon
can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)

If @icon_names contains more than one name, this function 
tries them all in the given order before falling back to 
inherited icon themes.


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="icon_names">
<parameter_description> %NULL-terminated array of icon names to lookup
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> desired icon size
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags modifying the behavior of the icon lookup
</parameter_description>
</parameter>
</parameters>
<return> a #GtkIconInfo structure containing information
about the icon, or %NULL if the icon wasn&apos;t found. Free with
gtk_icon_info_free()

Since: 2.12
</return>
</function>

<function name="gtk_ui_manager_get_action">
<description>
Looks up an action by following a path. See gtk_ui_manager_get_widget()
for more information about paths.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path
</parameter_description>
</parameter>
</parameters>
<return> the action whose proxy widget is found by following the path, 
or %NULL if no widget was found.

Since: 2.4
</return>
</function>

<function name="gtk_icon_theme_prepend_search_path">
<description>
Prepends a directory to the search path. 
See gtk_icon_theme_set_search_path().

Since: 2.4

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> directory name to prepend to the icon path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_menu_bar_cycle_focus">
<description>
Move the focus between menubars in the toplevel.

</description>
<parameters>
<parameter name="menubar">
<parameter_description> a #GtkMenuBar
</parameter_description>
</parameter>
<parameter name="dir">
<parameter_description> direction in which to cycle the focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_is_text_available">
<description>
Test to see if there is text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported text targets. This function 
waits for the data to be received using the main loop, so events, 
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_text() since it doesn&apos;t need to retrieve
the actual text.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is there is text available, %FALSE otherwise.
</return>
</function>

<function name="gtk_icon_view_selected_foreach">
<description>
Calls a function for each selected icon. Note that the model or
selection cannot be modified from within this function.

Since: 2.6 

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The funcion to call for each selected icon.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to pass to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_action_get_show_numbers">
<description>
Return value: %TRUE if numbers should be shown.

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkRecentAction
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if numbers should be shown.

Since: 2.12
</return>
</function>

<function name="gtk_print_settings_set_page_ranges">
<description>
Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="page_ranges">
<parameter_description> an array of #GtkPageRange&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="num_ranges">
<parameter_description> the length of @page_ranges
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_button_set_icon_name">
<description>
Sets the icon for the tool button from a named themed icon.
See the docs for #GtkIconTheme for more details.
The &quot;icon_name&quot; property only has an effect if not
overridden by non-%NULL &quot;label&quot;, &quot;icon_widget&quot; and &quot;stock_id&quot;
properties.

Since: 2.8

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the name of the themed icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_prepend_page_menu">
<description>
Prepends a page to @notebook, specifying the widget to use as the
label in the popup menu.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu, if that is enabled. If %NULL, and @tab_label
is a #GtkLabel or %NULL, then the menu label will be
a newly created label with the same text as @tab_label;
If @tab_label is not a #GtkLabel, @menu_label must be
specified if the page-switch menu is to be used.
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the prepended
page in the notebook, or -1 if function fails
</return>
</function>

<function name="gtk_notebook_get_menu_label_text">
<description>
Retrieves the text of the menu label for the page containing
@child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget of a page of the notebook.
</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label, or %NULL if the
widget does not have a menu label other than
the default menu label, or the menu label widget
is not a #GtkLabel. The string is owned by
the widget and must not be freed.
</return>
</function>

<function name="gtk_image_set_from_icon_name">
<description>
See gtk_image_new_from_icon_name() for details.

Since: 2.6

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_order">
<description>
Swaps the value of @first and @second if @second comes before
@first in the buffer. That is, ensures that @first and @second are
in sequence. Most text buffer functions that take a range call this
automatically on your behalf, so there&apos;s no real reason to call it yourself
in those cases. There are some exceptions, such as gtk_text_iter_in_range(),
that expect a pre-sorted range.


</description>
<parameters>
<parameter name="first">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="second">
<parameter_description> another #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_to_key_file">
<description>
This function adds the paper size from @size to @key_file.

Since: 2.12

</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize
</parameter_description>
</parameter>
<parameter name="key_file">
<parameter_description> the #GKeyFile to save the paper size to
</parameter_description>
</parameter>
<parameter name="group_name">
<parameter_description> the group to add the settings to in @key_file
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_word_starts">
<description>
Calls gtk_text_iter_backward_word_start() up to @count times.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of times to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_notebook_prepend_page">
<description>
Prepends a page to @notebook.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the prepended
page in the notebook, or -1 if function fails
</return>
</function>

<function name="gtk_buildable_parser_finished">
<description>
Called when the builder finishes the parsing of a 
&amp;lt;link linkend=&quot;BUILDER-UI&quot;&amp;gt;GtkBuilder UI definition&amp;lt;/link&amp;gt;. 
Note that this will be called once for each time 
gtk_builder_add_from_file() or gtk_builder_add_from_string() 
is called on a builder.

Since: 2.12

</description>
<parameters>
<parameter name="buildable">
<parameter_description> a #GtkBuildable
</parameter_description>
</parameter>
<parameter name="builder">
<parameter_description> a #GtkBuilder
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_set_markup_column">
<description>
Sets the column with markup information for @icon_view to be
@column. The markup column must be of type #G_TYPE_STRING.
If the markup column is set to something, it overrides
the text column set by gtk_icon_view_set_text_column().

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> A column in the currently used model, or -1 to display no text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_trigger_tooltip_query">
<description>
Triggers a tooltip query on the display where the toplevel of @widget
is located. See gtk_tooltip_trigger_tooltip_query() for more
information.

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_separator_tool_item_set_draw">
<description>
When @separator_tool_items is drawn as a vertical line, or just blank.
Setting this #FALSE along with gtk_tool_item_set_expand() is useful
to create an item that forces following items to the end of the toolbar.

Since: 2.4

</description>
<parameters>
<parameter name="item">
<parameter_description> a #GtkSeparatorToolItem
</parameter_description>
</parameter>
<parameter name="draw">
<parameter_description> whether @separator_tool_item is drawn as a vertical line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_query_child_packing">
<description>
Obtains information about how @child is packed into @box.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget of the child to query
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> pointer to return location for #GtkBox:expand child property 
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> pointer to return location for #GtkBox:fill child property 
</parameter_description>
</parameter>
<parameter name="padding">
<parameter_description> pointer to return location for #GtkBox:padding child property 
</parameter_description>
</parameter>
<parameter name="pack_type">
<parameter_description> pointer to return location for #GtkBox:pack-type child property 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_system_volume_get_is_mounted">
<description>
Queries whether a #GtkFileSystemVolume is mounted or not.  If it is not, it
can be mounted with gtk_file_system_volume_mount().


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> a #GtkFileSystemVolume
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the @volume is mounted, FALSE otherwise.
</return>
</function>

<function name="gtk_font_button_get_font_name">
<description>
Retrieves the name of the currently selected font.


</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
</parameters>
<return> an internal copy of the font name which must not be freed.

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_set_search_entry">
<description>
Sets the entry which the interactive search code will use for this
@tree_view.  This is useful when you want to provide a search entry
in our interface at all time at a fixed position.  Passing %NULL for
@entry will make the interactive search code use the built-in popup
entry again.

Since: 2.10

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="entry">
<parameter_description> the entry the interactive search code of @tree_view should use or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_find_pixmap_in_path">
<description>
Looks up a file in pixmap path for the specified #GtkSettings.
If the file is not found, it outputs a warning message using
g_warning() and returns %NULL.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
<parameter name="scanner">
<parameter_description> Scanner used to get line number information for the
warning message, or %NULL
</parameter_description>
</parameter>
<parameter name="pixmap_file">
<parameter_description> name of the pixmap file to locate.
</parameter_description>
</parameter>
</parameters>
<return> the filename. 
</return>
</function>

<function name="_gtk_file_chooser_entry_get_action">
<description>
Gets the action for this entry. 


</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooserEntry
</parameter_description>
</parameter>
</parameters>
<return> the action
</return>
</function>

<function name="gtk_ui_manager_remove_ui">
<description>
Unmerges the part of @self&amp;lt;!-- --&amp;gt;s content identified by @merge_id.

Since: 2.4

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
<parameter name="merge_id">
<parameter_description> a merge id as returned by gtk_ui_manager_add_ui_from_string()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_set_focus_on_click">
<description>
Sets whether the combo box will grab focus when it is clicked with 
the mouse. Making mouse clicks not grab focus is useful in places 
like toolbars where you don&apos;t want the keyboard focus removed from 
the main area of the application.

Since: 2.6

</description>
<parameters>
<parameter name="combo">
<parameter_description> a #GtkComboBox
</parameter_description>
</parameter>
<parameter name="focus_on_click">
<parameter_description> whether the combo box grabs focus when clicked 
with the mouse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_set_focus_hadjustment">
<description>
Hooks up an adjustment to focus handling in a container, so when a child 
of the container is focused, the adjustment is scrolled to show that 
widget. This function sets the horizontal alignment. 
See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining 
the adjustment and gtk_container_set_focus_vadjustment() for setting
the vertical adjustment.

The adjustments have to be in pixel units and in the same coordinate 
system as the allocation for immediate children of the container. 

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> an adjustment which should be adjusted when the focus is 
moved among the descendents of @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_mark_get_visible">
<description>
Return value: %TRUE if visible

</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if visible
</return>
</function>

<function name="gtk_icon_view_unset_model_drag_dest">
<description>
Undoes the effect of gtk_icon_view_enable_model_drag_dest().

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_frame_dimensions">
<description>
(Note: this is a special-purpose function intended for the
framebuffer port; see gtk_window_set_has_frame(). It will not
return the size of the window border drawn by the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;, which is the normal
case when using a windowing system.  See
gdk_window_get_frame_extents() to get the standard window border
extents.)

Retrieves the dimensions of the frame window for this toplevel.
See gtk_window_set_has_frame(), gtk_window_set_frame_dimensions().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> location to store the width of the frame at the left, or %NULL
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> location to store the height of the frame at the top, or %NULL
</parameter_description>
</parameter>
<parameter name="right">
<parameter_description> location to store the width of the frame at the returns, or %NULL
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> location to store the height of the frame at the bottom, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_select_multiple">
<description>
Sets whether multiple files can be selected in the file selector.  This is
only relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN or
GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.  

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="select_multiple">
<parameter_description> %TRUE if multiple files can be selected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkRadioButton">
<description>
Emitted when the group of radio buttons that a radio button belongs
to changes. This is emitted when a radio button switches from
being alone to being part of a group of 2 or more buttons, or
vice-versa, and when a button is moved from one group of 2 or
more buttons to a different one, but not when the composition
of the group that a button belongs to changes.

Since: 2.4

</description>
<parameters>
<parameter name="style">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_paper_size">
<description>
Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT, 
converted to a #GtkPaperSize.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the paper size

Since: 2.10
</return>
</function>

<function name="_gtk_file_chooser_entry_set_file_part">
<description>
Sets the current text shown in the file chooser entry.

</description>
<parameters>
<parameter name="chooser_entry">
<parameter_description> a #GtkFileChooserEntry
</parameter_description>
</parameter>
<parameter name="file_part">
<parameter_description> text to display in the entry, in UTF-8
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_use_markup">
<description>
Return value: %TRUE if the label&apos;s text will be parsed for markup.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the label&apos;s text will be parsed for markup.
</return>
</function>

<function name="gtk_image_get_storage_type">
<description>
Gets the type of representation being used by the #GtkImage
to store image data. If the #GtkImage has no image data,
the return value will be %GTK_IMAGE_EMPTY.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> image representation being used
</return>
</function>

<function name="gtk_tree_view_column_get_max_width">
<description>
Return value: The maximum width of the @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The maximum width of the @tree_column.
</return>
</function>

<function name="gtk_notebook_popup_enable">
<description>
Enables the popup menu: if the user clicks with the right mouse button on
the bookmarks, a menu with all the pages will be popped up.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hscale_new_with_range">
<description>
Creates a new horizontal scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it&apos;s the distance the
slider moves when using the arrow keys to adjust the scale value.

Note that the way in which the precision is derived works best if @step 
is a power of ten. If the resulting precision is not suitable for your 
needs, use gtk_scale_set_digits() to correct it.


</description>
<parameters>
<parameter name="min">
<parameter_description> minimum value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum value
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> step increment (tick size) used with keyboard shortcuts
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkHScale
</return>
</function>

<function name="gtk_tree_model_get_column_type">
<description>
Return value: The type of the column.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The column index.
</parameter_description>
</parameter>
</parameters>
<return> The type of the column.
</return>
</function>

<function name="gtk_toolbar_insert_space">
<description>
Inserts a new space in the toolbar at the specified position.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the number of widgets after which a space should be inserted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_list_icons">
<description>
Lists the icons in the current icon theme. Only a subset
of the icons can be listed by providing a context string.
The set of values for the context string is system dependent,
but will typically include such values as &quot;Applications&quot; and
&quot;MimeTypes&quot;.


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a string identifying a particular type of icon,
or %NULL to list all icons.
</parameter_description>
</parameter>
</parameters>
<return> a #GList list holding the names of all the
icons in the theme. You must first free each element
in the list with g_free(), then free the list itself
with g_list_free().

Since: 2.4
</return>
</function>

<function name="gtk_text_buffer_register_deserialize_format">
<description>
This function registers a rich text deserialization @function along with
its @mime_type with the passed @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> the format&apos;s mime-type
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the deserialize function to register
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> @function&apos;s user_data
</parameter_description>
</parameter>
<parameter name="user_data_destroy">
<parameter_description> a function to call when @user_data is no longer needed
</parameter_description>
</parameter>
</parameters>
<return> the #GdkAtom that corresponds to the newly registered
format&apos;s mime-type.

Since: 2.10
</return>
</function>

<function name="gtk_printer_get_job_count">
<description>
Gets the number of jobs currently queued on the printer.


</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the number of jobs on @printer

Since: 2.10
</return>
</function>

<function name="gtk_icon_view_create_drag_icon">
<description>
Creates a #GdkPixmap representation of the item at @path.  
This image is used for a drag icon.


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath in @icon_view
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated pixmap of the drag icon.

Since: 2.8
</return>
</function>

<function name="gtk_tree_view_column_set_cell_data_func">
<description>
Sets the #GtkTreeViewColumnFunc to use for the column.  This
function is used instead of the standard attributes mapping for
setting the column value, and should set the value of @tree_column&apos;s
cell renderer as appropriate.  @func may be %NULL to remove an
older one.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The #GtkTreeViewColumnFunc to use. 
</parameter_description>
</parameter>
<parameter name="func_data">
<parameter_description> The user data for @func.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> The destroy notification for @func_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_unset_style">
<description>
Unsets a toolbar style set with gtk_toolbar_set_style(), so that
user preferences will be used to determine the toolbar style.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_equal">
<description>
Tests whether two iterators are equal, using the fastest possible
mechanism. This function is very fast; you can expect it to perform
better than e.g. getting the character offset for each iterator and
comparing the offsets yourself. Also, it&apos;s a bit faster than
gtk_text_iter_compare().


</description>
<parameters>
<parameter name="lhs">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> another #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterators point to the same place in the buffer
</return>
</function>

<function name="gtk_text_buffer_add_selection_clipboard">
<description>
Adds @clipboard to the list of clipboards in which the selection 
contents of @buffer are available. In most cases, @clipboard will be 
the #GtkClipboard of type %GDK_SELECTION_PRIMARY for a view of @buffer.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_focus_on_map">
<description>
Gets the value set by gtk_window_set_focus_on_map().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window should receive the input focus when
mapped.

Since: 2.6
</return>
</function>

<function name="gtk_text_attr_appearance_new">
<description>
Create a new font description attribute. (This attribute
allows setting family, style, weight, variant, stretch,
and size simultaneously.)


</description>
<parameters>
<parameter name="desc">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gtk_button_set_use_stock">
<description>
If %TRUE, the label set on the button is used as a
stock id to select the stock item for the button.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="use_stock">
<parameter_description> %TRUE if the button should use a stock item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkRadioToolButton">
<description>
Sets a new group for a radio tool button.

Since: 2.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_expand">
<description>
Return value: %TRUE if @tool_item is allocated extra space.

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tool_item is allocated extra space.

Since: 2.4
</return>
</function>

<function name="gtk_radio_tool_button_get_group">
<description>
Return value: The group @button belongs to.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkRadioToolButton
</parameter_description>
</parameter>
</parameters>
<return> The group @button belongs to.

Since: 2.4
</return>
</function>

<function name="gtk_about_dialog_set_logo">
<description>
Sets the pixbuf to be displayed as logo in 
the about dialog. If it is %NULL, the default
window icon set with gtk_window_set_default_icon ()
will be used.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="logo">
<parameter_description> a #GdkPixbuf, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_copy">
<description>
Copies a #GtkPageSetup.


</description>
<parameters>
<parameter name="other">
<parameter_description> the #GtkPageSetup to copy
</parameter_description>
</parameter>
</parameters>
<return> a copy of @other

Since: 2.10
</return>
</function>

<function name="gtk_size_group_get_mode">
<description>
Gets the current mode of the size group. See gtk_size_group_set_mode().


</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
</parameters>
<return> the current mode of the size group.
</return>
</function>

<function name="gtk_tree_view_get_model">
<description>
Return value: A #GtkTreeModel, or %NULL if none is currently being used.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeModel, or %NULL if none is currently being used.
</return>
</function>

<function name="gtk_label_get_max_width_chars">
<description>
Retrieves the desired maximum width of @label, in characters. See
gtk_label_set_width_chars().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the maximum width of the label in characters.

Since: 2.6
</return>
</function>

<function name="gtk_paint_shadow">
<description>
Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkScrolledWindow">
<description>
Whether to place scrollbars within the scrolled window&apos;s bevel.

Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_get_popup_single_match">
<description>
Return value: %TRUE if the popup window will appear regardless of the

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the popup window will appear regardless of the
number of matches.

Since: 2.8
</return>
</function>

<function name="gtk_tool_item_set_tooltip">
<description>
Sets the #GtkTooltips object to be used for @tool_item, the
text to be displayed as tooltip on the item and the private text
to be used. See gtk_tooltips_set_tip().

Since: 2.4

Deprecated: 2.12: Use gtk_tool_item_set_tooltip_text() instead.

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
<parameter name="tooltips">
<parameter_description> The #GtkTooltips object to be used
</parameter_description>
</parameter>
<parameter name="tip_text">
<parameter_description> text to be used as tooltip text for @tool_item
</parameter_description>
</parameter>
<parameter name="tip_private">
<parameter_description> text to be used as private tooltip text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_prev_page">
<description>
Switches to the previous page. Nothing happens if the current page
is the first page.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_load_icon">
<description>
Looks up an icon in an icon theme, scales it to the given size
and renders it into a pixbuf. This is a convenience function;
if more details about the icon are needed, use
gtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon().

Note that you probably want to listen for icon theme changes and
update the icon. This is usually done by connecting to the 
GtkWidget::style-set signal. If for some reason you do not want to
update the icon when the icon theme changes, you should consider
using gdk_pixbuf_copy() to make a private copy of the pixbuf
returned by this function. Otherwise GTK+ may need to keep the old 
icon theme loaded, which would be a waste of memory.


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> the name of the icon to lookup
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the desired icon size. The resulting icon may not be
exactly this size; see gtk_icon_info_load_icon().
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags modifying the behavior of the icon lookup
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Location to store error information on failure, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the rendered icon; this may be a newly created icon
or a new reference to an internal icon, so you must not modify
the icon. Use g_object_unref() to release your reference to the
icon. %NULL if the icon isn&apos;t found.

Since: 2.4
</return>
</function>

<function name="gtk_text_buffer_get_text">
<description>
Return value: an allocated UTF-8 string

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of a range
</parameter_description>
</parameter>
<parameter name="include_hidden_chars">
<parameter_description> whether to include invisible text
</parameter_description>
</parameter>
</parameters>
<return> an allocated UTF-8 string
</return>
</function>

<function name="gtk_color_selection_get_has_opacity_control">
<description>
Determines whether the colorsel has an opacity control.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @colorsel has an opacity control.  %FALSE if it does&apos;t.
</return>
</function>

<function name="gtk_print_unix_dialog_get_selected_printer">
<description>
Gets the currently selected printer.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
</parameters>
<return> the currently selected printer

Since: 2.10
</return>
</function>

<function name="gtk_file_system_parse">
<description>
Given a string entered by a user, parse it (possibly using
heuristics) into a folder path and a UTF-8 encoded
filename part. (Suitable for passing to gtk_file_system_make_path())

Note that the returned filename point may point to a subfolder
of the returned folder. Adding a trailing path separator is needed
to enforce the interpretation as a folder name.

If parsing fails because the syntax of @str is not understood,
and error of type GTK_FILE_SYSTEM_ERROR_BAD_FILENAME will
be set in @error and %FALSE returned.

If parsing fails because a path was encountered that doesn&apos;t
exist on the filesystem, then an error of type
%GTK_FILE_SYSTEM_ERROR_NONEXISTENT will be set in @error
and %FALSE returned. (This only applies to parsing relative paths,
not to interpretation of @file_part. No check is made as
to whether @file_part exists.)


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="base_path">
<parameter_description> reference folder with respect to which relative
paths should be interpreted.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the string to parse
</parameter_description>
</parameter>
<parameter name="folder">
<parameter_description> location to store folder portion of result, or %NULL
</parameter_description>
</parameter>
<parameter name="file_part">
<parameter_description> location to store file portion of result, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing succeeds, otherwise, %FALSE.
</return>
</function>

<function name="gtk_drag_begin">
<description>
Initiates a drag on the source side. The function
only needs to be used when the application is
starting drags itself, and is not needed when
gtk_drag_source_set() is used.


</description>
<parameters>
<parameter name="widget">
<parameter_description> the source widget.
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> The targets (data formats) in which the
source can provide the data.
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> A bitmask of the allowed drag actions for this drag.
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> The button the user clicked to start the drag.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> The event that triggered the start of the drag.
</parameter_description>
</parameter>
</parameters>
<return> the context for this drag.
</return>
</function>

<function name="gtk_paper_size_get_display_name">
<description>
Gets the human-readable name of the #GtkPaperSize.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
</parameters>
<return> the human-readable name of @size

Since: 2.10
</return>
</function>

<function name="gtk_window_set_accept_focus">
<description>
Windows may set a hint asking the desktop environment not to receive
the input focus. This function sets this hint.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to let this window receive input focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_widget_new">
<description>
Creates a new #GtkRecentChooserWidget object.  This is an embeddable widget
used to access the recently used resources list.


</description>
<parameters>
</parameters>
<return> a new #GtkRecentChooserWidget

Since: 2.10
</return>
</function>

<function name="gtk_tree_model_filter_new">
<description>
Creates a new #GtkTreeModel, with @child_model as the child_model
and @root as the virtual root.


</description>
<parameters>
<parameter name="child_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="root">
<parameter_description> A #GtkTreePath or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkTreeModel.

Since: 2.4
</return>
</function>

<function name="gtk_assistant_get_nth_page">
<description>
Return value: The child widget, or %NULL if @page_num is out of bounds.

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> The index of a page in the @assistant, or -1 to get the last page;
</parameter_description>
</parameter>
</parameters>
<return> The child widget, or %NULL if @page_num is out of bounds.

Since: 2.10
</return>
</function>

<function name="GtkToolbar">
<description>
Is %TRUE if the icon-size property has been set.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_set_use_preedit">
<description>
Sets whether the IM context should use the preedit string
to display feedback. If @use_preedit is FALSE (default
is TRUE), then the IM context may use some other method to display
feedback, such as displaying it in a child of the root window.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="use_preedit">
<parameter_description> whether the IM context should use the preedit string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_misc_get_alignment">
<description>
Gets the X and Y alignment of the widget within its allocation. 
See gtk_misc_set_alignment().

</description>
<parameters>
<parameter name="misc">
<parameter_description> a #GtkMisc
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> location to store X alignment of @misc, or %NULL
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> location to store Y alignment of @misc, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_filter_get_model">
<description>
Return value: A pointer to a #GtkTreeModel.

</description>
<parameters>
<parameter name="filter">
<parameter_description> A #GtkTreeModelFilter.
</parameter_description>
</parameter>
</parameters>
<return> A pointer to a #GtkTreeModel.

Since: 2.4
</return>
</function>

<function name="gtk_color_selection_set_previous_color">
<description>
Sets the &apos;previous&apos; color to be @color.  This function should be called with
some hesitations, as it might seem confusing to have that color change.
Calling gtk_color_selection_set_current_color() will also set this color the first
time it is called.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to set the previous color with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_set_local_only">
<description>
Sets whether only local resources, that is resources using the file:// URI
scheme, should be shown in the recently used resources selector.  If
@local_only is %TRUE (the default) then the shown resources are guaranteed
to be accessible through the operating system native file system.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="local_only">
<parameter_description> %TRUE if only local files can be shown
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_set_cursor_direction">
<description>
Sets which text directions (left-to-right and/or right-to-left) for
which cursors will be drawn for the insertion point. The visual
point at which new text is inserted depends on whether the new
text is right-to-left or left-to-right, so it may be desired to
make the drawn position of the cursor depend on the keyboard state.

</description>
<parameters>
<parameter name="direction">
<parameter_description> the new direction(s) for which to draw cursors.
%GTK_TEXT_DIR_NONE means draw cursors for both
left-to-right insertion and right-to-left insertion.
(The two cursors will be visually distinguished.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_common_ancestor">
<description>
Find the common ancestor of @widget_a and @widget_b that
is closest to the two widgets.


</description>
<parameters>
<parameter name="widget_a">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="widget_b">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the closest common ancestor of @widget_a and
@widget_b or %NULL if @widget_a and @widget_b do not
share a common ancestor.
</return>
</function>

<function name="gtk_tree_model_sort_convert_iter_to_child_iter">
<description>
Sets @child_iter to point to the row pointed to by @sorted_iter.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="child_iter">
<parameter_description> An uninitialized #GtkTreeIter
</parameter_description>
</parameter>
<parameter name="sorted_iter">
<parameter_description> A valid #GtkTreeIter pointing to a row on @tree_model_sort.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_cursor">
<description>
Fills in @path and @cell with the current cursor path and cell. 
If the cursor isn&apos;t currently set, then *@path will be %NULL.  
If no cell currently has focus, then *@cell will be %NULL.

The returned #GtkTreePath must be freed with gtk_tree_path_free().


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> Return location for the current cursor path, or %NULL
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> Return location the current focus cell, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cursor is set.

Since: 2.8
</return>
</function>

<function name="gtk_widget_get_has_tooltip">
<description>
Return value: current value of has-tooltip on @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> current value of has-tooltip on @widget.

Since: 2.12
</return>
</function>

<function name="gtk_radio_tool_button_new_from_stock">
<description>
Creates a new #GtkRadioToolButton, adding it to @group. 
The new #GtkRadioToolButton will contain an icon and label from the
stock item indicated by @stock_id.


</description>
<parameters>
<parameter name="group">
<parameter_description> an existing radio button group, or %NULL if you are creating a new group
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the name of a stock item
</parameter_description>
</parameter>
</parameters>
<return> The new #GtkRadioToolItem

Since: 2.4
</return>
</function>

<function name="gtk_combo_box_get_active_text">
<description>
Returns: a newly allocated string containing the currently active text.

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox constructed with gtk_combo_box_new_text()
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the currently active text.

Since: 2.6
</return>
</function>

<function name="gtk_tree_view_column_cell_get_size">
<description>
Obtains the width and height needed to render the column.  This is used
primarily by the #GtkTreeView.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> The area a cell in the column will be allocated, or %NULL
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> location to return x offset of a cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> location to return y offset of a cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to return width needed to render a cell, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to return height needed to render a cell, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_prepend_text">
<description>
Prepends @string to the list of strings stored in @combo_box. Note that
you can only use this function with combo boxes constructed with
gtk_combo_box_new_text().

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox constructed with gtk_combo_box_new_text()
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> A string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_set_use_font">
<description>
If @use_font is %TRUE, the font name will be written using the selected font.  

Since: 2.4

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
<parameter name="use_font">
<parameter_description> If %TRUE, font name will be written using font chosen.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_property_parse_enum">
<description>
A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a single
enumeration value.

The enumeration value can be specified by its name, its nickname or
its numeric value. For consistency with flags parsing, the value
may be surrounded by parentheses.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
<parameter name="gstring">
<parameter_description> the #GString to be parsed
</parameter_description>
</parameter>
<parameter name="property_value">
<parameter_description> a #GValue which must hold enum values.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GEnumValue.
</return>
</function>

<function name="gtk_paper_size_free">
<description>
Free the given #GtkPaperSize object.

Since: 2.10

</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkPrinter">
<description>
Gets emitted in response to a request for detailed information
about a printer from the print backend. The @success parameter
indicates if the information was actually obtained.

Since: 2.10

</description>
<parameters>
<parameter name="printer">
<parameter_description> the #GtkPrinter on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> %TRUE if the details were successfully acquired
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_new">
<description>
Creates a new #GtkIconSource. A #GtkIconSource contains a #GdkPixbuf (or
image filename) that serves as the base image for one or more of the
icons in a #GtkIconSet, along with a specification for which icons in the
icon set will be based on that pixbuf or image file. An icon set contains
a set of icons that represent &quot;the same&quot; logical concept in different states,
different global text directions, and different sizes.

So for example a web browser&apos;s &quot;Back to Previous Page&quot; icon might
point in a different direction in Hebrew and in English; it might
look different when insensitive; and it might change size depending
on toolbar mode (small/large icons). So a single icon set would
contain all those variants of the icon. #GtkIconSet contains a list
of #GtkIconSource from which it can derive specific icon variants in
the set. 

In the simplest case, #GtkIconSet contains one source pixbuf from
which it derives all variants. The convenience function
gtk_icon_set_new_from_pixbuf() handles this case; if you only have
one source pixbuf, just use that function.

If you want to use a different base pixbuf for different icon
variants, you create multiple icon sources, mark which variants
they&apos;ll be used to create, and add them to the icon set with
gtk_icon_set_add_source().

By default, the icon source has all parameters wildcarded. That is,
the icon source will be used as the base icon for any desired text
direction, widget state, or icon size.


</description>
<parameters>
</parameters>
<return> a new #GtkIconSource
</return>
</function>

<function name="GtkCellRendererProgress">
<description>
The &quot;orientation&quot; property controls the direction and growth
direction of the progress bar (left-to-right, right-to-left,
top-to-bottom or bottom-to-top).

Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_toggle_set_radio">
<description>
If @radio is %TRUE, the cell renderer renders a radio toggle
(i.e. a toggle in a group of mutually-exclusive toggles).
If %FALSE, it renders a check toggle (a standalone boolean option).
This can be set globally for the cell renderer, or changed just
before rendering each cell in the model (for #GtkTreeView, you set
up a per-row setting using #GtkTreeViewColumn to associate model
columns with cell renderer properties).

</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle
</parameter_description>
</parameter>
<parameter name="radio">
<parameter_description> %TRUE to make the toggle look like a radio button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_file_system_model_set_show_files">
<description>
Sets whether files (as opposed to folders) should be included
in the #GtkTreeModel for display.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
<parameter name="show_files">
<parameter_description> whether files (as opposed to folders) should
be displayed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_justification">
<description>
Gets the default justification of paragraphs in @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default justification
</return>
</function>

<function name="gtk_file_chooser_get_uris">
<description>
Lists all the selected files and subfolders in the current folder of
@chooser. The returned names are full absolute URIs.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> a #GSList containing the URIs of all selected
files and subfolders in the current folder. Free the returned list
with g_slist_free(), and the filenames with g_free().

Since: 2.4
</return>
</function>

<function name="_gtk_xembed_get_focus_wrapped">
<description>
Gets whether the current focus sequence has wrapped around
to the beginning of the ultimate toplevel.


</description>
<parameters>
</parameters>
<return> %TRUE if the focus sequence has wrapped around.
</return>
</function>

<function name="gtk_drag_source_get_target_list">
<description>
Gets the list of targets this widget can provide for
drag-and-drop.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GtkTargetList, or %NULL if none

Since: 2.4
</return>
</function>

<function name="get_block_cursor">
<description>
Checks whether layout should display block cursor at given position.
For this layout must be in overwrite mode and text at @insert_iter 
must be editable.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GtkTextLineDisplay
</parameter_description>
</parameter>
<parameter name="insert_iter">
<parameter_description> iter pointing to the cursor location
</parameter_description>
</parameter>
<parameter name="insert_index">
<parameter_description> cursor offset in the @display&apos;s layout, it may
be different from @insert_iter&apos;s offset in case when preedit
string is present.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> location to store cursor position
</parameter_description>
</parameter>
<parameter name="cursor_at_line_end">
<parameter_description> whether cursor is at the end of line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_lookup_color">
<description>
Looks up @color_name in the style&apos;s logical color mappings,
filling in @color and returning %TRUE if found, otherwise
returning %FALSE. Do not cache the found mapping, because
it depends on the #GtkStyle and might change when a theme
switch occurs.


</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="color_name">
<parameter_description> the name of the logical color to look up
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the #GdkColor to fill in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mapping was found.

Since: 2.10
</return>
</function>

<function name="gtk_tree_view_set_cursor_on_cell">
<description>
Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user&apos;s attention on a particular row.  If
@focus_column is not %NULL, then focus is given to the column specified by
it. If @focus_column and @focus_cell are not %NULL, and @focus_column
contains 2 or more editable or activatable cells, then focus is given to
the cell specified by @focus_cell. Additionally, if @focus_column is
specified, and @start_editing is %TRUE, then editing should be started in
the specified cell.  This function is often followed by
@gtk_widget_grab_focus (@tree_view) in order to give keyboard focus to the
widget.  Please note that editing can only happen when the widget is
realized.

Since: 2.2

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
<parameter name="focus_column">
<parameter_description> A #GtkTreeViewColumn, or %NULL
</parameter_description>
</parameter>
<parameter name="focus_cell">
<parameter_description> A #GtkCellRenderer, or %NULL
</parameter_description>
</parameter>
<parameter name="start_editing">
<parameter_description> %TRUE if the specified cell should start being edited.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_get_default_language">
<description>
Return value: the default language as a #PangoLanguage, must not be

</description>
<parameters>
</parameters>
<return> the default language as a #PangoLanguage, must not be
freed
</return>
</function>

<function name="gtk_label_new">
<description>
Creates a new label with the given text inside it. You can
pass %NULL to get an empty label widget.


</description>
<parameters>
<parameter name="str">
<parameter_description> The text of the label
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkLabel
</return>
</function>

<function name="gtk_statusbar_get_context_id">
<description>
Returns: an integer id

</description>
<parameters>
<parameter name="statusbar">
<parameter_description> a #GtkStatusbar
</parameter_description>
</parameter>
<parameter name="context_description">
<parameter_description> textual description of what context 
the new message is being used in
</parameter_description>
</parameter>
</parameters>
<return> an integer id
</return>
</function>

<function name="gtk_size_group_remove_widget">
<description>
Removes a widget from a #GtkSizeGroup.

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGrup
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the #GtkWidget to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_update">
<description>
Manually force an update of the spin button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_orientation">
<description>
Return value: a #GtkOrientation indicating the orientation

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem: 
</parameter_description>
</parameter>
</parameters>
<return> a #GtkOrientation indicating the orientation
used for @tool_item

Since: 2.4
</return>
</function>

<function name="_gtk_im_module_create">
<description>
Create an IM context of a type specified by the string
ID @context_id.


</description>
<parameters>
<parameter name="context_id">
<parameter_description> the context ID for the context type to create
</parameter_description>
</parameter>
</parameters>
<return> a newly created input context of or @context_id, or
if that could not be created, a newly created GtkIMContextSimple.
</return>
</function>

<function name="gtk_tree_view_enable_model_drag_source">
<description>
Turns @tree_view into a drag source for automatic DND.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="start_button_mask">
<parameter_description> Mask of allowed buttons to start drag
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the table of targets that the drag will support
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the number of items in @targets
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> the bitmask of possible actions for a drag from this
widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_unix_dialog_get_current_page">
<description>
Gets the current page of the #GtkPrintDialog.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPrintUnixDialog
</parameter_description>
</parameter>
</parameters>
<return> the current page of @dialog

Since: 2.10
</return>
</function>

<function name="gtk_table_get_col_spacing">
<description>
Gets the amount of space between column @col, and
column @col + 1. See gtk_table_set_col_spacing().


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a column in the table, 0 indicates the first column
</parameter_description>
</parameter>
</parameters>
<return> the column spacing
</return>
</function>

<function name="gtk_entry_get_activates_default">
<description>
Retrieves the value set by gtk_entry_set_activates_default().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the entry will activate the default widget
</return>
</function>

<function name="gtk_widget_style_get_valist">
<description>
Non-vararg variant of gtk_widget_style_get(). Used primarily by language 
bindings.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; of pairs of property names and
locations to return the property values, starting with the location
for @first_property_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_ref_node">
<description>
Lets the tree ref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.

This function is primarily meant as a way for views to let caching model 
know when nodes are being displayed (and hence, whether or not to cache that
node.)  For example, a file-system based model would not want to keep the
entire file-hierarchy in memory, just the sections that are currently being
displayed by every current view.

A model should be expected to be able to get an iter independent of its
reffed state.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_show_now">
<description>
Shows a widget. If the widget is an unmapped toplevel widget
(i.e. a #GtkWindow that has not yet been shown), enter the main
loop and wait for the window to actually be mapped. Be careful;
because the main loop is running, anything can happen during
this function.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_append_page">
<description>
Appends a page to @notebook.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the appended
page in the notebook, or -1 if function fails
</return>
</function>

<function name="gtk_recent_filter_add_mime_type">
<description>
Adds a rule that allows resources based on their registered MIME type.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> a MIME type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_bin_window">
<description>
Return value: A #GdkWindow, or %NULL when @tree_view hasn&apos;t been realized yet

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GdkWindow, or %NULL when @tree_view hasn&apos;t been realized yet
</return>
</function>

<function name="gtk_toolbar_get_nth_item">
<description>
Return value: The @n&amp;lt;!-- --&amp;gt;&apos;th #GtkToolItem on @toolbar, or %NULL if there

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> A position on the toolbar
</parameter_description>
</parameter>
</parameters>
<return> The @n&amp;lt;!-- --&amp;gt;&apos;th #GtkToolItem on @toolbar, or %NULL if there
isn&apos;t an @n&amp;lt;!-- --&amp;gt;&apos;th item.

Since: 2.4
</return>
</function>

<function name="gtk_layout_set_vadjustment">
<description>
Sets the vertical scroll adjustment for the layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> new scroll adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_xembed_set_focus_wrapped">
<description>
Sets a flag indicating that the current focus sequence wrapped
around to the beginning of the ultimate toplevel.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_alignment_get_padding">
<description>
Gets the padding on the different sides of the widget.
See gtk_alignment_set_padding ().

Since: 2.4

</description>
<parameters>
<parameter name="alignment">
<parameter_description> a #GtkAlignment
</parameter_description>
</parameter>
<parameter name="padding_top">
<parameter_description> location to store the padding for the top of the widget, or %NULL
</parameter_description>
</parameter>
<parameter name="padding_bottom">
<parameter_description> location to store the padding for the bottom of the widget, or %NULL
</parameter_description>
</parameter>
<parameter name="padding_left">
<parameter_description> location to store the padding for the left of the widget, or %NULL
</parameter_description>
</parameter>
<parameter name="padding_right">
<parameter_description> location to store the padding for the right of the widget, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_set_alternative_button_order_from_array">
<description>
Sets an alternative button order. If the 
#GtkSettings:gtk-alternative-button-order setting is set to %TRUE, 
the dialog buttons are reordered according to the order of the 
response ids in @new_order.

See gtk_dialog_set_alternative_button_order() for more information.

This function is for use by language bindings.

Since: 2.6

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="n_params">
<parameter_description> the number of response ids in @new_order
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> an array of response ids of @dialog&apos;s buttons
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_calendar_set_display_options">
<description>
Sets display options (whether to display the heading and the month  
headings).

Since: 2.4

</description>
<parameters>
<parameter name="calendar">
<parameter_description> a #GtkCalendar
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the display options to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_add_custom">
<description>
Adds a rule to a filter that allows resources based on a custom callback
function. The bitfield @needed which is passed in provides information
about what sorts of information that the filter function needs;
this allows GTK+ to avoid retrieving expensive information when
it isn&apos;t needed by the filter.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="needed">
<parameter_description> bitfield of flags indicating the information that the custom
filter function needs.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> callback function; if the function returns %TRUE, then
the file will be displayed.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="data_destroy">
<parameter_description> function to call to free @data when it is no longer needed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_has_selection">
<description>
Indicates whether the buffer has some text currently selected.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the there is text selected

Since: 2.10
</return>
</function>

<function name="gtk_text_iter_forward_visible_lines">
<description>
Moves @count visible lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of lines to move forward
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable

Since: 2.8
</return>
</function>

<function name="gtk_tree_view_get_expander_column">
<description>
Return value: The expander column.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> The expander column.
</return>
</function>

<function name="gtk_text_view_get_default_attributes">
<description>
Obtains a copy of the default text attributes. These are the
attributes used for text unless a tag overrides them.
You&apos;d typically pass the default attributes in to
gtk_text_iter_get_attributes() in order to get the
attributes in effect at a given text position.

The return value is a copy owned by the caller of this function,
and should be freed.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTextAttributes
</return>
</function>

<function name="gtk_toolbar_append_space">
<description>
Adds a new space to the end of the toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_new">
<description>
Creates a new font picker widget.


</description>
<parameters>
</parameters>
<return> a new font picker widget.

Since: 2.4
</return>
</function>

<function name="gtk_container_focus_sort">
<description>
Sorts @children in the correct order for focusing with
direction type @direction.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="children">
<parameter_description>  a list of descendents of @container (they don&apos;t
have to be direct children)
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> focus direction
</parameter_description>
</parameter>
<parameter name="old_focus">
<parameter_description> widget to use for the starting position, or %NULL
to determine this automatically.
(Note, this argument isn&apos;t used for GTK_DIR_TAB_*,
which is the only @direction we use currently,
so perhaps this argument should be removed)
</parameter_description>
</parameter>
</parameters>
<return> a copy of @children, sorted in correct focusing order,
with children that aren&apos;t suitable for focusing in this direction
removed.
</return>
</function>

<function name="gtk_tree_view_convert_bin_window_to_tree_coords">
<description>
Converts bin_window coordinates to coordinates for the
tree (the full scrollable area of the tree).

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="bx">
<parameter_description> X coordinate relative to bin_window
</parameter_description>
</parameter>
<parameter name="by">
<parameter_description> Y coordinate relative to bin_window
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> return location for tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> return location for tree Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set_valist">
<description>
See gtk_tree_store_set(); this version takes a &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; for
use by language bindings.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; of column/value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_enumerate_printers">
<description>
Calls a function for all #GtkPrinter&amp;lt;!-- --&amp;gt;s. 
If @func returns %TRUE, the enumeration is stopped.

Since: 2.10

</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call for each printer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function to call if @data is no longer needed
</parameter_description>
</parameter>
<parameter name="wait">
<parameter_description> if %TRUE, wait in a recursive mainloop until
all printers are enumerated; otherwise return early
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_button_new_with_mnemonic">
<description>
Creates a new #GtkCheckButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the check button.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkCheckButton
</return>
</function>

<function name="gtk_about_dialog_get_authors">
<description>
Return value: A %NULL-terminated string array containing

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
</parameters>
<return> A %NULL-terminated string array containing
the authors. The array is owned by the about dialog 
and must not be modified.

Since: 2.6
</return>
</function>

<function name="gtk_combo_box_insert_text">
<description>
Inserts @string at @position in the list of strings stored in @combo_box.
Note that you can only use this function with combo boxes constructed
with gtk_combo_box_new_text().

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox constructed using gtk_combo_box_new_text()
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> An index to insert @text
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> A string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_quality">
<description>
Gets the value of %GTK_PRINT_SETTINGS_QUALITY.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the print quality

Since: 2.10
</return>
</function>

<function name="gtk_print_settings_set_number_up">
<description>
Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="number_up">
<parameter_description> the number of pages per sheet 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_ancestor">
<description>
Gets the first ancestor of @widget with type @widget_type. For example,
&amp;lt;literal&amp;gt;gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)&amp;lt;/literal&amp;gt; gets 
the first #GtkBox that&apos;s an ancestor of @widget. No reference will be 
added to the returned widget; it should not be unreferenced. See note 
about checking for a toplevel #GtkWindow in the docs for 
gtk_widget_get_toplevel().

Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor() 
considers @widget to be an ancestor of itself.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="widget_type">
<parameter_description> ancestor type
</parameter_description>
</parameter>
</parameters>
<return> the ancestor widget, or %NULL if not found
</return>
</function>

<function name="gtk_widget_child_notify">
<description>
Emits a #GtkWidget::child-notify signal for the 
&amp;lt;link linkend=&quot;child-properties&quot;&amp;gt;child property&amp;lt;/link&amp;gt; @child_property 
on @widget.

This is the analogue of g_object_notify() for child properties.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="child_property">
<parameter_description> the name of a child property installed on the 
class of @widget&amp;lt;!-- --&amp;gt;&apos;s parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_combo_box_set_active_iter">
<description>
Sets the current active item to be the one referenced by @iter. 
@iter must correspond to a path of depth one.

Since: 2.4

</description>
<parameters>
<parameter name="combo_box">
<parameter_description> A #GtkComboBox
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_free">
<description>
Frees a dynamically-allocated icon source, along with its
filename, size, and pixbuf fields if those are not %NULL.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_remove">
<description>
Remove a tag from the table. This will remove the table&apos;s
reference to the tag, so be careful - the tag will end
up destroyed if you don&apos;t have a reference to it.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_theme_set_custom_theme">
<description>
Sets the name of the icon theme that the #GtkIconTheme object uses
overriding system configuration. This function cannot be called
on the icon theme objects returned from gtk_icon_theme_get_default()
and gtk_icon_theme_get_for_screen().

Since: 2.4

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="theme_name">
<parameter_description> name of icon theme to use instead of configured theme,
or %NULL to unset a previously set custom theme
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkAlignment">
<description>
The padding to insert at the right of the widget.

Since: 2.4

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_set_use_full_page">
<description>
If @full_page is %TRUE, the transformation for the cairo context 
obtained from #GtkPrintContext puts the origin at the top left 
corner of the page (which may not be the top left corner of the 
sheet, depending on page orientation and the number of pages per 
sheet). Otherwise, the origin is at the top left corner of the
imageable area (i.e. inside the margins).

Since: 2.10 

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="full_page">
<parameter_description> %TRUE to set up the #GtkPrintContext for the full page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tool_item_get_use_drag_window">
<description>
Return value: %TRUE if @tool_item uses a drag window.

</description>
<parameters>
<parameter name="tool_item">
<parameter_description> a #GtkToolItem 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tool_item uses a drag window.

Since: 2.4
</return>
</function>

<function name="gtk_paper_size_get_default_right_margin">
<description>
Gets the default right margin for the #GtkPaperSize.


</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkPaperSize object
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the default right margin

Since: 2.10
</return>
</function>

<function name="gtk_accel_map_lock_path">
<description>
Locks the given accelerator path. If the accelerator map doesn&apos;t yet contain
an entry for @accel_path, a new one is created.

Locking an accelerator path prevents its accelerator from being changed 
during runtime. A locked accelerator path can be unlocked by 
gtk_accel_map_unlock_path(). Refer to gtk_accel_map_change_entry() 
for information about runtime accelerator changes.

If called more than once, @accel_path remains locked until
gtk_accel_map_unlock_path() has been called an equivalent number
of times.

Note that locking of individual accelerator paths is independent from 
locking the #GtkAccelGroup containing them. For runtime accelerator
changes to be possible both the accelerator path and its #GtkAccelGroup
have to be unlocked. 

Since: 2.4

</description>
<parameters>
<parameter name="accel_path">
<parameter_description> a valid accelerator path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_error_bell">
<description>
Notifies the user about an input-related error on this widget. 
If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
gdk_window_beep(), otherwise it does nothing.

Note that the effect of gdk_window_beep() can be configured in many
ways, depending on the windowing backend and the desktop environment
or window manager that is used.

Since: 2.12

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_get_hscrollbar">
<description>
Returns: the horizontal scrollbar of the scrolled window, or 

</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return> the horizontal scrollbar of the scrolled window, or 
%NULL if it does not have one.

Since: 2.8
</return>
</function>

<function name="gtk_range_get_adjustment">
<description>
Get the #GtkAdjustment which is the &quot;model&quot; object for #GtkRange.
See gtk_range_set_adjustment() for details.
The return value does not have a reference added, so should not
be unreferenced.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> a #GtkAdjustment
</return>
</function>

<function name="gtk_window_set_skip_taskbar_hint">
<description>
Windows may set a hint asking the desktop environment not to display
the window in the task bar. This function sets this hint.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to keep this window from appearing in the task bar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_double_buffered">
<description>
Widgets are double buffered by default; you can use this function
to turn off the buffering. &quot;Double buffered&quot; simply means that
gdk_window_begin_paint_region() and gdk_window_end_paint() are called
automatically around expose events sent to the
widget. gdk_window_begin_paint() diverts all drawing to a widget&apos;s
window to an offscreen buffer, and gdk_window_end_paint() draws the
buffer to the screen. The result is that users see the window
update in one smooth step, and don&apos;t see individual graphics
primitives being rendered.

In very simple terms, double buffered widgets don&apos;t flicker,
so you would only use this function to turn off double buffering
if you had special needs and really knew what you were doing.

Note: if you turn off double-buffering, you have to handle
expose events, since even the clearing to the background color or 
pixmap will not happen automatically (as it is done in 
gdk_window_begin_paint()).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="double_buffered">
<parameter_description> %TRUE to double-buffer a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_text_column">
<description>
Returns: the text column, or -1 if it&apos;s unset.

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return> the text column, or -1 if it&apos;s unset.

Since: 2.6
</return>
</function>

<function name="gtk_file_system_get_bookmark_label">
<description>
Gets the label to display for a bookmark, or %NULL.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path of the bookmark 
</parameter_description>
</parameter>
</parameters>
<return> the label for the bookmark @path

Since: 2.8
</return>
</function>

<function name="gtk_tool_button_set_icon_widget">
<description>
Sets @icon as the widget used as icon on @button. If @icon_widget is
%NULL the icon is determined by the &quot;stock_id&quot; property. If the
&quot;stock_id&quot; property is also %NULL, @button will not have an icon.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
<parameter name="icon_widget">
<parameter_description> the widget used as icon, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_direction">
<description>
Sets the reading direction on a particular widget. This direction
controls the primary direction for widgets containing text,
and also the direction in which the children of a container are
packed. The ability to set the direction is present in order
so that correct localization into languages with right-to-left
reading directions can be done. Generally, applications will
let the default reading direction present, except for containers
where the containers are arranged in an order that is explicitely
visual rather than logical (such as buttons for text justification).

If the direction is set to %GTK_TEXT_DIR_NONE, then the value
set by gtk_widget_set_default_direction() will be used.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="dir">
<parameter_description>    the new direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_modified">
<description>
Gets the timestamp (seconds from system&apos;s Epoch) when the resource
was last modified.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the number of seconds elapsed from system&apos;s Epoch when
the resource was last modified, or -1 on failure.

Since: 2.10
</return>
</function>

<function name="gtk_toggle_action_get_draw_as_radio">
<description>
Returns: whether the action should have proxies like a radio action.

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> whether the action should have proxies like a radio action.

Since: 2.4
</return>
</function>

<function name="gtk_text_iter_get_buffer">
<description>
Return value: the buffer

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> the buffer
</return>
</function>

<function name="GtkTreeView">
<description>
The position of the cursor (focused cell) has changed.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_redraw_on_allocate">
<description>
Sets whether the entire widget is queued for drawing when its size 
allocation changes. By default, this setting is %TRUE and
the entire widget is redrawn on every size change. If your widget
leaves the upper left unchanged when made bigger, turning this
setting off will improve performance.

Note that for %NO_WINDOW widgets setting this flag to %FALSE turns
off all allocation on resizing: the widget will not even redraw if
its position changes; this is to allow containers that don&apos;t draw
anything to avoid excess invalidations. If you set this flag on a
%NO_WINDOW widget that &amp;lt;emphasis&amp;gt;does&amp;lt;/emphasis&amp;gt; draw on @widget-&amp;gt;window, 
you are responsible for invalidating both the old and new allocation 
of the widget when the widget is moved and responsible for invalidating
regions newly when the widget increases size.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="redraw_on_allocate">
<parameter_description> if %TRUE, the entire widget will be redrawn
when it is allocated to a new size. Otherwise, only the
new portion of the widget will be redrawn.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_is_composited">
<description>
Whether @widget can rely on having its alpha channel
drawn correctly. On X11 this function returns whether a
compositing manager is running for @widget&apos;s screen.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget can rely on its alpha
channel being drawn correctly.

Since: 2.10
</return>
</function>

<function name="gtk_printer_get_icon_name">
<description>
Gets the name of the icon to use for the printer.


</description>
<parameters>
<parameter name="printer">
<parameter_description> a #GtkPrinter
</parameter_description>
</parameter>
</parameters>
<return> the icon name for @printer

Since: 2.10
</return>
</function>

<function name="gtk_rc_property_parse_border">
<description>
A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses
borders in the form 
&amp;lt;literal&amp;gt;&quot;{ left, right, top, bottom }&quot;&amp;lt;/literal&amp;gt; for integers 
%left, %right, %top and %bottom.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
<parameter name="gstring">
<parameter_description> the #GString to be parsed
</parameter_description>
</parameter>
<parameter name="property_value">
<parameter_description> a #GValue which must hold boxed values.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GtkBorder.
</return>
</function>

<function name="gtk_text_iter_get_slice">
<description>
Return value: slice of text from the buffer

</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of a range
</parameter_description>
</parameter>
</parameters>
<return> slice of text from the buffer
</return>
</function>

<function name="gtk_text_view_get_tabs">
<description>
Gets the default tabs for @text_view. Tags in the buffer may
override the defaults. The returned array will be %NULL if
&quot;standard&quot; (8-space) tabs are used. Free the return value
with pango_tab_array_free().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> copy of default tab array, or %NULL if &quot;standard&quot; 
tabs are used; must be freed with pango_tab_array_free().
</return>
</function>

<function name="gtk_widget_set_name">
<description>
Widgets can be named, which allows you to refer to them from a
gtkrc file. You can apply a style to widgets with a particular name
in the gtkrc file. See the documentation for gtkrc files (on the
same page as the docs for #GtkRcStyle).

Note that widget names are separated by periods in paths (see 
gtk_widget_path()), so names with embedded periods may cause confusion.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name for the widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_orientation">
<description>
Get the value of %GTK_PRINT_SETTINGS_ORIENTATION, 
converted to a #GtkPageOrientation.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> the orientation

Since: 2.10
</return>
</function>

<function name="gtk_draw_resize_grip">
<description>
Draws a resize grip in the given rectangle on @window using the given
parameters. 

Deprecated: Use gtk_paint_resize_grip() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_set_default_page_setup">
<description>
Makes @default_page_setup the default page setup for @op.

This page setup will be used by gtk_print_operation_run(),
but it can be overridden on a per-page basis by connecting
to the #GtkPrintOperation::request-page-setup signal.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="default_page_setup">
<parameter_description> a #GtkPageSetup, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_get_shadow_type">
<description>
Gets the shadow type of the #GtkViewport. See
gtk_viewport_set_shadow_type().
 

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport
</parameter_description>
</parameter>
</parameters>
<return> the shadow type 
</return>
</function>

<function name="gtk_text_iter_get_chars_in_line">
<description>
Return value: number of characters in the line

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> number of characters in the line
</return>
</function>

<function name="gtk_notebook_get_n_pages">
<description>
Gets the number of pages in a notebook.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the number of pages in the notebook.

Since: 2.2
</return>
</function>

<function name="gtk_tree_model_iter_next">
<description>
Sets @iter to point to the node following it at the current level.  If there
is no next @iter, %FALSE is returned and @iter is set to be invalid.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter has been changed to the next node.
</return>
</function>

<function name="gtk_print_settings_set_duplex">
<description>
Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="duplex">
<parameter_description> a #GtkPrintDuplex value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_create_items">
<description>
Creates the menu items from the @entries.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkItemFactoryEntry&amp;lt;!-- --&amp;gt;s whose @callback members
must by of type #GtkItemFactoryCallback1
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> data passed to the callback functions of all entries
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_remove_filter">
<description>
Removes @filter from the list of filters that the user can select between.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> a #GtkFileFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_get_accel_closure">
<description>
Returns: the accel closure for this action. The returned closure is

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> the accel closure for this action. The returned closure is
owned by GTK+ and must not be unreffed or modified.
</return>
</function>

<function name="gtk_window_iconify">
<description>
Asks to iconify (i.e. minimize) the specified @window. Note that
you shouldn&apos;t assume the window is definitely iconified afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could deiconify it
again, or there may not be a window manager in which case
iconification isn&apos;t possible, etc. But normally the window will end
up iconified. Just don&apos;t write code that crashes if not.

It&apos;s permitted to call this function before showing a window,
in which case the window will be iconified before it ever appears
onscreen.

You can track iconification via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_box_gap">
<description>
Draws a box in @window using the given style and state and shadow type, 
leaving a gap in one side.

Deprecated: Use gtk_paint_box_gap() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="gap_side">
<parameter_description> side in which to leave the gap
</parameter_description>
</parameter>
<parameter name="gap_x">
<parameter_description> starting position of the gap
</parameter_description>
</parameter>
<parameter name="gap_width">
<parameter_description> width of the gap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_orientation">
<description>
Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> a page orientation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_focus">
<description>
Draws a focus indicator around the given rectangle on @window using the
given style.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_border_free">
<description>
Frees a #GtkBorder structure.

</description>
<parameters>
<parameter name="border_">
<parameter_description> a #GtkBorder.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_adjustment">
<description>
Sets the adjustment to be used as the &quot;model&quot; object for this range
widget. The adjustment indicates the current range value, the
minimum and maximum range values, the step/page increments used
for keybindings and scrolling, and the page size. The page size
is normally 0 for #GtkScale and nonzero for #GtkScrollbar, and
indicates the size of the visible area of the widget being scrolled.
The page size affects the size of the scrollbar slider.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_at_cursor">
<description>
Simply calls gtk_text_buffer_insert(), using the current
cursor position as the insertion point.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> some text in UTF-8 format
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text, in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_target_list_add_table">
<description>
Prepends a table of #GtkTargetEntry to a target list.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GtkTargetList
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the table of #GtkTargetEntry
</parameter_description>
</parameter>
<parameter name="ntargets">
<parameter_description> number of targets in the table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_selection_set_font_name">
<description>
Sets the currently-selected font.  Note that the @fontsel needs to know the
screen in which it will appear for this to work; this can be guaranteed by
simply making sure that the @fontsel is inserted in a toplevel window before
you call this function.


</description>
<parameters>
<parameter name="fontsel">
<parameter_description> a #GtkFontSelection
</parameter_description>
</parameter>
<parameter name="fontname">
<parameter_description> a font name like &quot;Helvetica 12&quot; or &quot;Times Bold 18&quot;
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the font could be set successfully; #FALSE if no such
font exists or if the @fontsel doesn&apos;t belong to a particular screen yet.
</return>
</function>

<function name="gtk_container_get_focus_vadjustment">
<description>
Retrieves the vertical focus adjustment for the container. See
gtk_container_set_focus_vadjustment().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the vertical focus adjustment, or %NULL if
none has been set.
</return>
</function>

<function name="gtk_font_selection_get_font_name">
<description>
Gets the currently-selected font name.  Note that this can be a different
string than what you set with gtk_font_selection_set_font_name(), as
the font selection widget may normalize font names and thus return a string
with a different structure.  For example, &quot;Helvetica Italic Bold 12&quot; could be
normalized to &quot;Helvetica Bold Italic 12&quot;.  Use pango_font_description_equal()
if you want to compare two font descriptions.


</description>
<parameters>
<parameter name="fontsel">
<parameter_description> a #GtkFontSelection
</parameter_description>
</parameter>
</parameters>
<return> A string with the name of the current font, or #NULL if no font
is selected.  You must free this string with g_free().
</return>
</function>

<function name="gtk_tree_sortable_set_sort_column_id">
<description>
Sets the current sort column to be @sort_column_id.  The @sortable will
resort itself to reflect this change, after emitting a
GtkTreeSortable::sort_column_changed signal.  If @sort_column_id is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the default sort function
will be used, if it is set.

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> the sort column id to set
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> The sort order of the column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_set_page_type">
<description>
Sets the page type for @page. The page type determines the page
behavior in the @assistant.

Since: 2.10

</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new type for @page
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_child_focus">
<description>
This function is used by custom widget implementations; if you&apos;re
writing an app, you&apos;d use gtk_widget_grab_focus() to move the focus
to a particular widget, and gtk_container_set_focus_chain() to
change the focus tab order. So you may want to investigate those
functions instead.

gtk_widget_child_focus() is called by containers as the user moves
around the window using keyboard shortcuts. @direction indicates
what kind of motion is taking place (up, down, left, right, tab
forward, tab backward). gtk_widget_child_focus() emits the
#GtkWidget::focus&quot; signal; widgets override the default handler
for this signal in order to implement appropriate focus behavior.

The default ::focus handler for a widget should return %TRUE if
moving in @direction left the focus on a focusable location inside
that widget, and %FALSE if moving in @direction moved the focus
outside the widget. If returning %TRUE, widgets normally
call gtk_widget_grab_focus() to place the focus accordingly;
if returning %FALSE, they don&apos;t modify the current focus location.

This function replaces gtk_container_focus() from GTK+ 1.2.  
It was necessary to check that the child was visible, sensitive, 
and focusable before calling gtk_container_focus(). 
gtk_widget_child_focus() returns %FALSE if the widget is not 
currently in a focusable state, so there&apos;s no need for those checks.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> direction of focus movement
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if focus ended up inside @widget
</return>
</function>

<function name="_gtk_size_group_compute_requisition">
<description>
Compute the requisition of a widget taking into account grouping of
the widget&apos;s requisition with other widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> location to store computed requisition.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_preview_filename">
<description>
Gets the filename that should be previewed in a custom preview
widget. See gtk_file_chooser_set_preview_widget().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> the filename to preview, or %NULL if no file
is selected, or if the selected file cannot be represented
as a local filename. Free with g_free()

Since: 2.4
</return>
</function>

<function name="gtk_cell_view_get_size_of_row">
<description>
Sets @requisition to the size needed by @cell_view to display 
the model row pointed to by @path.


</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath 
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> return location for the size 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE

Since: 2.6
</return>
</function>

<function name="gtk_icon_factory_lookup">
<description>
Looks up @stock_id in the icon factory, returning an icon set
if found, otherwise %NULL. For display to the user, you should
use gtk_style_lookup_icon_set() on the #GtkStyle for the
widget that will display the icon, instead of using this
function directly, so that themes are taken into account.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return> icon set of @stock_id.
</return>
</function>

<function name="gtk_toggle_tool_button_new_from_stock">
<description>
Creates a new #GtkToggleToolButton containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.

It is an error if @stock_id is not a name of a stock item.


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of the stock item 
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkToggleToolButton

Since: 2.4
</return>
</function>

<function name="gtk_ui_manager_get_accel_group">
<description>
Return value: the #GtkAccelGroup.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GtkUIManager object
</parameter_description>
</parameter>
</parameters>
<return> the #GtkAccelGroup.

Since: 2.4
</return>
</function>

<function name="gtk_init_check">
<description>
This function does the same work as gtk_init() with only 
a single change: It does not terminate the program if the GUI can&apos;t be 
initialized. Instead it returns %FALSE on failure.

This way the application can fall back to some other means of communication 
with the user - for example a curses or command line interface.


</description>
<parameters>
<parameter name="argc">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argc&amp;lt;/parameter&amp;gt; parameter of your 
main() function. Changed if any arguments were handled.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argv&amp;lt;/parameter&amp;gt; parameter of main(). 
Any parameters understood by gtk_init() are stripped before return.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the GUI has been successfully initialized, 
%FALSE otherwise.
</return>
</function>

<function name="gtk_widget_get_default_style">
<description>
Returns: the default style. This #GtkStyle object is owned 

</description>
<parameters>
</parameters>
<return> the default style. This #GtkStyle object is owned 
by GTK+ and should not be modified or freed.
</return>
</function>

<function name="gtk_entry_completion_get_entry">
<description>
Gets the entry @completion has been attached to.


</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
</parameters>
<return> The entry @completion has been attached to.

Since: 2.4
</return>
</function>

<function name="gtk_widget_list_accel_closures">
<description>
Lists the closures used by @widget for accelerator group connections
with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
The closures can be used to monitor accelerator changes on @widget,
by connecting to the @GtkAccelGroup::accel-changed signal of the 
#GtkAccelGroup of a closure which can be found out with 
gtk_accel_group_from_accel_closure().

</description>
<parameters>
<parameter name="widget">
<parameter_description>  widget to list accelerator closures for
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GList of closures
</return>
</function>

<function name="gtk_file_chooser_dialog_new_with_backend">
<description>
Creates a new #GtkFileChooserDialog with a specified backend. This is
especially useful if you use gtk_file_chooser_set_local_only() to allow
non-local files and you use a more expressive vfs, such as gnome-vfs,
to load files.


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> Open or save mode for the dialog
</parameter_description>
</parameter>
<parameter name="backend">
<parameter_description> The name of the specific filesystem backend to use.
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> stock ID or text to go in the first button, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for the first button, then additional (button, id) pairs, ending with %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkFileChooserDialog

Since: 2.4
</return>
</function>

<function name="gtk_tooltip_set_icon">
<description>
Sets the icon of the tooltip (which is in front of the text) to be
@pixbuf.  If @pixbuf is %NULL, the image will be hidden.

Since: 2.12

</description>
<parameters>
<parameter name="tooltip">
<parameter_description> a #GtkTooltip
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_type_hint">
<description>
By setting the type hint for the window, you allow the window
manager to decorate and handle the window in a way which is
suitable to the function of the window in your application.

This function should be called before the window becomes visible.

gtk_dialog_new_with_buttons() and other convenience functions in GTK+
will sometimes call gtk_window_set_type_hint() on your behalf.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> the window type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_set_current_uri">
<description>
Sets @uri as the current URI for @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the URI was found.

Since: 2.10
</return>
</function>

<function name="gtk_icon_theme_list_contexts">
<description>
Gets the list of contexts available within the current
hierarchy of icon themes


</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
</parameters>
<return> a #GList list holding the names of all the
contexts in the theme. You must first free each element
in the list with g_free(), then free the list itself
with g_list_free().

Since: 2.12
</return>
</function>

<function name="gtk_paint_flat_box">
<description>
Draws a flat box on @window with the given parameters.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget (may be %NULL)
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail (may be %NULL)
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_insert_page">
<description>
Inserts a page in the @assistant at a given position.


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page to the @assistant
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the inserted page

Since: 2.10
</return>
</function>

<function name="gtk_widget_get_tooltip_text">
<description>
Gets the contents of the tooltip for @widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the tooltip text, or %NULL. You should free the
returned string with g_free() when done.

Since: 2.12
</return>
</function>

<function name="_gtk_file_system_model_remove_editable">
<description>
Removes the &quot;empty&quot; row at the beginning of the model that was
created with _gtk_file_system_model_add_editable().  You should call
this function when your code is finished editing this temporary row.

</description>
<parameters>
<parameter name="model">
<parameter_description> a #GtkFileSystemModel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_plug_construct_for_display">
<description>
Finish the initialization of @plug for a given #GtkSocket identified by
@socket_id which is currently displayed on @display.
This function will generally only be used by classes deriving from #GtkPlug.

Since: 2.2

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug.
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> the #GdkDisplay associated with @socket_id&apos;s 
#GtkSocket.
</parameter_description>
</parameter>
<parameter name="socket_id">
<parameter_description> the XID of the socket&apos;s window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_apply_tag">
<description>
Emits the &quot;apply_tag&quot; signal on @buffer. The default
handler for the signal applies @tag to the given range.
@start and @end do not have to be in order.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be tagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be tagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_get_bool">
<description>
Return value: %TRUE, if @key maps to a true value.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @key maps to a true value.

Since: 2.10
</return>
</function>

<function name="gtk_check_menu_item_get_active">
<description>
Return value: %TRUE if the menu item is checked.

</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu item is checked.
</return>
</function>

<function name="gtk_file_chooser_set_show_hidden">
<description>
Sets whether hidden files and folders are displayed in the file selector.  

Since: 2.6

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="show_hidden">
<parameter_description> %TRUE if hidden files and folders should be displayed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_default_direction">
<description>
Obtains the current default reading direction. See
gtk_widget_set_default_direction().


</description>
<parameters>
</parameters>
<return> the current default direction. 
</return>
</function>

<function name="gtk_window_add_accel_group">
<description>
Associate @accel_group with @window, such that calling
gtk_accel_groups_activate() on @window will activate accelerators
in @accel_group.

</description>
<parameters>
<parameter name="window">
<parameter_description> window to attach accelerator group to
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_filter_add_pixbuf_formats">
<description>
Adds a rule allowing image files in the formats supported
by GdkPixbuf.

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_pixels_below_lines">
<description>
Gets the value set by gtk_text_view_set_pixels_below_lines().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default number of blank pixels below paragraphs
</return>
</function>

<function name="_gtk_widget_peek_colormap">
<description>
Return value: the currently pushed colormap, or %NULL if there is none.

</description>
<parameters>
</parameters>
<return> the currently pushed colormap, or %NULL if there is none.
</return>
</function>

<function name="gtk_message_dialog_format_secondary_markup">
<description>
Sets the secondary text of the message dialog to be @message_format (with 
printf()-style), which is marked up with the 
&amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;.

Note that setting a secondary text makes the primary text become
bold, unless you have provided explicit markup.

Due to an oversight, this function does not escape special XML characters
like gtk_message_dialog_new_with_markup() does. Thus, if the arguments 
may contain special XML characters, you should use g_markup_printf_escaped()
to escape it.

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gchar *msg;

msg = g_markup_printf_escaped (message_format, ...);
gtk_message_dialog_format_secondary_markup (message_dialog, &quot;&amp;percnt;s&quot;, msg);
g_free (msg);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Since: 2.6

</description>
<parameters>
<parameter name="message_dialog">
<parameter_description> a #GtkMessageDialog
</parameter_description>
</parameter>
<parameter name="message_format">
<parameter_description> printf()-style markup string (see 
     &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;), or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments for @message_format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_ref">
<description>
Deprecated equivalent of g_object_ref().

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
</parameters>
<return> @style.
</return>
</function>

<function name="gtk_print_settings_set_output_bin">
<description>
Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="output_bin">
<parameter_description> the output bin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_get_icon_name">
<description>
Gets the name of the icon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()).
The returned string is owned by the #GtkStatusIcon and should not
be freed or modified.


</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> name of the displayed icon, or %NULL if the image is empty.

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_new">
<description>
Creates an empty status icon object.


</description>
<parameters>
</parameters>
<return> a new #GtkStatusIcon

Since: 2.10
</return>
</function>

<function name="gtk_widget_pop_composite_child">
<description>
Cancels the effect of a previous call to gtk_widget_push_composite_child().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_entry_completion_set_popup_completion">
<description>
Sets whether the completions should be presented in a popup window.

Since: 2.6

</description>
<parameters>
<parameter name="completion">
<parameter_description> a #GtkEntryCompletion
</parameter_description>
</parameter>
<parameter name="popup_completion">
<parameter_description> %TRUE to do popup completion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_is_rubber_banding_active">
<description>
Return value: %TRUE if a rubber banding operation is currently being

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a rubber banding operation is currently being
done in @tree_view.

Since: 2.12
</return>
</function>

<function name="gtk_tree_view_tree_to_widget_coords">
<description>
Converts tree coordinates (coordinates in full scrollable area of the tree)
to bin_window coordinates.

Deprecated: 2.12: Due to historial reasons the name of this function is
incorrect.  For converting bin_window coordinates to coordinates relative
to bin_window, please see
gtk_tree_view_convert_bin_window_to_widget_coords().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> tree Y coordinate
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> return location for X coordinate relative to bin_window
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> return location for Y coordinate relative to bin_window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_min_width">
<description>
Sets the minimum width of the @tree_column.  If @min_width is -1, then the
minimum width is unset.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> The minimum width of the column in pixels, or -1.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_set_child_packing">
<description>
Sets the way @child is packed into @box.

</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget of the child to set
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> the new value of the #GtkBox:expand child property 
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> the new value of the #GtkBox:fill child property
</parameter_description>
</parameter>
<parameter name="padding">
<parameter_description> the new value of the #GtkBox:padding child property
</parameter_description>
</parameter>
<parameter name="pack_type">
<parameter_description> the new value of the #GtkBox:pack-type child property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_editable_editing_done">
<description>
Emits the #GtkCellEditable::editing-done signal. 

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> A #GtkTreeEditable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_pixbuf">
<description>
See gtk_image_new_from_pixbuf() for details. 

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_set_target_list">
<description>
Sets the target types that this widget can accept from drag-and-drop.
The widget must first be made into a drag destination with
gtk_drag_dest_set().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
<parameter name="target_list">
<parameter_description> list of droppable targets, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_add_target">
<description>
Appends a specified target to the list of supported targets for a 
given widget and selection.

</description>
<parameters>
<parameter name="widget">
<parameter_description>  a #GtkTarget
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> the selection
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> target to add.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> A unsigned integer which will be passed back to the application.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_fg">
<description>
Sets the foreground color for a widget in a particular state.  
All other style values are left untouched. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the foreground color
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_fg().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_insert_column">
<description>
This inserts the @column into the @tree_view at @position.  If @position is
-1, then the column is inserted at the end. If @tree_view has
&quot;fixed_height&quot; mode enabled, then @column must have its &quot;sizing&quot; property
set to be GTK_TREE_VIEW_COLUMN_FIXED.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to be inserted.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position to insert @column in.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after insertion.
</return>
</function>

<function name="gtk_image_menu_item_set_image">
<description>
Sets the image of @image_menu_item to the given widget.
Note that it depends on the show-menu-images setting whether
the image will be displayed or not.

</description>
<parameters>
<parameter name="image_menu_item">
<parameter_description> a #GtkImageMenuItem.
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> a widget to set as the image for the menu item.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new_from_image">
<description>
Creates a #GtkImage widget displaying a @image with a @mask.
A #GdkImage is a client-side image buffer in the pixel format of the
current display. The #GtkImage does not assume a reference to the
image or mask; you still need to unref them if you own references.
#GtkImage will add its own reference rather than adopting yours.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage, or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_accel_map_load">
<description>
Parses a file previously saved with gtk_accel_map_save() for
accelerator specifications, and propagates them accordingly.

</description>
<parameters>
<parameter name="file_name">
<parameter_description> a file containing accelerator specifications,
in the GLib file name encoding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_set_use_preview_label">
<description>
Sets whether the file chooser should display a stock label with the name of
the file that is being previewed; the default is %TRUE.  Applications that
want to draw the whole preview area themselves should set this to %FALSE and
display the name themselves in their preview widget.

See also: gtk_file_chooser_set_preview_widget()

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="use_label">
<parameter_description> whether to display a stock label with the name of the previewed file
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_new_proxy">
<description>
You do not need to use this function.  Creates a row reference based on
@path.  This reference will keep pointing to the node pointed to by @path, 
so long as it exists.  If @path isn&apos;t a valid path in @model, then %NULL is
returned.  However, unlike references created with
gtk_tree_row_reference_new(), it does not listen to the model for changes.
The creator of the row reference must do this explicitly using
gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),
gtk_tree_row_reference_reordered().

These functions must be called exactly once per proxy when the
corresponding signal on the model is emitted. This single call
updates all row references for that proxy. Since built-in GTK+
objects like #GtkTreeView already use this mechanism internally,
using them as the proxy object will produce unpredictable results.
Further more, passing the same object as @model and @proxy
doesn&apos;t work for reasons of internal implementation.

This type of row reference is primarily meant by structures that need to
carefully monitor exactly when a row reference updates itself, and is not
generally needed by most applications.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> A proxy #GObject
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A valid #GtkTreePath to monitor
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreeRowReference, or %NULL
</return>
</function>

<function name="gtk_layout_thaw">
<description>
This is a deprecated function, it doesn&apos;t do anything useful.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new_from_icon_name">
<description>
Creates a #GtkImage displaying an icon from the current icon theme.
If the icon name isn&apos;t known, a &quot;broken image&quot; icon will be
displayed instead.  If the current icon theme is changed, the icon
will be updated appropriately.


</description>
<parameters>
<parameter name="icon_name">
<parameter_description> an icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage displaying the themed icon

Since: 2.6
</return>
</function>

<function name="gtk_tree_view_column_get_widget">
<description>
Return value: The #GtkWidget in the column header, or %NULL

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The #GtkWidget in the column header, or %NULL
</return>
</function>

<function name="gtk_recent_filter_add_group">
<description>
Adds a rule that allows resources based on the name of the group
to which they belong

Since: 2.10

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GtkRecentFilter
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> a group name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_composite_name">
<description>
Sets a widgets composite name. The widget must be
a composite child of its parent; see gtk_widget_push_composite_child().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_cut_clipboard">
<description>
Copies the currently-selected text to a clipboard, then deletes
said text if it&apos;s editable.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard object to cut to
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of the buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_unix_dialog_get_print_settings">
<description>
Gets the current print settings from the dialog.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkPageSetupUnixDialog
</parameter_description>
</parameter>
</parameters>
<return> the current print settings

Since: 2.10
</return>
</function>

<function name="gtk_file_system_list_bookmarks">
<description>
Queries the list of bookmarks in the file system.


</description>
<parameters>
<parameter name="file_system">
<parameter_description> a #GtkFileSystem
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkFilePath, or NULL if there are no configured
bookmarks.  You should use gtk_file_paths_free() to free this list.

See also: gtk_file_system_get_supports_bookmarks()
</return>
</function>

<function name="gtk_file_paths_copy">
<description>
Copies a list of #GtkFilePath structures.


</description>
<parameters>
<parameter name="paths">
<parameter_description> A #GSList of #GtkFilePath structures.
</parameter_description>
</parameter>
</parameters>
<return> A copy of @paths.  Since the contents of the list are copied as
well, you should use gtk_file_paths_free() to free the result.
</return>
</function>

<function name="gtk_cell_view_get_cell_renderers">
<description>
Return value: a list of cell renderers. The list, but not the

</description>
<parameters>
<parameter name="cell_view">
<parameter_description> a #GtkCellView
</parameter_description>
</parameter>
</parameters>
<return> a list of cell renderers. The list, but not the
renderers has been newly allocated and should be freed with
g_list_free() when no longer needed.

Since: 2.6
</return>
</function>

<function name="gtk_icon_info_get_embedded_rect">
<description>
Gets the coordinates of a rectangle within the icon
that can be used for display of information such
as a preview of the contents of a text file.
See gtk_icon_info_set_raw_coordinates() for further
information about the coordinate system.


</description>
<parameters>
<parameter name="icon_info">
<parameter_description> a #GtkIconInfo
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> #GdkRectangle in which to store embedded
rectangle coordinates; coordinates are only stored
when this function returns %TRUE.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the icon has an embedded rectangle

Since: 2.4
</return>
</function>

<function name="gtk_style_new">
<description>
Creates a new #GtkStyle.

</description>
<parameters>
</parameters>
<return> a new #GtkStyle.
</return>
</function>

<function name="gtk_plug_get_id">
<description>
Gets the window ID of a #GtkPlug widget, which can then
be used to embed this window inside another window, for
instance with gtk_socket_add_id().


</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug.
</parameter_description>
</parameter>
</parameters>
<return> the window ID for the plug
</return>
</function>

<function name="gtk_about_dialog_set_license">
<description>
Sets the license information to be displayed in the secondary
license dialog. If @license is %NULL, the license button is
hidden.

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="license">
<parameter_description> the license information or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_reorderable">
<description>
Retrieves whether the user can reorder the tree via drag-and-drop. See
gtk_tree_view_set_reorderable().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the tree can be reordered.
</return>
</function>

<function name="gtk_recent_chooser_get_local_only">
<description>
Gets whether only local resources should be shown in the recently used
resources selector.  See gtk_recent_chooser_set_local_only()


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if only local resources should be shown.

Since: 2.10
</return>
</function>

<function name="gtk_item_factory_delete_item">
<description>
Deletes the menu item which was created for @path by the given
item factory.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_title">
<description>
Sets the title of the @tree_column.  If a custom widget has been set, then
this value is ignored.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> The title of the @tree_column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_cell_set_cell_data">
<description>
Sets the cell renderer based on the @tree_model and @iter.  That is, for
every attribute mapping in @tree_column, it will get a value from the set
column on the @iter, and use that value to set the attribute on the cell
renderer.  This is used primarily by the #GtkTreeView.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="tree_model">
<parameter_description> The #GtkTreeModel to to get the cell renderers attributes from.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to to get the cell renderer&apos;s attributes from.
</parameter_description>
</parameter>
<parameter name="is_expander">
<parameter_description> %TRUE, if the row has children
</parameter_description>
</parameter>
<parameter name="is_expanded">
<parameter_description> %TRUE, if the row has visible children
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_alignment">
<description>
Gets the value set by gtk_entry_set_alignment().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the alignment

Since: 2.4
</return>
</function>

<function name="gtk_tree_view_column_get_clickable">
<description>
Return value: %TRUE if user can click the column header.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if user can click the column header.
</return>
</function>

<function name="gtk_tool_button_set_label">
<description>
Sets @label as the label used for the tool button. The &quot;label&quot; property
only has an effect if not overridden by a non-%NULL &quot;label_widget&quot; property.
If both the &quot;label_widget&quot; and &quot;label&quot; properties are %NULL, the label
is determined by the &quot;stock_id&quot; property. If the &quot;stock_id&quot; property is also
%NULL, @button will not have a label.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a string that will be used as label, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_get_preview_widget_active">
<description>
Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()
should be shown for the current filename. See
gtk_file_chooser_set_preview_widget_active().


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the preview widget is active for the current filename.

Since: 2.4
</return>
</function>

<function name="_gtk_key_hash_lookup_keyval">
<description>
Looks up the best matching entry or entries in the hash table for a
given keyval/modifiers pair. It&apos;s better to use
_gtk_key_hash_lookup() if you have the original #GdkEventKey
available.  The results are sorted so that entries with less
modifiers come before entries with more modifiers.


</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GtkEvent
</parameter_description>
</parameter>
</parameters>
<return> A #GSList of all matching entries.
</return>
</function>

<function name="gtk_icon_theme_append_search_path">
<description>
Appends a directory to the search path. 
See gtk_icon_theme_set_search_path(). 

Since: 2.4

</description>
<parameters>
<parameter name="icon_theme">
<parameter_description> a #GtkIconTheme
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> directory name to append to the icon path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_tooltip_markup">
<description>
Gets the contents of the tooltip for @widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the tooltip text, or %NULL. You should free the
returned string with g_free() when done.

Since: 2.12
</return>
</function>

<function name="gtk_tree_view_set_headers_visible">
<description>
Sets the visibility state of the headers.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="headers_visible">
<parameter_description> %TRUE if the headers are visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_visible_range">
<description>
Sets @start_path and @end_path to be the first and last visible path.
Note that there may be invisible paths in between.

The paths should be freed with gtk_tree_path_free() after use.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="start_path">
<parameter_description> Return location for start of region, or %NULL.
</parameter_description>
</parameter>
<parameter name="end_path">
<parameter_description> Return location for end of region, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if valid paths were placed in @start_path and @end_path.

Since: 2.8
</return>
</function>

<function name="gtk_accel_map_lookup_entry">
<description>
Looks up the accelerator entry for @accel_path and fills in @key.

</description>
<parameters>
<parameter name="accel_path">
<parameter_description>  a valid accelerator path
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description>         the accelerator key to be filled in (optional)
</parameter_description>
</parameter>
</parameters>
<return>     %TRUE if @accel_path is known, %FALSE otherwise
</return>
</function>

<function name="gtk_tree_view_convert_tree_to_bin_window_coords">
<description>
Converts tree coordinates (coordinates in full scrollable area of the tree)
to bin_window coordinates.

Since: 2.12

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> tree Y coordinate
</parameter_description>
</parameter>
<parameter name="bx">
<parameter_description> return location for X coordinate relative to bin_window
</parameter_description>
</parameter>
<parameter name="by">
<parameter_description> return location for Y coordinate relative to bin_window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_progress_new">
<description>
Creates a new #GtkCellRendererProgress. 


</description>
<parameters>
</parameters>
<return> the new cell renderer

Since: 2.6
</return>
</function>

<function name="gtk_cell_layout_add_attribute">
<description>
Adds an attribute mapping to the list in @cell_layout. The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell to be set from the value. So for example if column 2
of the model contains strings, you could have the &quot;text&quot; attribute of a
#GtkCellRendererText get its values from column 2.

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> An attribute on the renderer.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The column position on the model to get the attribute from.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_get_id">
<description>
Gets the window ID of a #GtkSocket widget, which can then
be used to create a client embedded inside the socket, for
instance with gtk_plug_new(). 

The #GtkSocket must have already be added into a toplevel window 
before you can make this call.


</description>
<parameters>
<parameter name="socket_">
<parameter_description> a #GtkSocket.
</parameter_description>
</parameter>
</parameters>
<return> the window ID for the socket
</return>
</function>

<function name="gtk_scrolled_window_get_placement">
<description>
Gets the placement of the contents with respect to the scrollbars
for the scrolled window. See gtk_scrolled_window_set_placement().


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return> the current placement value.

See also gtk_scrolled_window_set_placement() and
gtk_scrolled_window_unset_placement().
</return>
</function>

<function name="gtk_expander_get_use_underline">
<description>
Return value: %TRUE if an embedded underline in the expander label

</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an embedded underline in the expander label
indicates the mnemonic accelerator keys.

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_set_finishings">
<description>
Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="finishings">
<parameter_description> the finishings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkUIManager">
<description>
The post_activate signal is emitted just after the @action
is activated.

This is intended for applications to get notification
just after any action is activated.

Since: 2.4

</description>
<parameters>
<parameter name="uimanager">
<parameter_description> the ui manager
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the action
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkAccelMap">
<description>
Notifies of a change in the global accelerator map.
The path is also used as the detail for the signal,
so it is possible to connect to
changed::&amp;lt;replaceable&amp;gt;accel_path&amp;lt;/replaceable&amp;gt;.

Since: 2.4

</description>
<parameters>
<parameter name="object">
<parameter_description> the global accel map object
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> the path of the accelerator that changed
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description> the key value for the new accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description> the modifier mask for the new accelerator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_action_group_get_sensitive">
<description>
Return value: %TRUE if the group is sensitive.

</description>
<parameters>
<parameter name="action_group">
<parameter_description> the action group
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the group is sensitive.

Since: 2.4
</return>
</function>

<function name="gtk_rc_property_parse_flags">
<description>
A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses flags. 

Flags can be specified by their name, their nickname or
numerically. Multiple flags can be specified in the form 
&amp;lt;literal&amp;gt;&quot;( flag1 | flag2 | ... )&quot;&amp;lt;/literal&amp;gt;.


</description>
<parameters>
<parameter name="pspec">
<parameter_description> a #GParamSpec
</parameter_description>
</parameter>
<parameter name="gstring">
<parameter_description> the #GString to be parsed
</parameter_description>
</parameter>
<parameter name="property_value">
<parameter_description> a #GValue which must hold flags values.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @gstring could be parsed and @property_value
has been set to the resulting flags value.
</return>
</function>

<function name="gtk_print_operation_set_custom_tab_label">
<description>
Sets the label for the tab holding custom widgets.

Since: 2.10

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label to use, or %NULL to use the default label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkAction">
<description>
The &quot;activate&quot; signal is emitted when the action is activated.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the #GtkAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_operation_run">
<description>
Runs the print operation, by first letting the user modify
print settings in the print dialog, and then print the document.

Normally that this function does not return until the rendering of all 
pages is complete. You can connect to the 
#GtkPrintOperation::status-changed signal on @op to obtain some 
information about the progress of the print operation. 
Furthermore, it may use a recursive mainloop to show the print dialog.

If you call gtk_print_operation_set_allow_async() or set the allow-async
property the operation will run asyncronously if this is supported on the
platform. The #GtkPrintOperation::done signal will be emitted with the 
operation results when the operation is done (i.e. when the dialog is 
canceled, or when the print succeeds or fails).

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
if (settings != NULL)
gtk_print_operation_set_print_settings (print, settings);

if (page_setup != NULL)
gtk_print_operation_set_default_page_setup (print, page_setup);

g_signal_connect (print, &quot;begin-print&quot;, 
G_CALLBACK (begin_print), &amp;amp;data);
g_signal_connect (print, &quot;draw-page&quot;, 
G_CALLBACK (draw_page), &amp;amp;data);

res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG, parent, &amp;amp;error);

if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
{
error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_MESSAGE_ERROR,
GTK_BUTTONS_CLOSE,
&quot;Error printing file:\n&amp;percnt;s&quot;,
error-&amp;gt;message);
g_signal_connect (error_dialog, &quot;response&quot;, 
G_CALLBACK (gtk_widget_destroy), NULL);
gtk_widget_show (error_dialog);
g_error_free (error);
}
else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
{
if (settings != NULL)
g_object_unref (settings);
settings = g_object_ref (gtk_print_operation_get_print_settings (print));
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Note that gtk_print_operation_run() can only be called once on a
given #GtkPrintOperation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GtkPrintOperation
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the action to start
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the result of the print operation. A return value of 
%GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was
completed successfully. In this case, it is a good idea to obtain 
the used print settings with gtk_print_operation_get_print_settings() 
and store them for reuse with the next print operation. A value of
%GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running
asynchronously, and will emit the ::done signal when done.

Since: 2.10
</return>
</function>

<function name="gtk_action_activate">
<description>
Emits the &quot;activate&quot; signal on the specified action, if it isn&apos;t 
insensitive. This gets called by the proxy widgets when they get 
activated.

It can also be used to manually activate an action.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default">
<description>
The default widget is the widget that&apos;s activated when the user
presses Enter in a dialog (for example). This function sets or
unsets the default widget for a #GtkWindow about. When setting
(rather than unsetting) the default widget it&apos;s generally easier to
call gtk_widget_grab_focus() on the widget. Before making a widget
the default widget, you must set the #GTK_CAN_DEFAULT flag on the
widget you&apos;d like to make the default using GTK_WIDGET_SET_FLAGS().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="default_widget">
<parameter_description> widget to be the default, or %NULL to unset the
default widget for the toplevel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_multicontext_append_menuitems">
<description>
Add menuitems for various available input methods to a menu;
the menuitems, when selected, will switch the input method
for the context and the global default input method.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMMultiContext
</parameter_description>
</parameter>
<parameter name="menushell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_root_window">
<description>
Get the root window where this widget is located. This function can
only be called after the widget has been added to a widget
heirarchy with #GtkWindow at the top.

The root window is useful for such purposes as creating a popup
#GdkWindow associated with the window. In general, you should only
create display specific resources when a widget has been realized,
and you should free those resources when the widget is unrealized.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow root window for the toplevel for this widget.

Since: 2.2
</return>
</function>

<function name="GtkPlug">
<description>
Gets emitted when the plug becomes embedded in a socket
and when the embedding ends.

</description>
<parameters>
<parameter name="plug">
<parameter_description> the object on which the signal was emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paper_size_get_paper_sizes">
<description>
Creates a list of known paper sizes.


</description>
<parameters>
<parameter name="include_custom">
<parameter_description> whether to include custom paper sizes
as defined in the page setup dialog
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated list of newly 
allocated #GtkPaperSize objects

Since: 2.12
</return>
</function>

<function name="gtk_tool_button_set_stock_id">
<description>
Sets the name of the stock item. See gtk_tool_button_new_from_stock().
The stock_id property only has an effect if not
overridden by non-%NULL &quot;label&quot; and &quot;icon_widget&quot; properties.

Since: 2.4

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkToolButton
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a name of a stock item, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_print_settings_set_n_copies">
<description>
Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="num_copies">
<parameter_description> the number of copies 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_new">
<description>
Creates a new HSV color selector.


</description>
<parameters>
<parameter name="void">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> A newly-created HSV color selector.
</return>
</function>

<function name="gtk_print_settings_set_paper_height">
<description>
Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the paper height
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the units of @height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_model">
<description>
Sets the model for a #GtkTreeView.  If the @tree_view already has a model
set, it will remove it before setting the new model.  If @model is %NULL, 
then it will unset the old model.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeNode.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> The model.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_style_get">
<description>
Gets the values of a multiple style properties of @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of property names and locations to 
return the property values, starting with the location for 
@first_property_name, terminated by %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_new">
<description>
Creates a new #GtkTextView. If you don&apos;t call gtk_text_view_set_buffer()
before using the text view, an empty default buffer will be created
for you. Get the buffer with gtk_text_view_get_buffer(). If you want
to specify your own buffer, consider gtk_text_view_new_with_buffer().


</description>
<parameters>
</parameters>
<return> a new #GtkTextView
</return>
</function>

<function name="gtk_icon_view_get_selection_mode">
<description>
Gets the selection mode of the @icon_view.


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> A #GtkIconView.
</parameter_description>
</parameter>
</parameters>
<return> the current selection mode

Since: 2.6 
</return>
</function>

<function name="gtk_tool_button_new_from_stock">
<description>
Creates a new #GtkToolButton containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.

It is an error if @stock_id is not a name of a stock item.


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of the stock item 
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkToolButton

Since: 2.4
</return>
</function>

<function name="gtk_print_run_page_setup_dialog_async">
<description>
Runs a page setup dialog, letting the user modify the values from @page_setup. 

In contrast to gtk_print_run_page_setup_dialog(), this function  returns after 
showing the page setup dialog on platforms that support this, and calls @done_cb 
from a signal handler for the ::response signal of the dialog.

Since: 2.10

</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent, or %NULL
</parameter_description>
</parameter>
<parameter name="page_setup">
<parameter_description> an existing #GtkPageSetup, or %NULL
</parameter_description>
</parameter>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="done_cb">
<parameter_description> a function to call when the user saves the modified page setup
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @done_cb
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_get_color">
<description>
Queries the current color in an HSV color selector.  Returned values will be
in the [0.0, 1.0] range.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="h">
<parameter_description> Return value for the hue.
</parameter_description>
</parameter>
<parameter name="s">
<parameter_description> Return value for the saturation.
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> Return value for the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_chooser_button_new_with_backend">
<description>
Creates a new file-selecting button widget using @backend.


</description>
<parameters>
<parameter name="title">
<parameter_description> the title of the browse dialog.
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the open mode for the widget.
</parameter_description>
</parameter>
<parameter name="backend">
<parameter_description> the name of the #GtkFileSystem backend to use.
</parameter_description>
</parameter>
</parameters>
<return> a new button widget.

Since: 2.6
</return>
</function>

<function name="gtk_cell_renderer_text_new">
<description>
Creates a new #GtkCellRendererText. Adjust how text is drawn using
object properties. Object properties can be
set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
you can bind a property to a value in a #GtkTreeModel. For example,
you can bind the &quot;text&quot; property on the cell renderer to a string
value in the model, thus rendering a different string in each row
of the #GtkTreeView


</description>
<parameters>
</parameters>
<return> the new cell renderer
</return>
</function>

<function name="gtk_text_iter_forward_word_end">
<description>
Moves forward to the next word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_label_get_layout_offsets">
<description>
Obtains the coordinates where the label will draw the #PangoLayout
representing the text in the label; useful to convert mouse events
into coordinates inside the #PangoLayout, e.g. to take some action
if some part of the label is clicked. Of course you will need to
create a #GtkEventBox to receive the events, and pack the label
inside it, since labels are a #GTK_NO_WINDOW widget. Remember
when using the #PangoLayout functions you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store X offset of layout, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store Y offset of layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_info_get_visited">
<description>
Gets the timestamp (seconds from system&apos;s Epoch) when the resource
was last visited.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GtkRecentInfo
</parameter_description>
</parameter>
</parameters>
<return> the number of seconds elapsed from system&apos;s Epoch when
the resource was last visited, or -1 on failure.

Since: 2.10
</return>
</function>

<function name="gtk_selection_data_get_uris">
<description>
Gets the contents of the selection data as array of URIs.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
</parameters>
<return> if the selection data contains a list of
URIs, a newly allocated %NULL-terminated string array
containing the URIs, otherwise %NULL. If the result is 
non-%NULL it must be freed with g_strfreev().

Since: 2.6
</return>
</function>

<function name="gtk_file_chooser_get_filenames">
<description>
Lists all the selected files and subfolders in the current folder of
@chooser. The returned names are full absolute paths. If files in the current
folder cannot be represented as local filenames they will be ignored. (See
gtk_file_chooser_get_uris())


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
</parameters>
<return> a #GSList containing the filenames of all selected
files and subfolders in the current folder. Free the returned list
with g_slist_free(), and the filenames with g_free().

Since: 2.4
</return>
</function>

<function name="gtk_print_settings_new_from_file">
<description>
Reads the print settings from @filename. Returns a new #GtkPrintSettings
object with the restored settings, or %NULL if an error occurred.
See gtk_print_settings_to_file().


</description>
<parameters>
<parameter name="file_name">
<parameter_description> the filename to read the settings from
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the restored #GtkPrintSettings

Since: 2.12
</return>
</function>

<function name="GtkMenuItem">
<description>
The submenu attached to the menu item, or NULL if it has none.

Since: 2.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_transient_for">
<description>
Dialog windows should be set transient for the main application
window they were spawned from. This allows &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window managers&amp;lt;/link&amp;gt; to e.g. keep the
dialog on top of the main window, or center the dialog over the
main window. gtk_dialog_new_with_buttons() and other convenience
functions in GTK+ will sometimes call
gtk_window_set_transient_for() on your behalf.

On Windows, this function puts the child window on top of the parent, 
much as the window manager would have done on X.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> parent window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_status_icon_set_from_pixbuf">
<description>
Makes @status_icon display @pixbuf. 
See gtk_status_icon_new_from_pixbuf() for details.

Since: 2.10

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_ends_tag">
<description>
Return value: whether @iter is the end of a range tagged with @tag

</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the end of a range tagged with @tag

</return>
</function>

<function name="gtk_action_group_translate_string">
<description>
Translates a string using the specified translate_func(). This
is mainly intended for language bindings.


</description>
<parameters>
<parameter name="action_group">
<parameter_description> a #GtkActionGroup
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> the translation of @string

Since: 2.6
</return>
</function>

<function name="_gtk_xembed_send_message">
<description>
Sends a generic XEMBED message to a particular window.

</description>
<parameters>
<parameter name="recipient">
<parameter_description> window to which to send the window, or %NULL
in which case nothing will be sent
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description>   type of message
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description>    detail field of message
</parameter_description>
</parameter>
<parameter name="data1">
<parameter_description>     data1 field of message
</parameter_description>
</parameter>
<parameter name="data2">
<parameter_description>     data2 field of message
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_about_dialog_set_authors">
<description>
Sets the strings which are displayed in the authors tab
of the secondary credits dialog. 

Since: 2.6

</description>
<parameters>
<parameter name="about">
<parameter_description> a #GtkAboutDialog
</parameter_description>
</parameter>
<parameter name="authors">
<parameter_description> a %NULL-terminated array of strings 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_assistant_get_page_header_image">
<description>
Gets the header image for @page. 


</description>
<parameters>
<parameter name="assistant">
<parameter_description> a #GtkAssistant
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> a page of @assistant
</parameter_description>
</parameter>
</parameters>
<return> the header image for @page, or %NULL
if there&apos;s no header image for the page.

Since: 2.10
</return>
</function>

<function name="gtk_draw_flat_box">
<description>
Draws a flat box on @window with the given parameters.

Deprecated: Use gtk_paint_flat_box() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_new">
<description>
Creates a new #GtkTextTagTable. The table contains no tags by
default.


</description>
<parameters>
</parameters>
<return> a new #GtkTextTagTable
</return>
</function>

<function name="gtk_dialog_new_with_buttons">
<description>
Creates a new #GtkDialog with title @title (or %NULL for the default
title; see gtk_window_set_title()) and transient parent @parent (or
%NULL for none; see gtk_window_set_transient_for()). The @flags
argument can be used to make the dialog modal (#GTK_DIALOG_MODAL)
and/or to have it destroyed along with its transient parent
(#GTK_DIALOG_DESTROY_WITH_PARENT). After @flags, button
text/response ID pairs should be listed, with a %NULL pointer ending
the list. Button text can be either a stock ID such as
#GTK_STOCK_OK, or some arbitrary text. A response ID can be
any positive number, or one of the values in the #GtkResponseType
enumeration. If the user clicks one of these dialog buttons,
#GtkDialog will emit the #GtkDialog::response signal with the corresponding
response ID. If a #GtkDialog receives the #GtkWidget::delete-event signal, 
it will emit ::response with a response ID of #GTK_RESPONSE_DELETE_EVENT.
However, destroying a dialog does not emit the ::response signal;
so be careful relying on ::response when using the 
#GTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to right,
so the first button in the list will be the leftmost button in the dialog.

Here&apos;s a simple example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkWidget *dialog = gtk_dialog_new_with_buttons (&quot;My dialog&quot;,
main_app_window,
GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_STOCK_OK,
GTK_RESPONSE_ACCEPT,
GTK_STOCK_CANCEL,
GTK_RESPONSE_REJECT,
NULL);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> from #GtkDialogFlags
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> stock ID or text to go in first button, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for first button, then additional buttons, ending with %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkDialog
</return>
</function>

<function name="gtk_file_chooser_set_current_name">
<description>
Sets the current name in the file selector, as if entered
by the user. Note that the name passed in here is a UTF-8
string rather than a filename. This function is meant for
such uses as a suggested name in a &quot;Save As...&quot; dialog.

If you want to preselect a particular existing file, you should use
gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead.
Please see the documentation for those functions for an example of using
gtk_file_chooser_set_current_name() as well.

Since: 2.4

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the filename to use, as a UTF-8 string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_set_locale">
<description>
Initializes internationalization support for GTK+. gtk_init()
automatically does this, so there is typically no point
in calling this function.

If you are calling this function because you changed the locale
after GTK+ is was initialized, then calling this function
may help a bit. (Note, however, that changing the locale
after GTK+ is initialized may produce inconsistent results and
is not really supported.)

In detail - sets the current locale according to the
program environment. This is the same as calling the C library function
&amp;lt;literal&amp;gt;setlocale (LC_ALL, &quot;&quot;)&amp;lt;/literal&amp;gt; but also takes care of the 
locale specific setup of the windowing system used by GDK.


</description>
<parameters>
</parameters>
<return> a string corresponding to the locale set, typically in the
form lang_COUNTRY, where lang is an ISO-639 language code, and
COUNTRY is an ISO-3166 country code. On Unix, this form matches the
result of the setlocale(); it is also used on other machines, such as 
Windows, where the C library returns a different result. The string is 
owned by GTK+ and should not be modified or freed.
</return>
</function>

<function name="gtk_text_view_get_iter_location">
<description>
Gets a rectangle which roughly contains the character at @iter.
The rectangle position is in buffer coordinates; use
gtk_text_view_buffer_to_window_coords() to convert these
coordinates to coordinates for one of the windows in the text view.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> bounds of the character at @iter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_name">
<description>
Retrieves the name of a widget. See gtk_widget_set_name() for the
significance of widget names.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> name of the widget. This string is owned by GTK+ and
should not be modified or freed
</return>
</function>

<function name="gtk_expander_get_label_widget">
<description>
Retrieves the label widget for the frame. See
gtk_expander_set_label_widget().


</description>
<parameters>
<parameter name="expander">
<parameter_description> a #GtkExpander
</parameter_description>
</parameter>
</parameters>
<return> the label widget, or %NULL if there is none.

Since: 2.4
</return>
</function>

<function name="gtk_widget_get_composite_name">
<description>
Obtains the composite name of a widget. 

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the composite name of @widget, or %NULL if @widget is not
a composite child. The string should not be freed when it is no 
longer needed.
</return>
</function>

<function name="gtk_icon_size_lookup_for_settings">
<description>
Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for a particular 
#GtkSettings. Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn&apos;t normally needed, gtk_widget_render_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings object, used to determine
which set of user preferences to used.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an icon size
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store icon width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store icon height
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @size was a valid size

Since: 2.2
</return>
</function>

<function name="gtk_tree_model_sort_convert_child_path_to_path">
<description>
Converts @child_path to a path relative to @tree_model_sort.  That is,
@child_path points to a path in the child model.  The returned path will
point to the same row in the sorted model.  If @child_path isn&apos;t a valid 
path on the child model, then %NULL is returned.


</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="child_path">
<parameter_description> A #GtkTreePath to convert
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreePath, or %NULL
</return>
</function>

<function name="_gtk_xembed_push_message">
<description>
Adds a client message to the stack of current XEMBED events.

</description>
<parameters>
<parameter name="xevent">
<parameter_description> a XEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_get_widget">
<description>
Obtains the widget which corresponds to @path. 

If the widget corresponding to @path is a menu item which opens a 
submenu, then the submenu is returned. If you are interested in the menu 
item, use gtk_item_factory_get_item() instead.

Deprecated: 2.4:

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to the widget
</parameter_description>
</parameter>
</parameters>
<return> the widget for the given path, or %NULL if @path doesn&apos;t lead
to a widget
</return>
</function>

<function name="gtk_icon_view_set_columns">
<description>
Sets the ::columns property which determines in how
many columns the icons are arranged. If @columns is
-1, the number of columns will be chosen automatically 
to fill the available area. 

Since: 2.6

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="columns">
<parameter_description> the number of columns
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_queue_resize">
<description>
This function is only for use in widget implementations.
Flags a widget to have its size renegotiated; should
be called when a widget for some reason has a new size request.
For example, when you change the text in a #GtkLabel, #GtkLabel
queues a resize to ensure there&apos;s enough space for the new text.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkCellEditable">
<description>
This signal is meant to indicate that the cell is finished 
editing, and the widget may now be destroyed. 

Implementations of #GtkCellEditable are responsible for 
emitting this signal when they are done editing. It must
be emitted after the #GtkCellEditable::editing-done signal, 
to give the cell renderer a chance to update the cell&apos;s value 
before the widget is removed. 

gtk_cell_editable_remove_widget() is a convenience method
for emitting ::remove-widget. 

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> the object on which the signal was emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_plug_send_delete_event">
<description>
Send a GDK_DELETE event to the @widget and destroy it if
necessary. Internal GTK function, called from this file or the
backend-specific GtkPlug implementation.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_fixed_height_mode">
<description>
Return value: %TRUE if @tree_view is in fixed height mode

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @tree_view is in fixed height mode

Since: 2.6
</return>
</function>

<function name="gtk_cell_renderer_activate">
<description>
Passes an activate event to the cell renderer for possible processing.  
Some cell renderers may use events; for example, #GtkCellRendererToggle 
toggles when it gets a mouse click.


</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> widget that received the event
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> widget-dependent string representation of the event location; 
e.g. for #GtkTreeView, a string representation of #GtkTreePath
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> background area as passed to gtk_cell_renderer_render()
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> cell area as passed to gtk_cell_renderer_render()
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> render flags
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was consumed/handled
</return>
</function>

<function name="gtk_widget_get_parent">
<description>
Return value: the parent container of @widget, or %NULL

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the parent container of @widget, or %NULL
</return>
</function>

<function name="gtk_style_unref">
<description>
Deprecated equivalent of g_object_unref().

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_destroy_with_parent">
<description>
Return value: %TRUE if the window will be destroyed with its transient parent.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window will be destroyed with its transient parent.
</return>
</function>

<function name="gtk_spin_button_set_wrap">
<description>
Sets the flag that determines if a spin button value wraps around to the
opposite limit when the upper or lower limit of the range is exceeded.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="wrap">
<parameter_description> a flag indicating if wrapping behavior is performed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_border_copy">
<description>
Copies a #GtkBorder structure.

</description>
<parameters>
<parameter name="border_">
<parameter_description> a #GtkBorder.
</parameter_description>
</parameter>
</parameters>
<return> a copy of @border_.
</return>
</function>

<function name="gtk_recent_action_new">
<description>
Creates a new #GtkRecentAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().


</description>
<parameters>
<parameter name="name">
<parameter_description> a unique name for the action
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the label displayed in menu items and on buttons
</parameter_description>
</parameter>
<parameter name="tooltip">
<parameter_description> a tooltip for the action
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the stock icon to display in widgets representing the action
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GtkRecentAction.

Since: 2.12
</return>
</function>

<function name="gtk_link_button_set_uri_hook">
<description>
Sets @func as the function that should be invoked every time a user clicks
a #GtkLinkButton. This function is called before every callback registered
for the &quot;clicked&quot; signal.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function called each time a #GtkLinkButton is clicked, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to be passed to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a #GDestroyNotify that gets called when @data is no longer needed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the previously set hook function.

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_set_screen">
<description>
Sets the #GdkScreen where @status_icon is displayed; if
the icon is already mapped, it will be unmapped, and
then remapped on the new screen.

Since: 2.12

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_unselect_uri">
<description>
Unselects @uri inside @chooser.

Since: 2.10

</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a URI
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_insertion_cursor">
<description>
Draws a text caret on @drawable at @location. This is not a style function
but merely a convenience function for drawing the standard cursor shape.

Since: 2.4

</description>
<parameters>
<parameter name="widget">
<parameter_description>  a #GtkWidget
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> a #GdkDrawable 
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> rectangle to which the output is clipped, or %NULL if the
output should not be clipped
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> location where to draw the cursor (@location-&amp;gt;width is ignored)
</parameter_description>
</parameter>
<parameter name="is_primary">
<parameter_description> if the cursor should be the primary cursor color.
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> whether the cursor is left-to-right or
right-to-left. Should never be #GTK_TEXT_DIR_NONE
</parameter_description>
</parameter>
<parameter name="draw_arrow">
<parameter_description> %TRUE to draw a directional arrow on the
cursor. Should be %FALSE unless the cursor is split.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_set_preedit_string">
<description>
Set the preedit string and attributes. The preedit string is a
string showing text that is currently being edited and not
yet committed into the buffer.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout
</parameter_description>
</parameter>
<parameter name="preedit_string">
<parameter_description> a string to display at the insertion point
</parameter_description>
</parameter>
<parameter name="preedit_attrs">
<parameter_description> a #PangoAttrList of attributes that apply to @preedit_string
</parameter_description>
</parameter>
<parameter name="cursor_pos">
<parameter_description> position of cursor within preedit string in chars
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_get_dest_item_at_pos">
<description>
Determines the destination item for a given position.


</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="drag_x">
<parameter_description> the position to determine the destination item for
</parameter_description>
</parameter>
<parameter name="drag_y">
<parameter_description> the position to determine the destination item for
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> Return location for the path of the item, or %NULL.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> Return location for the drop position, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether there is an item at the given position.

Since: 2.8
</return>
</function>

<function name="_gtk_key_hash_remove_entry">
<description>
Removes a value previously added to the key hash with
_gtk_key_hash_add_entry().

</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value previously added with _gtk_key_hash_add_entry()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_copy_target_list">
<description>
This function returns the list of targets this text buffer can
provide for copying and as DND source. The targets in the list are
added with %info values from the #GtkTextBufferTargetInfo enum,
using gtk_target_list_add_rich_text_targets() and
gtk_target_list_add_text_targets().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> the #GtkTargetList

Since: 2.10
</return>
</function>

<function name="gtk_status_icon_get_blinking">
<description>
Return value: %TRUE if the icon is blinking

</description>
<parameters>
<parameter name="status_icon">
<parameter_description> a #GtkStatusIcon
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the icon is blinking

Since: 2.10
</return>
</function>

<function name="gtk_range_set_fill_level">
<description>
Set the new position of the fill level indicator.

The &quot;fill level&quot; is probably best described by its most prominent
use case, which is an indicator for the amount of pre-buffering in
a streaming media player. In that use case, the value of the range
would indicate the current play position, and the fill level would
be the position up to which the file/stream has been downloaded.

This amount of prebuffering can be displayed on the range&apos;s trough
and is themeable separately from the trough. To enable fill level
display, use gtk_range_set_show_fill_level(). The range defaults
to not showing the fill level.

Additionally, it&apos;s possible to restrict the range&apos;s slider position
to values which are smaller than the fill level. This is controller
by gtk_range_set_restrict_to_fill_level() and is by default
enabled.

Since: 2.12

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="fill_level">
<parameter_description> the new position of the fill level indicator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_grid_lines">
<description>
Sets which grid lines to draw in @tree_view.

Since: 2.10

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="grid_lines">
<parameter_description> a #GtkTreeViewGridLines value indicating which grid lines to
enable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_page_setup_get_bottom_margin">
<description>
Gets the bottom margin in units of @unit.


</description>
<parameters>
<parameter name="setup">
<parameter_description> a #GtkPageSetup
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit for the return value
</parameter_description>
</parameter>
</parameters>
<return> the bottom margin

Since: 2.10
</return>
</function>

<function name="gtk_print_settings_get_collate">
<description>
Gets the value of %GTK_PRINT_SETTINGS_COLLATE.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
</parameters>
<return> whether to collate the printed pages

Since: 2.10
</return>
</function>

<function name="gtk_toolbar_insert_item">
<description>
Inserts a new item into the toolbar. You must specify the position in the
toolbar where it will be inserted.

@callback must be a pointer to a function taking a #GtkWidget and a gpointer as
arguments. Use the GTK_SIGNAL_FUNC() to cast the function to #GtkSignalFunc.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> give your toolbar button a label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> a string that appears when the user holds the mouse over this item.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> use with #GtkTipsQuery.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that should be used as the button&apos;s icon.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a pointer to any data you wish to be passed to the callback.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the number of widgets to insert this item after.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar item as a #GtkWidget.
</return>
</function>

<function name="gtk_im_multicontext_new">
<description>
Creates a new #GtkIMMulticontext.


</description>
<parameters>
</parameters>
<return> a new #GtkIMMulticontext.
</return>
</function>

<function name="gtk_notebook_reorder_child">
<description>
Reorders the page containing @child, so that it appears in position
@position. If @position is greater than or equal to the number of
children in the list or negative, @child will be moved to the end
of the list.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to move
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the new position, or -1 to move to the end
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_event">
<description>
Rarely-used function. This function is used to emit
the event signals on a widget (those signals should never
be emitted without using this function to do so).
If you want to synthesize an event though, don&apos;t use this function;
instead, use gtk_main_do_event() so the event will behave as if
it were in the event queue. Don&apos;t synthesize expose events; instead,
use gdk_window_invalidate_rect() to invalidate a region of the
window.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> return from the event signal emission (%TRUE if 
the event was handled)
</return>
</function>

<function name="gtk_range_set_range">
<description>
Sets the allowable values in the #GtkRange, and clamps the range
value to be between @min and @max. (If the range has a non-zero
page size, it is clamped between @min and @max - page-size.)

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> minimum range value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum range value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_new_from_string">
<description>
Creates a new #GtkTreePath initialized to @path.  @path is expected to be a
colon separated list of numbers.  For example, the string &quot;10:4:0&quot; would
create a path of depth 3 pointing to the 11th child of the root node, the 5th
child of that 11th child, and the 1st child of that 5th child.  If an invalid
path string is passed in, %NULL is returned.


</description>
<parameters>
<parameter name="path">
<parameter_description> The string representation of a path.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GtkTreePath, or %NULL
</return>
</function>

<function name="gtk_link_button_set_uri">
<description>
Sets @uri as the URI where the #GtkLinkButton points.

Since: 2.10

</description>
<parameters>
<parameter name="link_button">
<parameter_description> a #GtkLinkButton
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a valid URI
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_font_button_set_title">
<description>
Sets the title for the font selection dialog.  

Since: 2.4

</description>
<parameters>
<parameter name="font_button">
<parameter_description> a #GtkFontButton
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a string containing the font selection dialog title
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_recent_chooser_delegate_iface_init">
<description>
An interface-initialization function for use in cases where
an object is simply delegating the methods, signals of
the #GtkRecentChooser interface to another object.
_gtk_recent_chooser_set_delegate() must be called on each
instance of the object so that the delegate object can
be found.

</description>
<parameters>
<parameter name="iface">
<parameter_description> a #GtkRecentChooserIface
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_keep_below">
<description>
Asks to keep @window below, so that it stays in bottom. Note that
you shouldn&apos;t assume the window is definitely below afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could not keep it below,
and not all window managers support putting windows below. But
normally the window will be kept below. Just don&apos;t write code
that crashes if not.

It&apos;s permitted to call this function before showing a window,
in which case the window will be kept below when it appears onscreen
initially.

You can track the below state via the &quot;window_state_event&quot; signal
on #GtkWidget.

Note that, according to the &amp;lt;ulink 
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&amp;gt;Extended Window 
Manager Hints&amp;lt;/ulink&amp;gt; specification, the above state is mainly meant 
for user preferences and should not be used by applications e.g. for 
drawing attention to their dialogs.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @window below other windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_sortable_sort_column_changed">
<description>
Emits a GtkTreeSortable::sort_column_changed signal on 

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_manager_get_for_screen">
<description>
Gets the recent manager object associated with @screen; if this
function has not previously been called for the given screen,
a new recent manager object will be created and associated with
the screen. Recent manager objects are fairly expensive to create,
so using this function is usually a better choice than calling 
gtk_recent_manager_new() and setting the screen yourself; by using
this function a single recent manager object will be shared between
users.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> A unique #GtkRecentManager associated with the given
screen. This recent manager is associated to the with the screen
and can be used as long as the screen is open. Do not ref or
unref it.

Deprecated: 2.12: This function has been deprecated and should
not be used in newly written code. Calling this function is
equivalent to calling gtk_recent_manager_get_default().

Since: 2.10
</return>
</function>

<function name="gtk_icon_source_get_state">
<description>
Obtains the widget state this icon source applies to. The return
value is only useful/meaningful if the widget state is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt;
wildcarded.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> widget state this source matches
</return>
</function>

<function name="gtk_entry_set_cursor_hadjustment">
<description>
Hooks up an adjustment to the cursor position in an entry, so that when 
the cursor is moved, the adjustment is scrolled to show that position. 
See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining 
the adjustment.

The adjustment has to be in pixel units and in the same coordinate system 
as the entry. 

Since: 2.12

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> an adjustment which should be adjusted when the cursor 
is moved, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_direction">
<description>
Sets the text direction this icon source is intended to be used
with.

Setting the text direction on an icon source makes no difference
if the text direction is wildcarded. Therefore, you should usually
call gtk_icon_source_set_direction_wildcarded() to un-wildcard it
in addition to calling this function.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> text direction this source applies to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_view_enable_model_drag_dest">
<description>
Turns @icon_view into a drop destination for automatic DND.

Since: 2.8

</description>
<parameters>
<parameter name="icon_view">
<parameter_description> a #GtkIconView
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the table of targets that the drag will support
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> the number of items in @targets
</parameter_description>
</parameter>
<parameter name="actions">
<parameter_description> the bitmask of possible actions for a drag to this
widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_ellipsize">
<description>
Return value: #PangoEllipsizeMode

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> #PangoEllipsizeMode

Since: 2.6
</return>
</function>

<function name="gtk_tree_view_columns_autosize">
<description>
Resizes all columns to their optimal width. Only works after the
treeview has been realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_chars">
<description>
Moves @count characters backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of characters to move
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable

</return>
</function>

<function name="gtk_text_iter_forward_line">
<description>
Moves @iter to the start of the next line. Returns %TRUE if there
was a next line to move to, and %FALSE if @iter was simply moved to
the end of the buffer and is now not dereferenceable, or if @iter was
already at the end of the buffer.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter can be dereferenced
</return>
</function>

<function name="gtk_text_mark_set_visible">
<description>
Sets the visibility of @mark; the insertion point is normally
visible, i.e. you can see it as a vertical bar. Also, the text
widget uses a visible mark to indicate where a drop will occur when
dragging-and-dropping text. Most other marks are not visible.
Marks are not visible by default.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> visibility of mark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_recent_chooser_widget_new_for_manager">
<description>
Creates a new #GtkRecentChooserWidget with a specified recent manager.

This is useful if you have implemented your own recent manager, or if you
have a customized instance of a #GtkRecentManager object.


</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GtkRecentManager
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkRecentChooserWidget

Since: 2.10
</return>
</function>

<function name="gtk_scale_get_layout">
<description>
Gets the #PangoLayout used to display the scale. 
The returned object is owned by the scale so does 
not need to be freed by the caller. 


</description>
<parameters>
<parameter name="scale">
<parameter_description> A #GtkScale
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this scale, or %NULL 
if the #GtkScale:draw-value property is %FALSE.

Since: 2.4
</return>
</function>

<function name="gtk_entry_completion_complete">
<description>
Requests a completion operation, or in other words a refiltering of the
current list with completions, using the current key. The completion list
view will be updated accordingly.

Since: 2.4

</description>
<parameters>
<parameter name="completion">
<parameter_description> A #GtkEntryCompletion.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GtkSettings">
<description>
How long to show the last inputted character in hidden
entries. This value is in milliseconds. 0 disables showing the
last char. 600 is a good value for enabling it.

Since: 2.10

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_action_connect_accelerator">
<description>
Installs the accelerator for @action if @action has an
accel path and group. See gtk_action_set_accel_path() and 
gtk_action_set_accel_group()

Since multiple proxies may independently trigger the installation
of the accelerator, the @action counts the number of times this
function has been called and doesn&apos;t remove the accelerator until
gtk_action_disconnect_accelerator() has been called as many times.

Since: 2.4

</description>
<parameters>
<parameter name="action">
<parameter_description> a #GtkAction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_layout_pack_end">
<description>
Adds the @cell to the end of @cell_layout. If @expand is %FALSE, then the
@cell is allocated no more space than it needs. Any unused space is
divided evenly between cells for which @expand is %TRUE.

Note that reusing the same cell renderer is not supported. 

Since: 2.4

</description>
<parameters>
<parameter name="cell_layout">
<parameter_description> A #GtkCellLayout.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if @cell is to be given extra space allocated to @cell_layout.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_grab_default">
<description>
Causes @widget to become the default widget. @widget must have the
%GTK_CAN_DEFAULT flag set; typically you have to set this flag
yourself by calling &amp;lt;literal&amp;gt;GTK_WIDGET_SET_FLAGS (@widget,
GTK_CAN_DEFAULT)&amp;lt;/literal&amp;gt;. The default widget is activated when 
the user presses Enter in a window. Default widgets must be 
activatable, that is, gtk_widget_activate() should affect them.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_copy">
<description>
Copies a #GtkTreeRowReference.


</description>
<parameters>
<parameter name="reference">
<parameter_description> a #GtkTreeRowReference
</parameter_description>
</parameter>
</parameters>
<return> a copy of @reference.

Since: 2.2
</return>
</function>

<function name="gtk_statusbar_push">
<description>
Pushes a new message onto a statusbar&apos;s stack.


</description>
<parameters>
<parameter name="statusbar">
<parameter_description> a #GtkStatusbar
</parameter_description>
</parameter>
<parameter name="context_id">
<parameter_description> the message&apos;s context id, as returned by
gtk_statusbar_get_context_id()
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the message to add to the statusbar
</parameter_description>
</parameter>
</parameters>
<return> a message id that can be used with 
gtk_statusbar_remove().
</return>
</function>

<function name="gtk_text_buffer_set_text">
<description>
Deletes current contents of @buffer, and inserts @text instead. If
@len is -1, @text must be nul-terminated. @text must be valid UTF-8.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 text to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_add_id">
<description>
Adds an XEMBED client, such as a #GtkPlug, to the #GtkSocket.  The
client may be in the same process or in a different process. 

To embed a #GtkPlug in a #GtkSocket, you can either create the
#GtkPlug with &amp;lt;literal&amp;gt;gtk_plug_new (0)&amp;lt;/literal&amp;gt;, call 
gtk_plug_get_id() to get the window ID of the plug, and then pass that to the
gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the
window ID for the socket, and call gtk_plug_new() passing in that
ID.

The #GtkSocket must have already be added into a toplevel window
before you can make this call.

</description>
<parameters>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
<parameter name="window_id">
<parameter_description> the window ID of a client participating in the XEMBED protocol.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_icon_name">
<description>
Sets the name of an icon to look up in the current icon theme
to use as a base image when creating icon variants for #GtkIconSet.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> name of icon to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_cursor_positions">
<description>
Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of positions to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable
</return>
</function>

<function name="gtk_widget_get_settings">
<description>
Gets the settings object holding the settings (global property
settings, RC file information, etc) used for this widget.

Note that this function can only be called when the #GtkWidget
is attached to a toplevel, since the settings object is specific
to a particular #GdkScreen.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the relevant #GtkSettings object
</return>
</function>

<function name="gtk_recent_chooser_list_filters">
<description>
Gets the #GtkRecentFilter objects held by @chooser.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkRecentChooser
</parameter_description>
</parameter>
</parameters>
<return> A singly linked list of #GtkRecentFilter objects.  You
should just free the returned list using g_slist_free().

Since: 2.10
</return>
</function>

<function name="gtk_print_settings_set_length">
<description>
Associates a length in units of @unit with @key.

Since: 2.10

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkPrintSettings
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a length
</parameter_description>
</parameter>
<parameter name="unit">
<parameter_description> the unit of @length
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_n_columns">
<description>
Return value: The number of columns.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns.
</return>
</function>

<function name="gtk_file_chooser_remove_shortcut_folder_uri">
<description>
Removes a folder URI from a file chooser&apos;s list of shortcut folders.


</description>
<parameters>
<parameter name="chooser">
<parameter_description> a #GtkFileChooser
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> URI of the folder to remove
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeds, %FALSE otherwise.  
In the latter case, the @error will be set as appropriate.

See also: gtk_file_chooser_add_shortcut_folder_uri()

Since: 2.4
</return>
</function>

<function name="gtk_tree_path_get_indices">
<description>
Return value: The current indices, or %NULL.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> The current indices, or %NULL.
</return>
</function>

<function name="gtk_window_set_focus">
<description>
If @focus is not the current focus widget, and is focusable, sets
it as the focus widget for the window. If @focus is %NULL, unsets
the focus widget for this window. To set the focus to a particular
widget in the toplevel, it is usually more convenient to use
gtk_widget_grab_focus() instead of this function.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="focus">
<parameter_description> widget to be the new focus widget, or %NULL to unset
any focus widget for the toplevel window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_set_hadjustment">
<description>
Sets the horizontal scroll adjustment for the layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> new scroll adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_shell_get_take_focus">
<description>
Returns: %TRUE if the menu shell will take the keyboard focus on popup.

</description>
<parameters>
<parameter name="menu_shell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu shell will take the keyboard focus on popup.

Since: 2.8
</return>
</function>

<function name="gtk_action_create_menu_item">
<description>
Creates a menu item widget that proxies for the given action.


</description>
<parameters>
<parameter name="action">
<parameter_description> the action object
</parameter_description>
</parameter>
</parameters>
<return> a menu item connected to the action.

Since: 2.4
</return>
</function>

<function name="gtk_spin_button_get_adjustment">
<description>
Get the adjustment associated with a #GtkSpinButton


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the #GtkAdjustment of @spin_button
</return>
</function>

<function name="gtk_image_get_icon_set">
<description>
Gets the icon set and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="icon_set">
<parameter_description> location to store a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location to store a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
