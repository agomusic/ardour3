// -*- c++ -*-
/* $Id: entrycompletion.ccg,v 1.13 2006/07/19 16:58:50 murrayc Exp $ */

/* Copyright 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/treeiter.h>
#include <gtkmm/entry.h>
#include <gtk/gtkentrycompletion.h>


static gboolean SignalProxy_Match_gtk_callback(GtkEntryCompletion* completion, const gchar* key, GtkTreeIter* iter, gpointer user_data)
{
  Gtk::EntryCompletion::SlotMatch* the_slot = static_cast<Gtk::EntryCompletion::SlotMatch*>(user_data);

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  try
  {
  #endif //GLIBMM_EXCEPTIONS_ENABLED
    GtkTreeModel* tree_model = gtk_entry_completion_get_model(completion);
    return (*the_slot)(Glib::convert_const_gchar_ptr_to_ustring(key),
                         Gtk::TreeModel::const_iterator(tree_model, iter)
                         );
  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return false; //An arbitary default, just to avoid the compiler warning.
  #endif //GLIBMM_EXCEPTIONS_ENABLED
}

static void SignalProxy_Match_gtk_callback_destroy(void* data)
{
  delete static_cast<Gtk::EntryCompletion::SlotMatch*>(data);
}


namespace Gtk
{

void EntryCompletion::set_match_func(const SlotMatch& slot)
{
  // Create a copy of the slot.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_Match_gtk_callback_destroy() is called.
  SlotMatch* slot_copy = new SlotMatch(slot);

  gtk_entry_completion_set_match_func(gobj(),
      &SignalProxy_Match_gtk_callback, slot_copy,
      &SignalProxy_Match_gtk_callback_destroy);
}

void EntryCompletion::insert_action_text(const Glib::ustring& text, int index)
{
  gtk_entry_completion_insert_action_text(gobj(), index, text.c_str());
}

void EntryCompletion::insert_action_markup(const Glib::ustring& markup, int index)
{
  gtk_entry_completion_insert_action_markup(gobj(), index, markup.c_str());
}

void EntryCompletion::prepend_action_text(const Glib::ustring& text)
{
  //We know that gtk_entry_completion_insert_action_text() uses gtk_list_store_insert(),
  //and we know that gtk_list_store_insert() prepends if the position is 0, though
  //this is not actually documented.
  gtk_entry_completion_insert_action_text(gobj(), 0, text.c_str());
}

void EntryCompletion::prepend_action_markup(const Glib::ustring& markup)
{
  //We know that gtk_entry_completion_insert_action_markup() uses gtk_list_store_insert(),
  //and we know that gtk_list_store_insert() prepends if the position is 0, though
  //this is not actually documented.
  gtk_entry_completion_insert_action_markup(gobj(), 0 /* See C docs */, markup.c_str());
}

} //namespace Gtk


namespace //anonymous
{

static gboolean Widget_signal_match_selected_callback(GtkEntryCompletion* self, GtkTreeModel* c_model, GtkTreeIter* c_iter, void* data)
{
  using namespace Gtk;
  typedef sigc::slot< bool, const TreeModel::iterator& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
      {
        //This conversion is the custom-written part:
        Gtk::TreeModel::iterator cppIter(c_model, c_iter);

        return static_cast<int>( (*static_cast<SlotType*>(slot))(cppIter) );
      }
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

static gboolean Widget_signal_match_selected_notify_callback(GtkEntryCompletion* self, GtkTreeModel* c_model, GtkTreeIter* c_iter, void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void, const TreeModel::iterator& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
      {
        //This conversion is the custom-written part:
        Gtk::TreeModel::iterator cppIter(c_model, c_iter);

        (*static_cast<SlotType*>(slot))(cppIter);
      }
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

const Glib::SignalProxyInfo EntryCompletion_signal_match_selected_info =
{
  "match_selected",
  (GCallback) &Widget_signal_match_selected_callback,
  (GCallback) &Widget_signal_match_selected_notify_callback
};


static gboolean Widget_signal_cursor_on_match_callback(GtkEntryCompletion* self, GtkTreeModel* c_model, GtkTreeIter* c_iter, void* data)
{
  using namespace Gtk;
  typedef sigc::slot< bool, const TreeModel::iterator& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
      {
        //This conversion is the custom-written part:
        Gtk::TreeModel::iterator cppIter(c_model, c_iter);

        return static_cast<int>( (*static_cast<SlotType*>(slot))(cppIter) );
      }
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}

static gboolean Widget_signal_cursor_on_match_notify_callback(GtkEntryCompletion* self, GtkTreeModel* c_model, GtkTreeIter* c_iter, void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void, const TreeModel::iterator& > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
      {
        //This conversion is the custom-written part:
        Gtk::TreeModel::iterator cppIter(c_model, c_iter);

        (*static_cast<SlotType*>(slot))(cppIter);
      }
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }

  typedef gboolean RType;
  return RType();
}


const Glib::SignalProxyInfo EntryCompletion_signal_cursor_on_match_info =
{
  "match_selected",
  (GCallback) &Widget_signal_cursor_on_match_callback,
  (GCallback) &Widget_signal_cursor_on_match_notify_callback
};

} //anonymous namespace


namespace Gtk
{

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
//Hand-coded signal wrapping:

bool Gtk::EntryCompletion::on_match_selected(const TreeModel::iterator& iter)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->match_selected)
    return (*base->match_selected)(gobj(), iter.get_model_gobject(), const_cast<GtkTreeIter*>(iter.gobj()));
  else
  {
    typedef bool RType;
    return RType(); //There should always be an implementation in the C object, so this will never happen.
  }
}

gboolean EntryCompletion_Class::match_selected_callback_custom(GtkEntryCompletion* self, GtkTreeModel* c_model, GtkTreeIter* c_iter)
{
  CppObjectType *const obj = dynamic_cast<CppObjectType*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj && obj->is_derived_())
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try // Trap C++ exceptions which would normally be lost because this is a C callback.
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      // Call the virtual member method, which derived classes might override.

      //This conversion is the custom-written part:
      Gtk::TreeModel::iterator cppIter(c_model, c_iter);
      return obj->on_match_selected(cppIter);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
  else
  {
    BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

    // Call the original underlying C function:
    if(base && base->match_selected)
      return (*base->match_selected)(self, c_model, c_iter);
  }

  typedef gboolean RType;
  return RType();
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

Glib::SignalProxy1< bool, const TreeModel::iterator& > EntryCompletion::signal_match_selected()
{
  return Glib::SignalProxy1< bool, const TreeModel::iterator& >(this, &EntryCompletion_signal_match_selected_info);
}

Glib::SignalProxy1< bool, const TreeModel::iterator& > EntryCompletion::signal_cursor_on_match()
{
  return Glib::SignalProxy1< bool, const TreeModel::iterator& >(this, &EntryCompletion_signal_cursor_on_match_info);
}



} // namespace Gtk

