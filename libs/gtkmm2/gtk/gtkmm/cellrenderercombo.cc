// Generated by gtkmmproc -- DO NOT MODIFY!

#include <gtkmm/cellrenderercombo.h>
#include <gtkmm/private/cellrenderercombo_p.h>

// -*- c++ -*-
/* $Id$ */

/* 
 *
 * Copyright 2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
#include <gtk/gtkcellrenderercombo.h>

namespace Gtk
{

Glib::PropertyProxy_Base CellRendererCombo::_property_renderable()
{
  return CellRendererText::_property_renderable();
}

} //namespace Gtk


namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::CellRendererCombo* wrap(GtkCellRendererCombo* object, bool take_copy)
{
  return dynamic_cast<Gtk::CellRendererCombo *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& CellRendererCombo_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &CellRendererCombo_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_cell_renderer_combo_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void CellRendererCombo_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

}


Glib::ObjectBase* CellRendererCombo_Class::wrap_new(GObject* o)
{
  return manage(new CellRendererCombo((GtkCellRendererCombo*)(o)));

}


/* The implementation: */

CellRendererCombo::CellRendererCombo(const Glib::ConstructParams& construct_params)
:
  Gtk::CellRendererText(construct_params)
{
  }

CellRendererCombo::CellRendererCombo(GtkCellRendererCombo* castitem)
:
  Gtk::CellRendererText((GtkCellRendererText*)(castitem))
{
  }

CellRendererCombo::~CellRendererCombo()
{
  destroy_();
}

CellRendererCombo::CppClassType CellRendererCombo::cellrenderercombo_class_; // initialize static member

GType CellRendererCombo::get_type()
{
  return cellrenderercombo_class_.init().get_type();
}

GType CellRendererCombo::get_base_type()
{
  return gtk_cell_renderer_combo_get_type();
}


CellRendererCombo::CellRendererCombo()
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::CellRendererText(Glib::ConstructParams(cellrenderercombo_class_.init()))
{
  }


Glib::PropertyProxy< Glib::RefPtr<Gtk::TreeModel> > CellRendererCombo::property_model() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gtk::TreeModel> >(this, "model");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gtk::TreeModel> > CellRendererCombo::property_model() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gtk::TreeModel> >(this, "model");
}

Glib::PropertyProxy<int> CellRendererCombo::property_text_column() 
{
  return Glib::PropertyProxy<int>(this, "text-column");
}

Glib::PropertyProxy_ReadOnly<int> CellRendererCombo::property_text_column() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "text-column");
}

Glib::PropertyProxy<bool> CellRendererCombo::property_has_entry() 
{
  return Glib::PropertyProxy<bool>(this, "has-entry");
}

Glib::PropertyProxy_ReadOnly<bool> CellRendererCombo::property_has_entry() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "has-entry");
}


} // namespace Gtk


