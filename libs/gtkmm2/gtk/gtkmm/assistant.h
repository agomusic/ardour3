// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKMM_ASSISTANT_H
#define _GTKMM_ASSISTANT_H


#include <glibmm.h>

/* $Id: assistant.hg,v 1.4 2006/06/13 17:16:26 murrayc Exp $ */

/* assistant.h
 *
 * Copyright (C) 2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/window.h>
#include <gdkmm/pixbuf.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkAssistant GtkAssistant;
typedef struct _GtkAssistantClass GtkAssistantClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class Assistant_Class; } // namespace Gtk
namespace Gtk
{

/** @addtogroup gtkmmEnums Enums and Flags */

/**
 * @ingroup gtkmmEnums
 */
enum AssistantPageType
{
  ASSISTANT_PAGE_CONTENT,
  ASSISTANT_PAGE_INTRO,
  ASSISTANT_PAGE_CONFIRM,
  ASSISTANT_PAGE_SUMMARY,
  ASSISTANT_PAGE_PROGRESS
};

} // namespace Gtk


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gtk::AssistantPageType> : public Glib::Value_Enum<Gtk::AssistantPageType>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{


/** TODO
 *
 * @newin2p10
 * @ingroup Dialogs
 */

class Assistant : public Window
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Assistant CppObjectType;
  typedef Assistant_Class CppClassType;
  typedef GtkAssistant BaseObjectType;
  typedef GtkAssistantClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~Assistant();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class Assistant_Class;
  static CppClassType assistant_class_;

  // noncopyable
  Assistant(const Assistant&);
  Assistant& operator=(const Assistant&);

protected:
  explicit Assistant(const Glib::ConstructParams& construct_params);
  explicit Assistant(GtkAssistant* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkAssistant*       gobj()       { return reinterpret_cast<GtkAssistant*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkAssistant* gobj() const { return reinterpret_cast<GtkAssistant*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  virtual void on_prepare(Gtk::Widget* page);
  virtual void on_apply();
  virtual void on_close();
  virtual void on_cancel();
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


private:

  
public:
  Assistant();

  
  int get_current_page() const;
  
  void set_current_page(int page_num);
  
  int get_n_pages() const;
  
  Widget* get_nth_page(int page_num);
  
  const Widget* get_nth_page(int page_num) const;
  
  int prepend_page(Widget& page);
  
  int append_page(Widget& page);
  
  int insert_page(Widget& page, int position);
  
  typedef sigc::slot<int, int /* current_page */> SlotForwardPage;

  void set_forward_page_func(const SlotForwardPage& slot);
  

  void set_page_type(const Widget& page, AssistantPageType type);
  
  AssistantPageType  get_page_type(const Widget& page) const;
  
  void set_page_title(const Widget& page, const Glib::ustring& title);
  
  Glib::ustring get_page_title(const Widget& page) const;
  
  void set_page_header_image(const Widget& page, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);
  
  Glib::RefPtr<Gdk::Pixbuf> get_page_header_image(const Widget& page);
  
  Glib::RefPtr<const Gdk::Pixbuf> get_page_header_image(const Widget& page) const;
  
  void set_page_side_image(const Widget& page, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);
  
  Glib::RefPtr<Gdk::Pixbuf> get_page_side_image(const Widget& page);
  
  Glib::RefPtr<const Gdk::Pixbuf> get_page_side_image(const Widget& page) const;
  
  void set_page_complete(const Widget& page, bool complete = true);
  
  bool get_page_complete(const Widget& page) const;
  
  void add_action_widget(Widget& child);
  
  void remove_action_widget(Widget& child);
  
  void update_buttons_state();

  
/**
   * @par Prototype:
   * <tt>void %prepare(Gtk::Widget* page)</tt>
   */

  Glib::SignalProxy1< void,Gtk::Widget* > signal_prepare();

  
/**
   * @par Prototype:
   * <tt>void %apply()</tt>
   */

  Glib::SignalProxy0< void > signal_apply();

  
/**
   * @par Prototype:
   * <tt>void %close()</tt>
   */

  Glib::SignalProxy0< void > signal_close();

  
/**
   * @par Prototype:
   * <tt>void %cancel()</tt>
   */

  Glib::SignalProxy0< void > signal_cancel();


  //TODO: Child properties?


};

} // namespace Gtk


namespace Glib
{
  /** @relates Gtk::Assistant
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Gtk::Assistant* wrap(GtkAssistant* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_ASSISTANT_H */

