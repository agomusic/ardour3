// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtkmm/dialog.h>
#include <gtkmm/private/dialog_p.h>

#include <gtk/gtktypebuiltins.h>
// -*- c++ -*-
/* $Id$ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkdialog.h>

namespace Gtk
{

Dialog::Dialog(const Glib::ustring& title, Gtk::Window& parent, bool modal, bool use_separator)
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::Window(Glib::ConstructParams(dialog_class_.init(), "title",title.c_str(), (char*) 0))
{
  construct_(modal, use_separator);
  set_transient_for(parent);
}

Dialog::Dialog(const Glib::ustring& title, bool modal, bool use_separator)
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::Window(Glib::ConstructParams(dialog_class_.init(), "title",title.c_str(), (char*) 0))
{
  construct_(modal, use_separator);
}

void Dialog::construct_(bool modal, bool use_separator)
{
  set_modal(modal);
  set_has_separator(use_separator);
}

void Dialog::set_alternative_button_order_from_array(const Glib::ArrayHandle<int>& new_order)
{
  gtk_dialog_set_alternative_button_order_from_array(gobj(), new_order.size(), const_cast<int*>(new_order.data()));
}

} // namespace Gtk


namespace
{


static void Dialog_signal_response_callback(GtkDialog* self, gint p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,int > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
}

static const Glib::SignalProxyInfo Dialog_signal_response_info =
{
  "response",
  (GCallback) &Dialog_signal_response_callback,
  (GCallback) &Dialog_signal_response_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gtk::ResponseType>::value_type()
{
  return gtk_response_type_get_type();
}


namespace Glib
{

Gtk::Dialog* wrap(GtkDialog* object, bool take_copy)
{
  return dynamic_cast<Gtk::Dialog *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Dialog_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Dialog_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_dialog_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void Dialog_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  klass->response = &response_callback;
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void Dialog_Class::response_callback(GtkDialog* self, gint p0)
{
  CppObjectType *const obj = dynamic_cast<CppObjectType*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj && obj->is_derived_())
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try // Trap C++ exceptions which would normally be lost because this is a C callback.
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      // Call the virtual member method, which derived classes might override.
      obj->on_response(p0
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
  else
  {
    BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

    // Call the original underlying C function:
    if(base && base->response)
      (*base->response)(self, p0);
  }
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* Dialog_Class::wrap_new(GObject* o)
{
  return new Dialog((GtkDialog*)(o)); //top-level windows can not be manage()ed.

}


/* The implementation: */

Dialog::Dialog(const Glib::ConstructParams& construct_params)
:
  Gtk::Window(construct_params)
{
  }

Dialog::Dialog(GtkDialog* castitem)
:
  Gtk::Window((GtkWindow*)(castitem))
{
  }

Dialog::~Dialog()
{
  destroy_();
}

Dialog::CppClassType Dialog::dialog_class_; // initialize static member

GType Dialog::get_type()
{
  return dialog_class_.init().get_type();
}

GType Dialog::get_base_type()
{
  return gtk_dialog_get_type();
}


Dialog::Dialog()
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::Window(Glib::ConstructParams(dialog_class_.init()))
{
  }

void Dialog::add_action_widget(Widget& child, int response_id)
{
gtk_dialog_add_action_widget(gobj(), (child).gobj(), response_id); 
}

Button* Dialog::add_button(const Glib::ustring& button_text, int response_id)
{
  return Glib::wrap((GtkButton*)(gtk_dialog_add_button(gobj(), button_text.c_str(), response_id)));
}

Button* Dialog::add_button(const Gtk::StockID& stock_id, int response_id)
{
  return Glib::wrap((GtkButton*)(gtk_dialog_add_button(gobj(), (stock_id).get_c_str(), response_id)));
}

void Dialog::set_response_sensitive(int response_id, bool setting)
{
gtk_dialog_set_response_sensitive(gobj(), response_id, static_cast<int>(setting)); 
}

void Dialog::set_default_response(int response_id)
{
gtk_dialog_set_default_response(gobj(), response_id); 
}

int Dialog::get_response_for_widget(const Gtk::Widget& widget) const
{
  return gtk_dialog_get_response_for_widget(const_cast<GtkDialog*>(gobj()), const_cast<GtkWidget*>(widget.gobj()));
}

void Dialog::set_has_separator(bool setting)
{
gtk_dialog_set_has_separator(gobj(), static_cast<int>(setting)); 
}

bool Dialog::get_has_separator() const
{
  return gtk_dialog_get_has_separator(const_cast<GtkDialog*>(gobj()));
}

bool Dialog::alternative_button_order(const Glib::RefPtr<const Gdk::Screen>& screen)
{
  return gtk_alternative_dialog_button_order(const_cast<GdkScreen*>(Glib::unwrap<Gdk::Screen>(screen)));
}


void Dialog::response(int response_id)
{
gtk_dialog_response(gobj(), response_id); 
}

int Dialog::run()
{
  return gtk_dialog_run(gobj());
}

 VBox* Dialog::get_vbox()
{
  return Glib::wrap((GtkVBox*)(gobj()->vbox));
}

const VBox* Dialog::get_vbox() const
{
  return Glib::wrap((GtkVBox*)(gobj()->vbox));
}
 
 HButtonBox* Dialog::get_action_area()
{
  return Glib::wrap((GtkHButtonBox*)(gobj()->action_area));
}

const HButtonBox* Dialog::get_action_area() const
{
  return Glib::wrap((GtkHButtonBox*)(gobj()->action_area));
}
 

Glib::SignalProxy1< void,int > Dialog::signal_response()
{
  return Glib::SignalProxy1< void,int >(this, &Dialog_signal_response_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<bool> Dialog::property_has_separator() 
{
  return Glib::PropertyProxy<bool>(this, "has-separator");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Dialog::property_has_separator() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "has-separator");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void Gtk::Dialog::on_response(int response_id)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->response)
    (*base->response)(gobj(),response_id);
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gtk


