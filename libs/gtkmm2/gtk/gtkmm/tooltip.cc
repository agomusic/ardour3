// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtkmm/tooltip.h>
#include <gtkmm/private/tooltip_p.h>

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/*
 * Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtktooltip.h>

namespace Gtk
{

void Tooltip::trigger_tooltip_query(const Glib::RefPtr<Gdk::Display>& display)
{
  gtk_tooltip_trigger_tooltip_query(display->gobj());
}

} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::Tooltip> wrap(GtkTooltip* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::Tooltip>( dynamic_cast<Gtk::Tooltip*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Tooltip_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Tooltip_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_tooltip_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void Tooltip_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* Tooltip_Class::wrap_new(GObject* object)
{
  return new Tooltip((GtkTooltip*)object);
}


/* The implementation: */

GtkTooltip* Tooltip::gobj_copy()
{
  reference();
  return gobj();
}

Tooltip::Tooltip(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{}

Tooltip::Tooltip(GtkTooltip* castitem)
:
  Glib::Object((GObject*)(castitem))
{}

Tooltip::~Tooltip()
{}


Tooltip::CppClassType Tooltip::tooltip_class_; // initialize static member

GType Tooltip::get_type()
{
  return tooltip_class_.init().get_type();
}

GType Tooltip::get_base_type()
{
  return gtk_tooltip_get_type();
}


void Tooltip::set_markup(const Glib::ustring& markup)
{
gtk_tooltip_set_markup(gobj(), markup.c_str()); 
}

void Tooltip::set_text(const Glib::ustring& markup)
{
gtk_tooltip_set_text(gobj(), markup.c_str()); 
}

void Tooltip::set_icon(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
{
gtk_tooltip_set_icon(gobj(), Glib::unwrap(pixbuf)); 
}

void Tooltip::set_icon_from_stock(const StockID& stock_id, IconSize size)
{
gtk_tooltip_set_icon_from_stock(gobj(), (stock_id).get_c_str(), static_cast<GtkIconSize>(int(size))); 
}

void Tooltip::set_custom(Widget& custom_widget)
{
gtk_tooltip_set_custom(gobj(), (custom_widget).gobj()); 
}

void Tooltip::set_tip_area(const Gdk::Rectangle& rect)
{
gtk_tooltip_set_tip_area(gobj(), const_cast<GdkRectangle*>(rect.gobj())); 
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gtk


