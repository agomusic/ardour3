// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKMM_IMAGEMENUITEM_H
#define _GTKMM_IMAGEMENUITEM_H


#include <glibmm.h>

/* $Id$ */

/* checkmenuitem.h
 * 
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/menuitem.h>
#include <gtkmm/stockid.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkImageMenuItem GtkImageMenuItem;
typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class ImageMenuItem_Class; } // namespace Gtk
namespace Gtk
{

/** A menu item with an icon.
 * 
 * A GtkImageMenuItem is a menu item which has an icon next to the text label. Note that the
 * user can disable display of menu icons, so make sure to still fill in the text label.
 *
 * @ingroup Menus
 * @ingroup Widgets                                                                                                                                                S
 */

class ImageMenuItem : public MenuItem
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef ImageMenuItem CppObjectType;
  typedef ImageMenuItem_Class CppClassType;
  typedef GtkImageMenuItem BaseObjectType;
  typedef GtkImageMenuItemClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~ImageMenuItem();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class ImageMenuItem_Class;
  static CppClassType imagemenuitem_class_;

  // noncopyable
  ImageMenuItem(const ImageMenuItem&);
  ImageMenuItem& operator=(const ImageMenuItem&);

protected:
  explicit ImageMenuItem(const Glib::ConstructParams& construct_params);
  explicit ImageMenuItem(GtkImageMenuItem* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkImageMenuItem*       gobj()       { return reinterpret_cast<GtkImageMenuItem*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkImageMenuItem* gobj() const { return reinterpret_cast<GtkImageMenuItem*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


private:

public:

  ImageMenuItem();
  explicit ImageMenuItem(Widget& image, 
                         const Glib::ustring& label, bool mnemonic = false);
  explicit ImageMenuItem(const Glib::ustring& label, bool mnemonic = false);
  explicit ImageMenuItem(const StockID& id);  
  
  
  /** Sets the image of @a image_menu_item  to the given widget.
   * Note that it depends on the show-menu-images setting whether
   * the image will be displayed or not.
   * @param image A widget to set as the image for the menu item.
   */
  void set_image(Widget& image);
  
  /** Gets the widget that is currently set as the image of @a image_menu_item .
   * See set_image().
   * @return The widget set as image of @a image_menu_item .
   */
  Widget* get_image();
  
  /** Gets the widget that is currently set as the image of @a image_menu_item .
   * See set_image().
   * @return The widget set as image of @a image_menu_item .
   */
  const Widget* get_image() const;


};

} /* namespace Gtk */


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::ImageMenuItem
   */
  Gtk::ImageMenuItem* wrap(GtkImageMenuItem* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_IMAGEMENUITEM_H */

