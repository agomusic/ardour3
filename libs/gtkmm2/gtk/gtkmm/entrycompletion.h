// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKMM_ENTRYCOMPLETION_H
#define _GTKMM_ENTRYCOMPLETION_H

#include <glibmm.h>

/* $Id$ */

/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/widget.h>
#include <gtkmm/treemodel.h>
 

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkEntryCompletion GtkEntryCompletion;
typedef struct _GtkEntryCompletionClass GtkEntryCompletionClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class EntryCompletion_Class; } // namespace Gtk
namespace Gtk
{

class Entry;


class EntryCompletion : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef EntryCompletion CppObjectType;
  typedef EntryCompletion_Class CppClassType;
  typedef GtkEntryCompletion BaseObjectType;
  typedef GtkEntryCompletionClass BaseClassType;

private:  friend class EntryCompletion_Class;
  static CppClassType entrycompletion_class_;

private:
  // noncopyable
  EntryCompletion(const EntryCompletion&);
  EntryCompletion& operator=(const EntryCompletion&);

protected:
  explicit EntryCompletion(const Glib::ConstructParams& construct_params);
  explicit EntryCompletion(GtkEntryCompletion* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~EntryCompletion();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkEntryCompletion*       gobj()       { return reinterpret_cast<GtkEntryCompletion*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkEntryCompletion* gobj() const { return reinterpret_cast<GtkEntryCompletion*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkEntryCompletion* gobj_copy();

private:


protected:
  EntryCompletion();

public:
  
  static Glib::RefPtr<EntryCompletion> create();


  //Careful, this actually returns a GtkWidget*, so it might not always be a GtkEntry in future GTK+ versions.
  
  /** Gets the entry @a completion  has been attached to.
   * @return The entry @a completion  has been attached to.
   * 
   * Since: 2.4.
   */
  Entry* get_entry();
  
  /** Gets the entry @a completion  has been attached to.
   * @return The entry @a completion  has been attached to.
   * 
   * Since: 2.4.
   */
  const Entry* get_entry() const;

  
  /** Sets the model for a Gtk::EntryCompletion. If @a completion  already has
   * a model set, it will remove it before setting the new model.
   * If model is <tt>0</tt>, then it will unset the model.
   * 
   * Since: 2.4
   * @param model The Gtk::TreeModel.
   */
  void set_model(const Glib::RefPtr<TreeModel>& model);
  
  /** Returns the model the Gtk::EntryCompletion is using as data source.
   * Returns <tt>0</tt> if the model is unset.
   * @return A Gtk::TreeModel, or <tt>0</tt> if none is currently being used.
   * 
   * Since: 2.4.
   */
  Glib::RefPtr<TreeModel> get_model();
  
  /** Returns the model the Gtk::EntryCompletion is using as data source.
   * Returns <tt>0</tt> if the model is unset.
   * @return A Gtk::TreeModel, or <tt>0</tt> if none is currently being used.
   * 
   * Since: 2.4.
   */
  Glib::RefPtr<const TreeModel> get_model() const;

  /// For example, bool on_match(const Glib::ustring& key, const TreeModel::const_iterator& iter);
  typedef sigc::slot<bool, const Glib::ustring&, const TreeModel::const_iterator&> SlotMatch;
  
  void set_match_func(const SlotMatch& slot);
  
  
  /** Requires the length of the search key for @a completion  to be at least
   *  @a length . This is useful for long lists, where completing using a small
   * key takes a lot of time and will come up with meaningless results anyway
   * (ie, a too large dataset).
   * 
   * Since: 2.4
   * @param length The minimum length of the key in order to start completing.
   */
  void set_minimum_key_length(int length);
  
  /** Returns the minimum key length as set for @a completion .
   * @return The currently used minimum key length.
   * 
   * Since: 2.4.
   */
  int get_minimum_key_length() const;
  
  /** Requests a completion operation, or in other words a refiltering of the
   * current list with completions, using the current key. The completion list
   * view will be updated accordingly.
   * 
   * Since: 2.4
   */
  void complete();

  
  /** Requests a prefix insertion. 
   * 
   * Since: 2.6
   */
  void insert_prefix();

  //We reordered the parameters, compared to the C version, so that we can have method overloads without the index.

  // TODO: We would really like an insert() which before-inserts an iterator, like ListStore::insert(),
  // but there is no EntryCompletion::insert_before() for us to use.
  void insert_action_text(const Glib::ustring& text, int index);
  void prepend_action_text(const Glib::ustring& text);
  //TODO: Add append_action_text() somehow? It would be slow if we count the children each time. murrayc.
  
  void insert_action_markup(const Glib::ustring& markup, int index);
  void prepend_action_markup(const Glib::ustring& markup);
  

  //TODO: Change default - it would be nicer to delete the last action instead of the first.
  
  /** Deletes the action at @a index  from @a completion 's action list.
   * 
   * Since: 2.4
   * @param index The index of the item to Delete.
   */
  void delete_action(int index = 0);

  
  /** Sets whether the common prefix of the possible completions should
   * be automatically inserted in the entry.
   * 
   * Since: 2.6
   * @param inline_completion <tt>true</tt> to do inline completion.
   */
  void set_inline_completion(bool inline_completion = true);
  
  /** Returns whether the common prefix of the possible completions should
   * be automatically inserted in the entry.
   * @return <tt>true</tt> if inline completion is turned on
   * 
   * Since: 2.6.
   */
  bool get_inline_completion() const;
  
  /** Sets whether the completions should be presented in a popup window.
   * 
   * Since: 2.6
   * @param popup_completion <tt>true</tt> to do popup completion.
   */
  void set_popup_completion(bool popup_completion = true);
  
  /** Returns whether the completions should be presented in a popup window.
   * @return <tt>true</tt> if popup completion is turned on
   * 
   * Since: 2.6.
   */
  bool get_popup_completion() const;

  
  /** Convenience function for setting up the most used case of this code: a
   * completion list with just strings. This function will set up @a completion 
   * to have a list displaying all (and just) strings in the completion list,
   * and to get those strings from @a column  in the model of @a completion .
   * 
   * This functions creates and adds a Gtk::CellRendererText for the selected 
   * column. If you need to set the text column, but don't want the cell 
   * renderer, use Glib::object_set() to set the ::text_column property directly.
   * 
   * Since: 2.4
   * @param column The column in the model of @a completion  to get strings from.
   */
  void set_text_column(const TreeModelColumnBase& column);
  
  /** Convenience function for setting up the most used case of this code: a
   * completion list with just strings. This function will set up @a completion 
   * to have a list displaying all (and just) strings in the completion list,
   * and to get those strings from @a column  in the model of @a completion .
   * 
   * This functions creates and adds a Gtk::CellRendererText for the selected 
   * column. If you need to set the text column, but don't want the cell 
   * renderer, use Glib::object_set() to set the ::text_column property directly.
   * 
   * Since: 2.4
   * @param column The column in the model of @a completion  to get strings from.
   */
  void set_text_column(int column);
  
  /** Returns the column in the model of @a completion  to get strings from.
   * @return The column containing the strings
   * 
   * Since: 2.6.
   */
  int get_text_column();

  
  Glib::SignalProxy1< void,int > signal_action_activated();


  //We completely hand-code this signal because we want to change how the parameters are wrapped,
  //because we need both the iter and the model to make the C++ iter.
  

  /**
   * @par Prototype:
   * <tt>bool %match_selected(const TreeModel::iterator& iter)</tt>
   */
  Glib::SignalProxy1< bool, const TreeModel::iterator& > signal_match_selected();

  
  //We use no_default_handler for this, because we can not add a new vfunc to 2.5 without breaking ABI.
  //TODO: Remove no_default_handler when we do an ABI-break-with-parallel-install.
  

  Glib::SignalProxy1< bool,const Glib::ustring& > signal_insert_prefix();
 

protected:

  //Default Signal Handler:
  virtual bool on_match_selected(const TreeModel::iterator& iter);        


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  virtual void on_action_activated(int index);


};

} // namespace Gtk


namespace Glib
{
  /** @relates Gtk::EntryCompletion
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Glib::RefPtr<Gtk::EntryCompletion> wrap(GtkEntryCompletion* object, bool take_copy = false);
}


#endif /* _GTKMM_ENTRYCOMPLETION_H */

