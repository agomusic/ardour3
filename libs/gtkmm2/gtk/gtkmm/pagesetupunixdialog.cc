// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtkmm/pagesetupunixdialog.h>
#include <gtkmm/private/pagesetupunixdialog_p.h>

// -*- c++ -*-
/* Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkpagesetupunixdialog.h>

namespace Gtk
{

PageSetupUnixDialog::PageSetupUnixDialog(Gtk::Window& parent, const Glib::ustring& title)
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::Dialog(Glib::ConstructParams(pagesetupunixdialog_class_.init(), "title",title.c_str(), (char*) 0))
{
  set_transient_for(parent);
}

PageSetupUnixDialog::PageSetupUnixDialog(const Glib::ustring& title)
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::Dialog(Glib::ConstructParams(pagesetupunixdialog_class_.init(), "title",title.c_str(), (char*) 0))
{
}

} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::PageSetupUnixDialog* wrap(GtkPageSetupUnixDialog* object, bool take_copy)
{
  return dynamic_cast<Gtk::PageSetupUnixDialog *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& PageSetupUnixDialog_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PageSetupUnixDialog_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_page_setup_unix_dialog_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void PageSetupUnixDialog_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* PageSetupUnixDialog_Class::wrap_new(GObject* o)
{
  return manage(new PageSetupUnixDialog((GtkPageSetupUnixDialog*)(o)));

}


/* The implementation: */

PageSetupUnixDialog::PageSetupUnixDialog(const Glib::ConstructParams& construct_params)
:
  Gtk::Dialog(construct_params)
{
  }

PageSetupUnixDialog::PageSetupUnixDialog(GtkPageSetupUnixDialog* castitem)
:
  Gtk::Dialog((GtkDialog*)(castitem))
{
  }

PageSetupUnixDialog::~PageSetupUnixDialog()
{
  destroy_();
}

PageSetupUnixDialog::CppClassType PageSetupUnixDialog::pagesetupunixdialog_class_; // initialize static member

GType PageSetupUnixDialog::get_type()
{
  return pagesetupunixdialog_class_.init().get_type();
}

GType PageSetupUnixDialog::get_base_type()
{
  return gtk_page_setup_unix_dialog_get_type();
}


void PageSetupUnixDialog::set_page_setup(const Glib::RefPtr<PageSetup>& page_setup)
{
gtk_page_setup_unix_dialog_set_page_setup(gobj(), Glib::unwrap(page_setup)); 
}

Glib::RefPtr<PageSetup> PageSetupUnixDialog::get_page_setup()
{

  Glib::RefPtr<PageSetup> retvalue = Glib::wrap(gtk_page_setup_unix_dialog_get_page_setup(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const PageSetup> PageSetupUnixDialog::get_page_setup() const
{
  return const_cast<PageSetupUnixDialog*>(this)->get_page_setup();
}

void PageSetupUnixDialog::set_print_settings(const Glib::RefPtr<PrintSettings>& print_settings)
{
gtk_page_setup_unix_dialog_set_print_settings(gobj(), Glib::unwrap(print_settings)); 
}

Glib::RefPtr<PrintSettings> PageSetupUnixDialog::get_print_settings()
{

  Glib::RefPtr<PrintSettings> retvalue = Glib::wrap(gtk_page_setup_unix_dialog_get_print_settings(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const PrintSettings> PageSetupUnixDialog::get_print_settings() const
{
  return const_cast<PageSetupUnixDialog*>(this)->get_print_settings();
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gtk


