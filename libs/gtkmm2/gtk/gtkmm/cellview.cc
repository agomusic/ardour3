// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtkmm/cellview.h>
#include <gtkmm/private/cellview_p.h>

// -*- c++ -*-
/* $Id$ */

/* 
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/cellrenderertext.h>
#include <gtkmm/cellrendererpixbuf.h>
#include <gtk/gtkcellview.h>

namespace Gtk
{

CellView::CellView(const Glib::ustring& text, bool use_markup)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Widget(Glib::ConstructParams(cellview_class_.init()))
{
  Gtk::CellRendererText* cell = Gtk::manage(new Gtk::CellRendererText());

  if(use_markup)
  {
    #ifdef GLIBMM_PROPERTIES_ENABLED
    cell->property_markup() = text;
    #else
    cell->set_property("markup", text);
    #endif
  }
  else
  {
    #ifdef GLIBMM_PROPERTIES_ENABLED
    cell->property_text() = text;
    #else
    cell->set_property("text", text);
    #endif
  }

  pack_start(*cell);
}

CellView::CellView(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Widget(Glib::ConstructParams(cellview_class_.init()))
{
  Gtk::CellRendererPixbuf* cell = Gtk::manage(new Gtk::CellRendererPixbuf());

  #ifdef GLIBMM_PROPERTIES_ENABLED
  cell->property_pixbuf() = pixbuf;
  #else
  cell->set_property("pixbuf", (void*)(pixbuf->gobj()));
  #endif

  pack_start(*cell);
}


} //namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::CellView* wrap(GtkCellView* object, bool take_copy)
{
  return dynamic_cast<Gtk::CellView *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& CellView_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &CellView_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_cell_view_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  CellLayout::add_interface(get_type());
  }

  return *this;
}

void CellView_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* CellView_Class::wrap_new(GObject* o)
{
  return manage(new CellView((GtkCellView*)(o)));

}


/* The implementation: */

CellView::CellView(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

CellView::CellView(GtkCellView* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }

CellView::~CellView()
{
  destroy_();
}

CellView::CppClassType CellView::cellview_class_; // initialize static member

GType CellView::get_type()
{
  return cellview_class_.init().get_type();
}

GType CellView::get_base_type()
{
  return gtk_cell_view_get_type();
}


CellView::CellView()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Widget(Glib::ConstructParams(cellview_class_.init()))
{
  }

void CellView::set_model(const Glib::RefPtr<TreeModel>& model)
{
gtk_cell_view_set_model(gobj(), Glib::unwrap(model)); 
}

void CellView::set_displayed_row(const TreeModel::Path& path)
{
gtk_cell_view_set_displayed_row(gobj(), const_cast<GtkTreePath*>((path).gobj())); 
}

TreeModel::Path CellView::get_displayed_row() const
{
  return Gtk::TreePath(gtk_cell_view_get_displayed_row(const_cast<GtkCellView*>(gobj())), false);
}

bool CellView::get_size_of_row(const TreeModel::Path& path, Requisition& requisition) const
{
  return gtk_cell_view_get_size_of_row(const_cast<GtkCellView*>(gobj()), const_cast<GtkTreePath*>((path).gobj()), (GtkRequisition*)(&requisition));
}

void CellView::set_background_color(const Gdk::Color& color)
{
gtk_cell_view_set_background_color(gobj(), (color).gobj()); 
}

Glib::ListHandle<CellRenderer*> CellView::get_cell_renderers()
{
  return Glib::ListHandle<CellRenderer*>(gtk_cell_view_get_cell_renderers(gobj()), Glib::OWNERSHIP_SHALLOW);
}

Glib::ListHandle<const CellRenderer*> CellView::get_cell_renderers() const
{
  return Glib::ListHandle<const CellRenderer*>(gtk_cell_view_get_cell_renderers(const_cast<GtkCellView*>(gobj())), Glib::OWNERSHIP_SHALLOW);
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gtk


