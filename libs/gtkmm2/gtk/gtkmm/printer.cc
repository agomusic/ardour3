// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtkmm/printer.h>
#include <gtkmm/private/printer_p.h>

// -*- c++ -*-
/* Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkprinter.h>

// This Signal Proxy allows the C++ coder to specify a sigc::slot instead of a static function.

static gboolean SignalProxy_Custom_gtk_callback(GtkPrinter* gtk_printer, gpointer data)
{
  const Gtk::SlotPrinterEnumerator* the_slot = static_cast<Gtk::SlotPrinterEnumerator*>(data);

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  try
  {
  #endif //GLIBMM_EXCEPTIONS_ENABLED
    // Create a suitable C++ instance to pass to the C++ method;
    Glib::RefPtr<Gtk::Printer> printer = Glib::wrap(gtk_printer);

    return (*the_slot)(printer);
  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
    return false; // arbitrary default;
  }
  #endif //GLIBMM_EXCEPTIONS_ENABLED
}

static void SignalProxy_Custom_gtk_callback_destroy(void* data)
{
  delete static_cast<Gtk::SlotPrinterEnumerator*>(data);
}

namespace Gtk
{

bool Printer::equal(const Glib::RefPtr<Printer>& other) const
{
  return (static_cast<bool>(gtk_printer_compare(const_cast<GtkPrinter*>(this->gobj()),
                                                const_cast<GtkPrinter*>(other->gobj()))));
}

void enumerate_printers(const SlotPrinterEnumerator& slot, bool wait)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  // It will be deleted when SignalProxy_Custom_gtk_callback_destroy() is called.
  SlotPrinterEnumerator* slot_copy = new SlotPrinterEnumerator(slot);
      
  gtk_enumerate_printers(&SignalProxy_Custom_gtk_callback,
                         slot_copy,
                         &SignalProxy_Custom_gtk_callback_destroy,
                         static_cast<int>(wait));
}

} // namespace Gtk

namespace
{


static void Printer_signal_details_acquired_callback(GtkPrinter* self, gboolean p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,bool > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
}

static const Glib::SignalProxyInfo Printer_signal_details_acquired_info =
{
  "details_acquired",
  (GCallback) &Printer_signal_details_acquired_callback,
  (GCallback) &Printer_signal_details_acquired_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::Printer> wrap(GtkPrinter* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::Printer>( dynamic_cast<Gtk::Printer*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Printer_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Printer_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_printer_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void Printer_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  klass->details_acquired = &details_acquired_callback;
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void Printer_Class::details_acquired_callback(GtkPrinter* self, gboolean p0)
{
  CppObjectType *const obj = dynamic_cast<CppObjectType*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj && obj->is_derived_())
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try // Trap C++ exceptions which would normally be lost because this is a C callback.
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      // Call the virtual member method, which derived classes might override.
      obj->on_details_acquired(p0
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
  else
  {
    BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

    // Call the original underlying C function:
    if(base && base->details_acquired)
      (*base->details_acquired)(self, p0);
  }
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* Printer_Class::wrap_new(GObject* object)
{
  return new Printer((GtkPrinter*)object);
}


/* The implementation: */

GtkPrinter* Printer::gobj_copy()
{
  reference();
  return gobj();
}

Printer::Printer(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{}

Printer::Printer(GtkPrinter* castitem)
:
  Glib::Object((GObject*)(castitem))
{}

Printer::~Printer()
{}


Printer::CppClassType Printer::printer_class_; // initialize static member

GType Printer::get_type()
{
  return printer_class_.init().get_type();
}

GType Printer::get_base_type()
{
  return gtk_printer_get_type();
}


Glib::ustring Printer::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_printer_get_name(const_cast<GtkPrinter*>(gobj())));
}

Glib::ustring Printer::get_state_message() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_printer_get_state_message(const_cast<GtkPrinter*>(gobj())));
}

Glib::ustring Printer::get_description() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_printer_get_description(const_cast<GtkPrinter*>(gobj())));
}

Glib::ustring Printer::get_location() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_printer_get_location(const_cast<GtkPrinter*>(gobj())));
}

Glib::ustring Printer::get_icon_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_printer_get_icon_name(const_cast<GtkPrinter*>(gobj())));
}

int Printer::get_job_count() const
{
  return gtk_printer_get_job_count(const_cast<GtkPrinter*>(gobj()));
}

bool Printer::is_active() const
{
  return gtk_printer_is_active(const_cast<GtkPrinter*>(gobj()));
}

bool Printer::is_virtual() const
{
  return gtk_printer_is_virtual(const_cast<GtkPrinter*>(gobj()));
}

bool Printer::is_default() const
{
  return gtk_printer_is_default(const_cast<GtkPrinter*>(gobj()));
}

bool Printer::accepts_pdf() const
{
  return gtk_printer_accepts_pdf(const_cast<GtkPrinter*>(gobj()));
}

bool Printer::accepts_ps() const
{
  return gtk_printer_accepts_ps(const_cast<GtkPrinter*>(gobj()));
}


Glib::SignalProxy1< void,bool > Printer::signal_details_acquired()
{
  return Glib::SignalProxy1< void,bool >(this, &Printer_signal_details_acquired_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Printer::property_name() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Printer::property_is_virtual() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "is-virtual");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Printer::property_state_message() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "state-message");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Printer::property_location() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "location");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> Printer::property_icon_name() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "icon-name");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> Printer::property_job_count() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "job-count");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Printer::property_accepts_pdf() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "accepts-pdf");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> Printer::property_accepts_ps() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "accepts-ps");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void Gtk::Printer::on_details_acquired(bool success)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->details_acquired)
    (*base->details_acquired)(gobj(),static_cast<int>(success));
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gtk


