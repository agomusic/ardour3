/* $Id: selection.hg,v 1.2 2004/01/02 09:56:43 murrayc Exp $ */

/* Copyright (C) 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_DEFS(atkmm,atk)
_PINCLUDE(atk/atkobject.h)

#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C"
{
  typedef struct _AtkSelectionIface AtkSelectionIface;
  typedef struct _AtkSelection      AtkSelection;
}
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Atk
{

class Object;

/** The ATK interface implemented by container objects whose Atk::Object children can be selected.
 * This should be implemented by UI components with children which are exposed by Atk::Object::ref_child and
 * Atk::Object::get_n_children, if the use of the parent UI component ordinarily involves selection of one or
 * more of the objects corresponding to those AtkObject children - for example, selectable lists.
 *
 * Note that other types of "selection" (for instance text selection) are accomplished a other ATK interfaces -
 * Atk::Selection is limited to the selection/deselection of children. 
 */
class Selection : public Glib::Interface
{
  _CLASS_INTERFACE(Selection, AtkSelection, ATK_SELECTION, AtkSelectionIface)

public:
  _WRAP_METHOD(bool add_selection(int i), atk_selection_add_selection)
  _WRAP_METHOD(bool clear_selection(), atk_selection_clear_selection)
  _WRAP_METHOD(Glib::RefPtr<Atk::Object> get_selection(int i), atk_selection_ref_selection)
  _WRAP_METHOD(int get_selection_count() const, atk_selection_get_selection_count)
  _WRAP_METHOD(bool is_child_selected(int i) const, atk_selection_is_child_selected)
  _WRAP_METHOD(bool remove_selection(int i), atk_selection_remove_selection)
  _WRAP_METHOD(bool select_all_selection(), atk_selection_select_all_selection)

  _WRAP_SIGNAL(void selection_changed(), "selection_changed")

protected:
  _WRAP_VFUNC(bool add_selection(int i), add_selection)
  _WRAP_VFUNC(bool clear_selection(), clear_selection)
  _WRAP_VFUNC(Glib::RefPtr<Atk::Object> get_selection(int i), ref_selection, refreturn_ctype)
  _WRAP_VFUNC(int get_selection_count() const, get_selection_count)
  _WRAP_VFUNC(bool is_child_selected(int i) const, is_child_selected)
  _WRAP_VFUNC(bool remove_selection(int i), remove_selection)
  _WRAP_VFUNC(bool select_all_selection(), select_all_selection)
};

} // namespace Atk

