// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _LIBGNOMECANVASMM_CANVAS_P_H
#define _LIBGNOMECANVASMM_CANVAS_P_H
#include <gtkmm/private/layout_p.h>

#include <glibmm/class.h>

namespace Gnome
{

namespace Canvas
{

class Canvas_Class : public Glib::Class
{
public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Canvas CppObjectType;
  typedef GnomeCanvas BaseObjectType;
  typedef GnomeCanvasClass BaseClassType;
  typedef Gtk::Layout_Class CppClassParent;
  typedef GtkLayoutClass BaseClassParent;

  friend class Canvas;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  const Glib::Class& init();

  static void class_init_function(void* g_class, void* class_data);

  static Glib::ObjectBase* wrap_new(GObject*);

protected:

  //Callbacks (default signal handlers):
  //These will call the *_impl member methods, which will then call the existing default signal callbacks, if any.
  //You could prevent the original default signal handlers being called by overriding the *_impl method.
  static void draw_background_callback(GnomeCanvas* self, GdkDrawable* p0, gint p1, gint p2, gint p3, gint p4);
  static void render_background_callback(GnomeCanvas* self, GnomeCanvasBuf* p0);

  //Callbacks (virtual functions):
  static void request_update_vfunc_callback(GnomeCanvas* self);
};


} // namespace Canvas

} // namespace Gnome

#endif /* _LIBGNOMECANVASMM_CANVAS_P_H */

