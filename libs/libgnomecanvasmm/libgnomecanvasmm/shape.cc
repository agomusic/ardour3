// Generated by gtkmmproc -- DO NOT MODIFY!

#include <libgnomecanvasmm/shape.h>
#include <libgnomecanvasmm/private/shape_p.h>

/* shape.cc
 *
 * Copyright (C) 2002 The libgnomecanvasmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace
{
} // anonymous namespace


namespace Glib
{

Gnome::Canvas::Shape* wrap(GnomeCanvasShape* object, bool take_copy)
{
  return dynamic_cast<Gnome::Canvas::Shape *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gnome
{

namespace Canvas
{


/* The *_Class implementation: */

const Glib::Class& Shape_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Shape_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gnome_canvas_shape_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void Shape_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

}


Glib::ObjectBase* Shape_Class::wrap_new(GObject* o)
{
  return manage(new Shape((GnomeCanvasShape*)(o)));

}


/* The implementation: */

Shape::Shape(const Glib::ConstructParams& construct_params)
:
  Item(construct_params)
{
  }

Shape::Shape(GnomeCanvasShape* castitem)
:
  Item((GnomeCanvasItem*)(castitem))
{
  }

Shape::~Shape()
{
  destroy_();
}

Shape::CppClassType Shape::shape_class_; // initialize static member

GType Shape::get_type()
{
  return shape_class_.init().get_type();
}

GType Shape::get_base_type()
{
  return gnome_canvas_shape_get_type();
}


Glib::PropertyProxy_WriteOnly<Glib::ustring> Shape::property_fill_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "fill-color");
}

Glib::PropertyProxy_ReadOnly<Glib::ustring> Shape::property_fill_color() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "fill-color");
}

Glib::PropertyProxy<Gdk::Color> Shape::property_fill_color_gdk() 
{
  return Glib::PropertyProxy<Gdk::Color>(this, "fill-color-gdk");
}

Glib::PropertyProxy_ReadOnly<Gdk::Color> Shape::property_fill_color_gdk() const
{
  return Glib::PropertyProxy_ReadOnly<Gdk::Color>(this, "fill-color-gdk");
}

Glib::PropertyProxy<guint> Shape::property_fill_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "fill-color-rgba");
}

Glib::PropertyProxy_ReadOnly<guint> Shape::property_fill_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "fill-color-rgba");
}

Glib::PropertyProxy_WriteOnly<Glib::ustring> Shape::property_outline_color() 
{
  return Glib::PropertyProxy_WriteOnly<Glib::ustring>(this, "outline-color");
}

Glib::PropertyProxy_ReadOnly<Glib::ustring> Shape::property_outline_color() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "outline-color");
}

Glib::PropertyProxy<Gdk::Color> Shape::property_outline_color_gdk() 
{
  return Glib::PropertyProxy<Gdk::Color>(this, "outline-color-gdk");
}

Glib::PropertyProxy_ReadOnly<Gdk::Color> Shape::property_outline_color_gdk() const
{
  return Glib::PropertyProxy_ReadOnly<Gdk::Color>(this, "outline-color-gdk");
}

Glib::PropertyProxy<guint> Shape::property_outline_color_rgba() 
{
  return Glib::PropertyProxy<guint>(this, "outline-color-rgba");
}

Glib::PropertyProxy_ReadOnly<guint> Shape::property_outline_color_rgba() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "outline-color-rgba");
}

Glib::PropertyProxy< Glib::RefPtr<Gdk::Bitmap> > Shape::property_fill_stipple() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gdk::Bitmap> >(this, "fill-stipple");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Bitmap> > Shape::property_fill_stipple() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Bitmap> >(this, "fill-stipple");
}

Glib::PropertyProxy< Glib::RefPtr<Gdk::Bitmap> > Shape::property_outline_stipple() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gdk::Bitmap> >(this, "outline-stipple");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Bitmap> > Shape::property_outline_stipple() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Bitmap> >(this, "outline-stipple");
}

Glib::PropertyProxy<guint> Shape::property_width_pixels() 
{
  return Glib::PropertyProxy<guint>(this, "width-pixels");
}

Glib::PropertyProxy_ReadOnly<guint> Shape::property_width_pixels() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "width-pixels");
}

Glib::PropertyProxy_WriteOnly<double> Shape::property_width_units() 
{
  return Glib::PropertyProxy_WriteOnly<double>(this, "width-units");
}

Glib::PropertyProxy_ReadOnly<double> Shape::property_width_units() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "width-units");
}

Glib::PropertyProxy<Gdk::CapStyle> Shape::property_cap_style() 
{
  return Glib::PropertyProxy<Gdk::CapStyle>(this, "cap-style");
}

Glib::PropertyProxy_ReadOnly<Gdk::CapStyle> Shape::property_cap_style() const
{
  return Glib::PropertyProxy_ReadOnly<Gdk::CapStyle>(this, "cap-style");
}

Glib::PropertyProxy<Gdk::JoinStyle> Shape::property_join_style() 
{
  return Glib::PropertyProxy<Gdk::JoinStyle>(this, "join-style");
}

Glib::PropertyProxy_ReadOnly<Gdk::JoinStyle> Shape::property_join_style() const
{
  return Glib::PropertyProxy_ReadOnly<Gdk::JoinStyle>(this, "join-style");
}

Glib::PropertyProxy<guint> Shape::property_wind() 
{
  return Glib::PropertyProxy<guint>(this, "wind");
}

Glib::PropertyProxy_ReadOnly<guint> Shape::property_wind() const
{
  return Glib::PropertyProxy_ReadOnly<guint>(this, "wind");
}

Glib::PropertyProxy<double> Shape::property_miterlimit() 
{
  return Glib::PropertyProxy<double>(this, "miterlimit");
}

Glib::PropertyProxy_ReadOnly<double> Shape::property_miterlimit() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "miterlimit");
}

Glib::PropertyProxy<ArtVpathDash*> Shape::property_dash() 
{
  return Glib::PropertyProxy<ArtVpathDash*>(this, "dash");
}

Glib::PropertyProxy_ReadOnly<ArtVpathDash*> Shape::property_dash() const
{
  return Glib::PropertyProxy_ReadOnly<ArtVpathDash*>(this, "dash");
}


} // namespace Canvas

} // namespace Gnome


