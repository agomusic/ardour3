// Generated by gtkmmproc -- DO NOT MODIFY!

#include <libgnomecanvasmm/pixbuf.h>
#include <libgnomecanvasmm/private/pixbuf_p.h>

/* $Id$ */

/* pixbuf.cc
 *
 * Copyright (C) 2002 The libgnomecanvasmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Gnome
{

namespace Canvas
{

Pixbuf::Pixbuf (Group& parent, 
                double x, double y, 
                const Glib::RefPtr<Gdk::Pixbuf>& image)
  : Item (GNOME_CANVAS_ITEM (g_object_new (get_type (), NULL)))
{
  item_construct (parent);
  set ("x", x, 
       "y", y, 
       "pixbuf", image->gobj (),
       "width", (double) gdk_pixbuf_get_width (image->gobj ()),
       "height", (double) gdk_pixbuf_get_height (image->gobj ()),
       NULL);
}


Pixbuf::Pixbuf (Group& parent)
  : Item (GNOME_CANVAS_ITEM (g_object_new (get_type (), NULL)))
{
  item_construct (parent);
}


}

}


namespace
{
} // anonymous namespace


namespace Glib
{

Gnome::Canvas::Pixbuf* wrap(GnomeCanvasPixbuf* object, bool take_copy)
{
  return dynamic_cast<Gnome::Canvas::Pixbuf *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gnome
{

namespace Canvas
{


/* The *_Class implementation: */

const Glib::Class& Pixbuf_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Pixbuf_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gnome_canvas_pixbuf_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void Pixbuf_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

}


Glib::ObjectBase* Pixbuf_Class::wrap_new(GObject* o)
{
  return manage(new Pixbuf((GnomeCanvasPixbuf*)(o)));

}


/* The implementation: */

Pixbuf::Pixbuf(const Glib::ConstructParams& construct_params)
:
  Item(construct_params)
{
  }

Pixbuf::Pixbuf(GnomeCanvasPixbuf* castitem)
:
  Item((GnomeCanvasItem*)(castitem))
{
  }

Pixbuf::~Pixbuf()
{
  destroy_();
}

Pixbuf::CppClassType Pixbuf::pixbuf_class_; // initialize static member

GType Pixbuf::get_type()
{
  return pixbuf_class_.init().get_type();
}

GType Pixbuf::get_base_type()
{
  return gnome_canvas_pixbuf_get_type();
}


Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> > Pixbuf::property_pixbuf() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >(this, "pixbuf");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> > Pixbuf::property_pixbuf() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >(this, "pixbuf");
}

Glib::PropertyProxy<double> Pixbuf::property_width() 
{
  return Glib::PropertyProxy<double>(this, "width");
}

Glib::PropertyProxy_ReadOnly<double> Pixbuf::property_width() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "width");
}

Glib::PropertyProxy<bool> Pixbuf::property_width_set() 
{
  return Glib::PropertyProxy<bool>(this, "width-set");
}

Glib::PropertyProxy_ReadOnly<bool> Pixbuf::property_width_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "width-set");
}

Glib::PropertyProxy<bool> Pixbuf::property_width_in_pixels() 
{
  return Glib::PropertyProxy<bool>(this, "width-in-pixels");
}

Glib::PropertyProxy_ReadOnly<bool> Pixbuf::property_width_in_pixels() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "width-in-pixels");
}

Glib::PropertyProxy<double> Pixbuf::property_height() 
{
  return Glib::PropertyProxy<double>(this, "height");
}

Glib::PropertyProxy_ReadOnly<double> Pixbuf::property_height() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "height");
}

Glib::PropertyProxy<bool> Pixbuf::property_height_set() 
{
  return Glib::PropertyProxy<bool>(this, "height-set");
}

Glib::PropertyProxy_ReadOnly<bool> Pixbuf::property_height_set() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "height-set");
}

Glib::PropertyProxy<bool> Pixbuf::property_height_in_pixels() 
{
  return Glib::PropertyProxy<bool>(this, "height-in-pixels");
}

Glib::PropertyProxy_ReadOnly<bool> Pixbuf::property_height_in_pixels() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "height-in-pixels");
}

Glib::PropertyProxy<double> Pixbuf::property_x() 
{
  return Glib::PropertyProxy<double>(this, "x");
}

Glib::PropertyProxy_ReadOnly<double> Pixbuf::property_x() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "x");
}

Glib::PropertyProxy<bool> Pixbuf::property_x_in_pixels() 
{
  return Glib::PropertyProxy<bool>(this, "x-in-pixels");
}

Glib::PropertyProxy_ReadOnly<bool> Pixbuf::property_x_in_pixels() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "x-in-pixels");
}

Glib::PropertyProxy<double> Pixbuf::property_y() 
{
  return Glib::PropertyProxy<double>(this, "y");
}

Glib::PropertyProxy_ReadOnly<double> Pixbuf::property_y() const
{
  return Glib::PropertyProxy_ReadOnly<double>(this, "y");
}

Glib::PropertyProxy<bool> Pixbuf::property_y_in_pixels() 
{
  return Glib::PropertyProxy<bool>(this, "y-in-pixels");
}

Glib::PropertyProxy_ReadOnly<bool> Pixbuf::property_y_in_pixels() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "y-in-pixels");
}

Glib::PropertyProxy<Gtk::AnchorType> Pixbuf::property_anchor() 
{
  return Glib::PropertyProxy<Gtk::AnchorType>(this, "anchor");
}

Glib::PropertyProxy_ReadOnly<Gtk::AnchorType> Pixbuf::property_anchor() const
{
  return Glib::PropertyProxy_ReadOnly<Gtk::AnchorType>(this, "anchor");
}


} // namespace Canvas

} // namespace Gnome


