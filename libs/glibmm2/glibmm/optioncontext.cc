// Generated by gtkmmproc -- DO NOT MODIFY!

#include <glibmm/optioncontext.h>
#include <glibmm/private/optioncontext_p.h>

// -*- c++ -*-
/* $Id$ */

/* Copyright (C) 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/utility.h>
#include <glib/goption.h>

namespace Glib
{


OptionContext::OptionContext(const Glib::ustring& parameter_string)
: gobject_( g_option_context_new(parameter_string.c_str()) ),
  has_ownership_(true)
{
}

OptionContext::OptionContext(GOptionContext* castitem, bool take_ownership)
: gobject_(castitem),
  has_ownership_(take_ownership)
{
}

OptionContext::~OptionContext()
{
  if(has_ownership_)
    g_option_context_free(gobj());
    
  gobject_ = 0;
}

void OptionContext::add_group(OptionGroup& group)
{
  //Strangely, GObjectContext actually takes ownership of the GOptionGroup, deleting it later.
  g_option_context_add_group(gobj(), (group).gobj_give_ownership());
}

void OptionContext::set_main_group(OptionGroup& group)
{
  //Strangely, GObjectContext actually takes ownership of the GOptionGroup, deleting it later.
  g_option_context_set_main_group(gobj(), (group).gobj_give_ownership());
}


/*
OptionGroup OptionContext::get_main_group() const
{
  const GOptionGroup* cobj = g_option_context_get_main_group(const_cast<GOptionContext*>( gobj()) );
  OptionGroup cppObj(const_cast<GOptionGroup*>(cobj), true); // take_copy
  return cppObj;
}

*/

  
} // namespace Glib


namespace
{
} // anonymous namespace


Glib::OptionError::OptionError(Glib::OptionError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (G_OPTION_ERROR, error_code, error_message)
{}

Glib::OptionError::OptionError(GError* gobject)
:
  Glib::Error (gobject)
{}

Glib::OptionError::Code Glib::OptionError::code() const
{
  return static_cast<Code>(Glib::Error::code());
}

void Glib::OptionError::throw_func(GError* gobject)
{
  throw Glib::OptionError(gobject);
}


namespace Glib
{


void OptionContext::set_help_enabled(bool help_enabled)
{
  g_option_context_set_help_enabled(gobj(), static_cast<int>(help_enabled));
}

bool OptionContext::get_help_enabled() const
{
  return g_option_context_get_help_enabled(const_cast<GOptionContext*>(gobj()));
}

void OptionContext::set_ignore_unknown_options(bool ignore_unknown)
{
  g_option_context_set_ignore_unknown_options(gobj(), static_cast<int>(ignore_unknown));
}

bool OptionContext::get_ignore_unknown_options() const
{
  return g_option_context_get_ignore_unknown_options(const_cast<GOptionContext*>(gobj()));
}

bool OptionContext::parse(int& argc, char**& argv)
{
  GError *error = 0;
  bool retvalue = g_option_context_parse(gobj(), &argc, &(argv), &(error));
  if(error) ::Glib::Error::throw_exception(error);
  return retvalue;
}


} // namespace Glib


