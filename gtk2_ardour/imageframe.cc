// Generated by gtkmmproc -- DO NOT MODIFY!

#include "imageframe.h"
#include "imageframe_p.h"
#include <libgnomecanvasmm/private/shape_p.h>

/* $Id$ */

/* rect.c
 *
 * Copyright (C) 1998 EMC Capital Management Inc.
 * Developed by Havoc Pennington <hp@pobox.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gnome
{

namespace Canvas
{

ImageFrame::ImageFrame(Group& parentx, ArtPixBuf* pbuf, double x, double y, Gtk::AnchorType anchor, double w, double h)
: Item(GNOME_CANVAS_ITEM(g_object_new(get_type(),0)))
{
  item_construct(parentx);
  set("pixbuf", pbuf, "x", x,"y", y,"width", w,"height", h, 0);
}

ImageFrame::ImageFrame(Group& parentx)
: Item(GNOME_CANVAS_ITEM(g_object_new(get_type(),0)))
{
  item_construct(parentx);
}

} /* namespace Canvas */
} /* namespace Gnome */


namespace
{
} // anonymous namespace


namespace Glib
{

Gnome::Canvas::ImageFrame* wrap(GnomeCanvasImageFrame* object, bool take_copy)
{
    return dynamic_cast<Gnome::Canvas::ImageFrame *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gnome
{

namespace Canvas
{


/* The *_Class implementation: */

const Glib::Class& ImageFrame_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ImageFrame_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gnome_canvas_imageframe_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void ImageFrame_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

}

Glib::ObjectBase* ImageFrame_Class::wrap_new(GObject* o)
{
  return manage(new ImageFrame((GnomeCanvasImageFrame*)(o)));

}

/* The implementation: */

ImageFrame::ImageFrame(const Glib::ConstructParams& construct_params)
: Item(construct_params)
{
  }

ImageFrame::ImageFrame(GnomeCanvasImageFrame* castitem)
: Item ((GnomeCanvasItem*)(castitem))
{
}

ImageFrame::~ImageFrame()
{
  destroy_();
}

ImageFrame::CppClassType ImageFrame::rect_class_; // initialize static member

GType ImageFrame::get_type()
{
  return rect_class_.init().get_type();
}

GType ImageFrame::get_base_type()
{
  return gnome_canvas_imageframe_get_type();
}

Glib::PropertyProxy<double> ImageFrame::property_x()
{
	return Glib::PropertyProxy<double> (this, "x");
}
Glib::PropertyProxy_ReadOnly<double> ImageFrame::property_x() const
{
	return Glib::PropertyProxy_ReadOnly<double> (this, "x");
}
Glib::PropertyProxy<double> ImageFrame::property_y()
{
	return Glib::PropertyProxy<double> (this, "y");
}
Glib::PropertyProxy_ReadOnly<double> ImageFrame::property_y() const
{
	return Glib::PropertyProxy_ReadOnly<double> (this, "y");
}
Glib::PropertyProxy<double> ImageFrame::property_width()
{
	return Glib::PropertyProxy<double> (this, "width");
}
Glib::PropertyProxy_ReadOnly<double> ImageFrame::property_width() const
{
	return Glib::PropertyProxy_ReadOnly<double> (this, "width");
}
Glib::PropertyProxy<double> ImageFrame::property_drawwidth()
{
	return Glib::PropertyProxy<double> (this, "drawwidth");
}
Glib::PropertyProxy_ReadOnly<double> ImageFrame::property_drawwidth() const
{
	return Glib::PropertyProxy_ReadOnly<double> (this, "drawwidth");
}

Glib::PropertyProxy<Gtk::AnchorType> ImageFrame::property_anchor() 
{
  return Glib::PropertyProxy<Gtk::AnchorType>(this, "anchor");
}

Glib::PropertyProxy_ReadOnly<Gtk::AnchorType> ImageFrame::property_anchor() const
{
  return Glib::PropertyProxy_ReadOnly<Gtk::AnchorType>(this, "anchor");
}



} // namespace Canvas

} // namespace Gnome
