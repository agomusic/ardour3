# -*- python -*-

import os
import os.path
import glob

Import('env install_prefix final_prefix config_prefix libraries i18n ardour_version')

gtkardour = env.Copy()
gtkmmtests = env.Copy()

#
# this defines the version number of the GTK interface to ardour
#

domain = 'gtk2_ardour'

gtkardour.Append(DOMAIN=domain, MAJOR=1,MINOR=0,MICRO=2)
gtkardour.Append(CCFLAGS="-DPACKAGE=\\\"" + domain + "\\\"")
gtkardour.Append(CXXFLAGS="-DPACKAGE=\\\"" + domain + "\\\"")
gtkardour.Append(CXXFLAGS=["-DLIBSIGC_DISABLE_DEPRECATED", "-DGLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED", "-DGLIBMM_EXCEPTIONS_ENABLED", "-DGLIBMM_PROPERTIES_ENABLED"])
gtkardour.Append(CPPPATH="#/")  # for top level svn_revision.h
#gtkardour.Append(CXXFLAGS="-DFLOWCANVAS_AA")
gtkardour.Append(PACKAGE=domain)
gtkardour.Append(POTFILE=domain + '.pot')

if gtkardour['DIST_TARGET'] == 'panther' or gtkardour['DIST_TARGET'] == 'tiger':
       gtkardour.Append (LINKFLAGS="-Xlinker -headerpad -Xlinker 2048")

gtkardour.Merge ([
    libraries['ardour'],
    libraries['ardour_cp'],
    libraries['gtkmm2ext'],
    libraries['midi++2'],
    libraries['pbd'],
    libraries['gtkmm2'],
    libraries['glib2'],
    libraries['libgnomecanvas2'],
    libraries['libgnomecanvasmm'],
    libraries['sysmidi'],
    libraries['sndfile-ardour'],
    libraries['flac'],
    libraries['lrdf'],
    libraries['glibmm2'],
    libraries['pangomm'],
    libraries['atkmm'],
    libraries['gdkmm2'],
    libraries['sigc2'],
    libraries['gtk2'],
    libraries['xml'],
    libraries['xslt'],
    libraries['soundtouch'],
    libraries['rubberband'],
    libraries['samplerate'],
    libraries['jack'],
    libraries['sysaudio'],
    libraries['cairomm']
])

gtkmmtests.Append(CXXFLAGS="-DLIBSIGC_DISABLE_DEPRECATED")

gtkmmtests.Merge ([
    libraries['gtkmm2'],
    libraries['glib2'],
    libraries['glibmm2'],
    libraries['pangomm'],
    libraries['atkmm'],
    libraries['gdkmm2'],
    libraries['sigc2'],
    libraries['gtk2']
])

if gtkardour['DMALLOC']:
	gtkardour.Merge([libraries['dmalloc']])
	gtkardour.Append(CCFLAGS='-DUSE_DMALLOC')

if gtkardour['FFT_ANALYSIS']:
	gtkardour.Merge ([libraries['fftw3f']])
	gtkardour.Append(CCFLAGS='-DFFT_ANALYSIS')

skipped_files=Split("""
connection_editor.cc
""")

audiounit_files=Split("""
au_pluginui.cc
""")

gtkosx_files=Split("""
sync-menu.c
cocoacarbon.c
""")

x11_files=Split("""
x11.cc
""")

gtkardour_files=Split("""
about.cc
actions.cc
add_route_dialog.cc
add_midi_cc_track_dialog.cc
ardour_dialog.cc
ardour_ui.cc
ardour_ui2.cc
ardour_ui_dependents.cc
ardour_ui_dialogs.cc
ardour_ui_ed.cc
ardour_ui_mixer.cc
ardour_ui_options.cc
audio_clock.cc
audio_time_axis.cc
audio_region_editor.cc
control_point.cc
automation_line.cc
automation_time_axis.cc
automation_streamview.cc
automation_controller.cc
automation_region_view.cc
bundle_manager.cc
midi_port_dialog.cc
midi_time_axis.cc
midi_streamview.cc
axis_view.cc
canvas-simpleline.c
simpleline.cc
canvas-simplerect.c
simplerect.cc
canvas-waveview.c
diamond.cc
canvas-midi-event.cc
crossfade_edit.cc
crossfade_view.cc
curvetest.cc
enums.cc
editing.cc
editor.cc
editor_actions.cc
editor_audio_import.cc
editor_audiotrack.cc
editor_canvas.cc
editor_canvas_events.cc
editor_cursors.cc
editor_edit_groups.cc
editor_export_audio.cc
editor_hscroller.cc
editor_keyboard.cc
editor_keys.cc
editor_markers.cc
editor_mixer.cc
editor_mouse.cc
editor_nudge.cc
editor_ops.cc
editor_region_list.cc
editor_route_list.cc
editor_rulers.cc
editor_scrub.cc
editor_selection.cc
editor_selection_list.cc
editor_tempodisplay.cc
editor_timefx.cc
engine_dialog.cc
export_dialog.cc
export_session_dialog.cc
export_region_dialog.cc
export_range_markers_dialog.cc
gain_meter.cc
ghostregion.cc
gtk-custom-hruler.c
gtk-custom-ruler.c
io_selector.cc
port_matrix.cc
keyboard.cc
keyeditor.cc
ladspa_pluginui.cc
latency_gui.cc
location_ui.cc
main.cc
marker.cc
mixer_strip.cc
mixer_ui.cc
new_session_dialog.cc
option_editor.cc
opts.cc
panner.cc
panner2d.cc
panner_ui.cc
playlist_selector.cc
plugin_selector.cc
plugin_ui.cc
prompter.cc
public_editor.cc
processor_box.cc
region_gain_line.cc
region_selection.cc
region_view.cc
audio_region_view.cc
midi_region_view.cc
tape_region_view.cc
route_params_ui.cc
route_processor_selection.cc
route_ui.cc
selection.cc
sfdb_ui.cc
send_ui.cc
streamview.cc
audio_streamview.cc
tempo_dialog.cc
theme_manager.cc
time_axis_view.cc
time_axis_view_item.cc
route_time_axis.cc
time_selection.cc
ui_config.cc
utils.cc
version.cc
waveview.cc
tempo_lines.cc
""")

fft_analysis_files=Split("""
analysis_window.cc
fft_graph.cc
fft_result.cc
""")

pixmap_files = glob.glob('pixmaps/*.xpm')
icon_files = glob.glob ('icons/*.png')

intl_files = gtkardour_files + glob.glob('*.h')

mtest_files=Split("""
mtest.cc
""")


rcu_files=Split("""
rcu.cc
""")

itest_files=Split("""
itest.cc
""")

stest_files=Split("""
stest.cc
""")

tt_files=Split ("""
tt.cc
""")

extra_sources = []

vst_files = [ 'vst_pluginui.cc' ]

if env['VST']:
	extra_sources += vst_files
	gtkardour.Append (CCFLAGS="-DVST_SUPPORT", CPPPATH="#libs/fst")

cmt_files=Split("""
canvas-imageframe.c
editor_imageframe.cc
imageframe.cc
imageframe_socket_handler.cc
imageframe_time_axis.cc
imageframe_time_axis_group.cc
imageframe_time_axis_view.cc
imageframe_view.cc
marker_time_axis.cc
marker_time_axis_view.cc
marker_view.cc
visual_time_axis.cc
""")

if env['CMT']:
    extra_sources += cmt_files
    gtkardour.Append (CCFLAGS="-DWITH_CMT")

if gtkardour['GTKOSX']:
   extra_sources += gtkosx_files
   gtkardour.Append (CCFLAGS="-DTOP_MENUBAR -DGTKOSX")
else:
   extra_sources += x11_files
	
if gtkardour['AUDIOUNITS']:
    extra_sources += audiounit_files
    gtkardour.Append(CCFLAGS='-DHAVE_AUDIOUNITS')
    gtkardour.Append(LINKFLAGS='-framework Carbon')
    gtkardour.Merge([libraries['appleutility']])
 
if env['FFT_ANALYSIS']:
	extra_sources += fft_analysis_files

intl_files += extra_sources

gtkardour.Append(CCFLAGS="-D_REENTRANT -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE")
gtkardour.Append(CXXFLAGS="-DLOCALEDIR=\\\""+final_prefix+"/share/locale\\\"")

versionflag = '-DVERSIONSTRING=\\\"' + env['VERSION'] + '\\\"'

gtkardour.Append(CXXFLAGS=versionflag)

executable = 'ardour-' + ardour_version

ardour = gtkardour.Program(target = executable, source = gtkardour_files + extra_sources)
ardourlib = gtkardour.SharedLibrary(target = 'ardourgtk', source = gtkardour_files + extra_sources)

mtest = gtkardour.Program(target = 'mtest', source = mtest_files)
itest = gtkardour.Program(target = 'itest', source = itest_files)
rcu = gtkardour.Program(target = 'rcu', source = rcu_files)
tt = gtkmmtests.Program(target = 'tt', source = tt_files)

my_font_dict = { }

if gtkardour['DIST_TARGET'] == 'panther' or gtkardour['DIST_TARGET'] == 'tiger':
	#
	# OS X font rendering is different even with X11
	#
	my_font_dict['%FONT_TINY%'] = 'Lucida Grande 7'
	my_font_dict['%FONT_SMALLERER%'] = 'Lucida Grande 8'
	my_font_dict['%FONT_SMALLER%'] = 'Lucida Grande 9'
	my_font_dict['%FONT_SMALL%'] = 'Lucida Grande 10'
	my_font_dict['%FONT_NORMAL%'] = 'Lucida Grande 11'
	my_font_dict['%FONT_BIG%'] = 'Lucida Grande 12'
	my_font_dict['%FONT_BIGGER%'] = 'Lucida Grande 14'
	my_font_dict['%FONT_LARGE%'] = 'Lucida Grande 18'
	my_font_dict['%FONT_LARGER%'] = 'Lucida Grande 28'
	my_font_dict['%FONT_HUGER%'] = 'Lucida Grande 36'
	my_font_dict['%FONT_MASSIVE%'] = 'Lucida Grande 60'
	my_font_dict['%FONT_BOLD_TINY%'] = 'Lucida Grande bold 7'
	my_font_dict['%FONT_BOLD_SMALLER%'] = 'Lucida Grande bold 9'
	my_font_dict['%FONT_BOLD_SMALL%'] = 'Lucida Grande bold 10'
	my_font_dict['%FONT_BOLD_NORMAL%'] = 'Lucida Grande bold 11'
	my_font_dict['%FONT_BOLD_BIG%'] = 'Lucida Grande bold 13'
	my_font_dict['%FONT_BOLD_BIGGER%'] = 'Lucida Grande bold 14'
	my_font_dict['%FONT_BOLD_LARGE%'] = 'Lucida Grande bold 20'
	my_font_dict['%FONT_BOLD_LARGER%'] = 'Lucida Grande bold 25'
	my_font_dict['%FONT_BOLD_HUGER%'] = 'Lucida Grande bold 36'
	my_font_dict['%FONT_BOLD_MASSIVE%'] = 'Lucida Grande bold 60'
	my_font_dict['%FONT_ITALIC_TINY%'] = 'Lucida Grande italic 7'
	my_font_dict['%FONT_ITALIC_SMALLER%'] = 'Lucida Grande italic 9'
	my_font_dict['%FONT_ITALIC_SMALL%'] = 'Lucida Grande italic 10'
	my_font_dict['%FONT_ITALIC_NORMAL%'] = 'Lucida Grande italic 11'
	my_font_dict['%FONT_ITALIC_BIG%'] = 'Lucida Grande italic 15'
	my_font_dict['%FONT_ITALIC_BIGGER%'] = 'Lucida Grande italic 16'
	my_font_dict['%FONT_ITALIC_LARGE%'] = 'Lucida Grande italic 20'
	my_font_dict['%FONT_ITALIC_LARGER%'] = 'Lucida Grande italic 28'
	my_font_dict['%FONT_ITALIC_HUGER%'] = 'Lucida Grande italic 36'
	my_font_dict['%FONT_ITALIC_MASSIVE%'] = 'Lucida Grande italic 60'
else:
	#
	# Linux/X11 font rendering
	#
	my_font_dict['%FONT_TINY%'] = 'sans 4'
	my_font_dict['%FONT_SMALLERER%'] = 'sans 6'
	my_font_dict['%FONT_SMALLER%'] = 'sans 6'
	my_font_dict['%FONT_SMALL%'] = 'sans 7'
	my_font_dict['%FONT_NORMAL%'] = 'sans 8'
	my_font_dict['%FONT_BIG%'] = 'sans 12'
	my_font_dict['%FONT_BIGGER%'] = 'sans 14'
	my_font_dict['%FONT_LARGE%'] = 'sans 18'
	my_font_dict['%FONT_LARGER%'] = 'sans 24'
	my_font_dict['%FONT_HUGER%'] = 'sans 34'
	my_font_dict['%FONT_MASSIVE%'] = 'sans 60'
	my_font_dict['%FONT_BOLD_TINY%'] = 'sans bold 4'
	my_font_dict['%FONT_BOLD_SMALLER%'] = 'sans bold 6'
	my_font_dict['%FONT_BOLD_SMALL%'] = 'sans bold 7'
	my_font_dict['%FONT_BOLD_NORMAL%'] = 'sans bold 8'
	my_font_dict['%FONT_BOLD_BIG%'] = 'sans bold 12'
	my_font_dict['%FONT_BOLD_BIGGER%'] = 'sans bold 14'
	my_font_dict['%FONT_BOLD_LARGE%'] = 'sans bold 18'
	my_font_dict['%FONT_BOLD_LARGER%'] = 'sans bold 24'
	my_font_dict['%FONT_BOLD_HUGE%'] = 'sans bold 25'
	my_font_dict['%FONT_BOLD_HUGER%'] = 'sans bold 34'
	my_font_dict['%FONT_BOLD_MASSIVE%'] = 'sans bold 60'
	my_font_dict['%FONT_ITALIC_TINY%'] = 'sans italic 4'
	my_font_dict['%FONT_ITALIC_SMALLER%'] = 'sans italic 6'
	my_font_dict['%FONT_ITALIC_SMALL%'] = 'sans italic 7'
	my_font_dict['%FONT_ITALIC_NORMAL%'] = 'sans italic 8'
	my_font_dict['%FONT_ITALIC_BIG%'] = 'sans italic 12'
	my_font_dict['%FONT_ITALIC_BIGGER%'] = 'sans italic 14'
	my_font_dict['%FONT_ITALIC_LARGE%'] = 'sans italic 18'
	my_font_dict['%FONT_ITALIC_LARGER%'] = 'sans italic 24'
	my_font_dict['%FONT_ITALIC_HUGE%'] = 'sans italic 25'
	my_font_dict['%FONT_ITALIC_HUGER%'] = 'sans italic 34'
	my_font_dict['%FONT_ITALIC_MASSIVE%'] = 'sans italic 60'

ardour_dark_theme = env.SubstInFile ('ardour2_ui_dark.rc', 'ardour2_ui_dark.rc.in', SUBST_DICT = my_font_dict)
ardour_light_theme = env.SubstInFile ('ardour2_ui_light.rc', 'ardour2_ui_light.rc.in', SUBST_DICT = my_font_dict)

my_subst_dict = { }

#
# null substitution just to avoid ardour.bindings being in svn
#

ardourbindings = env.SubstInFile ('ardour.bindings', 'ardour.bindings.in', SUBST_DICT = my_subst_dict);

my_subst_dict['%INSTALL_PREFIX%'] = final_prefix
my_subst_dict['%LIBDIR%'] = env['LIBDIR']
my_subst_dict['%VERSION%'] = ardour_version

ardoursh = env.SubstInFile ('ardour.sh','ardour.sh.in', SUBST_DICT = my_subst_dict);
env.AddPostAction (ardoursh, Chmod ('$TARGET', 0755))

ardourdev = env.SubstInFile ('ardev_common.sh','ardev_common.sh.in', SUBST_DICT = my_subst_dict);
env.AddPostAction (ardourdev, Chmod ('$TARGET', 0755))

Default(ardourbindings)
Default(ardourdev)
Default(ardoursh)
Default(ardour_dark_theme)
Default(ardour_light_theme)

if env['VST']:
	Default(ardourlib)
	# the library - into the library dir
	env.Alias('install', env.Install(os.path.join(install_prefix, env['LIBDIR'], 'ardour2'), ardourlib))
else:

	if env['VERSIONED']:
		Default (env.VersionedExecutable ('tagged_executable', ardour))
	else:
		Default(ardour)

        #install

	# the executable - into the library dir
	env.Alias('install', env.Install(os.path.join(install_prefix, env['LIBDIR'], 'ardour2'), ardour))
	# the script - into the bin dir
	env.Alias('install', env.InstallAs(os.path.join(install_prefix, 'bin')+'/ardour2', ardoursh))

if env['NLS']:
	i18n (gtkardour, gtkardour_files+skipped_files+fft_analysis_files, env)
    
# configuration files
env.Alias('install', env.Install(os.path.join(config_prefix, 'ardour2'), ardour_dark_theme))
env.Alias('install', env.Install(os.path.join(config_prefix, 'ardour2'), ardour_light_theme))
env.Alias('install', env.Install(os.path.join(config_prefix, 'ardour2'), 'ardour.menus'))
env.Alias('install', env.Install(os.path.join(config_prefix, 'ardour2'), 'ardour-sae.menus'))
env.Alias('install', env.Install(os.path.join(config_prefix, 'ardour2'), 'ardour.bindings'))
env.Alias('install', env.Install(os.path.join(config_prefix, 'ardour2'), 'ardour2_ui_default.conf'))
# data files
env.Alias('install', env.Install(os.path.join(install_prefix, 'share', 'ardour2'), 'splash.png'))
env.Alias('install', env.Install(os.path.join(install_prefix, 'share', 'ardour2', 'pixmaps'), pixmap_files))
env.Alias('install', env.Install(os.path.join(install_prefix, 'share', 'ardour2', 'icons'), icon_files))

env.Alias ('version', gtkardour.VersionBuild(['version.cc','version.h'], []))
		
#dist
env.Alias ('tarball', env.Distribute (env['DISTTREE'],
                                      [ 'SConscript',
                                        'i18n.h', 'gettext.h',
					'ardour.sh.in',
					'ardev_common.sh.in',
					'ardev', 'ardbg',
                                        'ardour2_ui_dark.rc', 'ardour2_ui_light.rc', 'splash.png',
                                        'ardour.menus',
                                        'ardour-sae.menus',
					'ardour.bindings.in', 'ardour2_ui_default.conf',
					'editor_xpms'
                                        ] +
                                      gtkardour_files +
				      vst_files +
				      pixmap_files +
				      icon_files +
				      skipped_files +
				      audiounit_files + 
				      gtkosx_files +
				      x11_files +
				      fft_analysis_files +
				      glob.glob('po/*.po') + glob.glob('*.h')))

# generate a prototype full-featured ardour_ui.rc file

env.Alias ('protorc', env.Command ('proto.rc', gtkardour_files, """
     grep set_name $SOURCES | \
sed 's/.*("\([a-zA-Z_][a-zA-Z_]*\)").*/\\1/' | \
grep -v '\\.' | sort | uniq | \
awk '/\\./ {} { printf ("style \\"%s\\"\\n{\\n\
  fg[NORMAL] =   { 0, 0, 0 }\\n\
  fg[ACTIVE] =   { 0, 0, 0 }\\n\
  fg[SELECTED] = { 0, 0, 0 }\\n\
  bg[NORMAL] =   { 0, 0, 0 }\\n\
  bg[ACTIVE] =   { 0, 0, 0 }\\n\
  bg[SELECTED] = { 0, 0, 0 }\\n\
}\\nwidget \\"*%s\\" style \\"%s\\"\\nwidget \\"*%s*\\" style \\"%s\\"\\n\\n", \
  $$0, $$0, $$0, $$0, $$0) }' > $TARGET && \
     grep 'color_map\[[a-zA-Z_][a-zA-Z]*\]' $SOURCES | \
 sed 's/.*\[\([a-zA-Z_][a-zA-Z_]*\)].*/\\1/'| \
 sort | uniq | \
 awk '{ printf ("style \\"%s\\"\\n{\\n\
  fg[NORMAL] =   { 0, 0, 0 }\\n\
  fg[ACTIVE] =   { 0, 0, 0 }\\n\
}\\nwidget \\"*%s\\" style \\"%s\\"\\n \\n\\n", $$0, $$0, $$0) }' >> $TARGET ;
"""
))
